
IOT-BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c48  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  00006450  2**0
                  CONTENTS
  4 .ARM          00000000  08004e28  08004e28  00006450  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e28  08004e28  00006450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004e28  08004e28  00005e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004e30  08004e30  00005e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000450  20000000  08004e38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000450  08005288  00006450  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08005288  000068a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193b7  00000000  00000000  00006480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002baf  00000000  00000000  0001f837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000bbf2  00000000  00000000  000223e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  0002dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2b  00000000  00000000  0002f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279b5  00000000  00000000  0003003b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b68c  00000000  00000000  000579f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e70  00000000  00000000  0007307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00165eec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036b4  00000000  00000000  00165f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  001695e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000450 	.word	0x20000450
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004db8 	.word	0x08004db8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000454 	.word	0x20000454
 80001c4:	08004db8 	.word	0x08004db8

080001c8 <fetchBleEvent>:
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
}

int fetchBleEvent(uint8_t *container, int size){
 80001c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001cc:	b088      	sub	sp, #32
 80001ce:	4606      	mov	r6, r0
 80001d0:	460d      	mov	r5, r1

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80001d2:	4b34      	ldr	r3, [pc, #208]	@ (80002a4 <fetchBleEvent+0xdc>)
 80001d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80001d8:	9006      	str	r0, [sp, #24]
 80001da:	f88d 101c 	strb.w	r1, [sp, #28]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80001de:	2140      	movs	r1, #64	@ 0x40
 80001e0:	4831      	ldr	r0, [pc, #196]	@ (80002a8 <fetchBleEvent+0xe0>)
 80001e2:	f001 ff71 	bl	80020c8 <HAL_GPIO_ReadPin>
 80001e6:	2800      	cmp	r0, #0
 80001e8:	d059      	beq.n	800029e <fetchBleEvent+0xd6>

  HAL_Delay(5);
 80001ea:	2005      	movs	r0, #5
 80001ec:	f001 fdf0 	bl	8001dd0 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80001f0:	4f2e      	ldr	r7, [pc, #184]	@ (80002ac <fetchBleEvent+0xe4>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001f8:	4638      	mov	r0, r7
 80001fa:	f001 ff6c 	bl	80020d6 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80001fe:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80002b0 <fetchBleEvent+0xe8>
 8000202:	2401      	movs	r4, #1
 8000204:	9400      	str	r4, [sp, #0]
 8000206:	2305      	movs	r3, #5
 8000208:	aa04      	add	r2, sp, #16
 800020a:	a906      	add	r1, sp, #24
 800020c:	4640      	mov	r0, r8
 800020e:	f003 fd9a 	bl	8003d46 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000212:	4622      	mov	r2, r4
 8000214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000218:	4638      	mov	r0, r7
 800021a:	f001 ff5c 	bl	80020d6 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800021e:	4620      	mov	r0, r4
 8000220:	f001 fdd6 	bl	8001dd0 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800022a:	4638      	mov	r0, r7
 800022c:	f001 ff53 	bl	80020d6 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000230:	9400      	str	r4, [sp, #0]
 8000232:	2305      	movs	r3, #5
 8000234:	aa04      	add	r2, sp, #16
 8000236:	a906      	add	r1, sp, #24
 8000238:	4640      	mov	r0, r8
 800023a:	f003 fd84 	bl	8003d46 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 800023e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000242:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  int i;
  char dummy=0xff;
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	f88d 200f 	strb.w	r2, [sp, #15]

  if(dataSize>size){
 8000250:	42ab      	cmp	r3, r5
 8000252:	dc00      	bgt.n	8000256 <fetchBleEvent+0x8e>
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000254:	461d      	mov	r5, r3
	  dataSize=size;
  }

  if(dataSize>0){
 8000256:	2d00      	cmp	r5, #0
 8000258:	dd18      	ble.n	800028c <fetchBleEvent+0xc4>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800025a:	2400      	movs	r4, #0
 800025c:	e008      	b.n	8000270 <fetchBleEvent+0xa8>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800025e:	2301      	movs	r3, #1
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	1932      	adds	r2, r6, r4
 8000264:	f10d 010f 	add.w	r1, sp, #15
 8000268:	4811      	ldr	r0, [pc, #68]	@ (80002b0 <fetchBleEvent+0xe8>)
 800026a:	f003 fd6c 	bl	8003d46 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 800026e:	3401      	adds	r4, #1
 8000270:	42a5      	cmp	r5, r4
 8000272:	dcf4      	bgt.n	800025e <fetchBleEvent+0x96>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027a:	480c      	ldr	r0, [pc, #48]	@ (80002ac <fetchBleEvent+0xe4>)
 800027c:	f001 ff2b 	bl	80020d6 <HAL_GPIO_WritePin>
  	}

  //let's stop the SPI2


  dataAvailable=0;
 8000280:	2000      	movs	r0, #0
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <fetchBleEvent+0xec>)
 8000284:	6018      	str	r0, [r3, #0]
  return BLE_OK;
  }else{
  return -2;
  }
}
 8000286:	b008      	add	sp, #32
 8000288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000292:	4806      	ldr	r0, [pc, #24]	@ (80002ac <fetchBleEvent+0xe4>)
 8000294:	f001 ff1f 	bl	80020d6 <HAL_GPIO_WritePin>
        return -1;
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	e7f3      	b.n	8000286 <fetchBleEvent+0xbe>
  return -2;
 800029e:	f06f 0001 	mvn.w	r0, #1
 80002a2:	e7f0      	b.n	8000286 <fetchBleEvent+0xbe>
 80002a4:	08004dd0 	.word	0x08004dd0
 80002a8:	48001000 	.word	0x48001000
 80002ac:	48000c00 	.word	0x48000c00
 80002b0:	200005e0 	.word	0x200005e0
 80002b4:	2000072c 	.word	0x2000072c

080002b8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
	int j=0;

	for(j=0;j<size;j++){
 80002b8:	2300      	movs	r3, #0
 80002ba:	4293      	cmp	r3, r2
 80002bc:	da0f      	bge.n	80002de <checkEventResp+0x26>
int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80002be:	b500      	push	{lr}

		if(event[j]!=reference[j]){
 80002c0:	f810 e003 	ldrb.w	lr, [r0, r3]
 80002c4:	f811 c003 	ldrb.w	ip, [r1, r3]
 80002c8:	45e6      	cmp	lr, ip
 80002ca:	d105      	bne.n	80002d8 <checkEventResp+0x20>
	for(j=0;j<size;j++){
 80002cc:	3301      	adds	r3, #1
 80002ce:	4293      	cmp	r3, r2
 80002d0:	dbf6      	blt.n	80002c0 <checkEventResp+0x8>
			return -1;
		}
	}

return BLE_OK;
 80002d2:	2000      	movs	r0, #0
}
 80002d4:	f85d fb04 	ldr.w	pc, [sp], #4
			return -1;
 80002d8:	f04f 30ff 	mov.w	r0, #4294967295
 80002dc:	e7fa      	b.n	80002d4 <checkEventResp+0x1c>
return BLE_OK;
 80002de:	2000      	movs	r0, #0
}
 80002e0:	4770      	bx	lr
	...

080002e4 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	4606      	mov	r6, r0
 80002ea:	460d      	mov	r5, r1

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80002ec:	4b19      	ldr	r3, [pc, #100]	@ (8000354 <sendCommand+0x70>)
 80002ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002f2:	9004      	str	r0, [sp, #16]
 80002f4:	f88d 1014 	strb.w	r1, [sp, #20]
 80002f8:	e010      	b.n	800031c <sendCommand+0x38>
	//wait until it is possible to write
	//while(!dataAvailable);
	HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
	int bufferSize=(slave_header[2]<<8|slave_header[1]);
	if(bufferSize>=size){
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80002fa:	2301      	movs	r3, #1
 80002fc:	b2aa      	uxth	r2, r5
 80002fe:	4631      	mov	r1, r6
 8000300:	4815      	ldr	r0, [pc, #84]	@ (8000358 <sendCommand+0x74>)
 8000302:	f003 fc1f 	bl	8003b44 <HAL_SPI_Transmit>
		result=0;
 8000306:	2400      	movs	r4, #0
	}else{
		result=-1;
	}
	//HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800030e:	4813      	ldr	r0, [pc, #76]	@ (800035c <sendCommand+0x78>)
 8000310:	f001 fee1 	bl	80020d6 <HAL_GPIO_WritePin>
	dataAvailable=0;
 8000314:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <sendCommand+0x7c>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800031a:	b1c4      	cbz	r4, 800034e <sendCommand+0x6a>
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000322:	480e      	ldr	r0, [pc, #56]	@ (800035c <sendCommand+0x78>)
 8000324:	f001 fed7 	bl	80020d6 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000328:	2301      	movs	r3, #1
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	2305      	movs	r3, #5
 800032e:	aa02      	add	r2, sp, #8
 8000330:	a904      	add	r1, sp, #16
 8000332:	4809      	ldr	r0, [pc, #36]	@ (8000358 <sendCommand+0x74>)
 8000334:	f003 fd07 	bl	8003d46 <HAL_SPI_TransmitReceive>
	int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000338:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800033c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000340:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if(bufferSize>=size){
 8000344:	42ab      	cmp	r3, r5
 8000346:	dad8      	bge.n	80002fa <sendCommand+0x16>
		result=-1;
 8000348:	f04f 34ff 	mov.w	r4, #4294967295
 800034c:	e7dc      	b.n	8000308 <sendCommand+0x24>

}
 800034e:	b006      	add	sp, #24
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	bf00      	nop
 8000354:	08004dd8 	.word	0x08004dd8
 8000358:	200005e0 	.word	0x200005e0
 800035c:	48000c00 	.word	0x48000c00
 8000360:	2000072c 	.word	0x2000072c

08000364 <setConnectable>:



}

void setConnectable(){
 8000364:	b570      	push	{r4, r5, r6, lr}
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000366:	200a      	movs	r0, #10
 8000368:	f004 fbcc 	bl	8004b04 <malloc>
 800036c:	4604      	mov	r4, r0
	   memcpy(localname,deviceName,sizeof(deviceName));
 800036e:	4d26      	ldr	r5, [pc, #152]	@ (8000408 <setConnectable+0xa4>)
 8000370:	6828      	ldr	r0, [r5, #0]
 8000372:	6020      	str	r0, [r4, #0]
 8000374:	792b      	ldrb	r3, [r5, #4]
 8000376:	7123      	strb	r3, [r4, #4]
	   localname[sizeof(deviceName)+1]=0x00;
 8000378:	2300      	movs	r3, #0
 800037a:	71a3      	strb	r3, [r4, #6]
	   localname[sizeof(deviceName)+2]=0x00;
 800037c:	71e3      	strb	r3, [r4, #7]
	   localname[sizeof(deviceName)+3]=0x00;
 800037e:	7223      	strb	r3, [r4, #8]
	   localname[sizeof(deviceName)+4]=0x00;
 8000380:	7263      	strb	r3, [r4, #9]
	   localname[sizeof(deviceName)]=0x00;
 8000382:	7163      	strb	r3, [r4, #5]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000384:	2306      	movs	r3, #6
 8000386:	74eb      	strb	r3, [r5, #19]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000388:	2313      	movs	r3, #19
 800038a:	72eb      	strb	r3, [r5, #11]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 800038c:	2017      	movs	r0, #23
 800038e:	f004 fbb9 	bl	8004b04 <malloc>
 8000392:	4606      	mov	r6, r0
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000394:	f105 0308 	add.w	r3, r5, #8
 8000398:	cb07      	ldmia	r3!, {r0, r1, r2}
 800039a:	6030      	str	r0, [r6, #0]
 800039c:	6071      	str	r1, [r6, #4]
 800039e:	60b2      	str	r2, [r6, #8]
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	7333      	strb	r3, [r6, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80003a4:	6822      	ldr	r2, [r4, #0]
 80003a6:	6863      	ldr	r3, [r4, #4]
 80003a8:	f8c6 200d 	str.w	r2, [r6, #13]
 80003ac:	f8c6 3011 	str.w	r3, [r6, #17]
 80003b0:	8923      	ldrh	r3, [r4, #8]
 80003b2:	f8a6 3015 	strh.w	r3, [r6, #21]

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80003b6:	2117      	movs	r1, #23
 80003b8:	4630      	mov	r0, r6
 80003ba:	f7ff ff93 	bl	80002e4 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 80003be:	2007      	movs	r0, #7
 80003c0:	f004 fba0 	bl	8004b04 <malloc>
 80003c4:	4605      	mov	r5, r0
	   while(!dataAvailable);
 80003c6:	4b11      	ldr	r3, [pc, #68]	@ (800040c <setConnectable+0xa8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0fb      	beq.n	80003c6 <setConnectable+0x62>
	   res=fetchBleEvent(rxEvent,7);
 80003ce:	2107      	movs	r1, #7
 80003d0:	4628      	mov	r0, r5
 80003d2:	f7ff fef9 	bl	80001c8 <fetchBleEvent>
	   if(res==BLE_OK){
 80003d6:	b950      	cbnz	r0, 80003ee <setConnectable+0x8a>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80003d8:	2207      	movs	r2, #7
 80003da:	490d      	ldr	r1, [pc, #52]	@ (8000410 <setConnectable+0xac>)
 80003dc:	4628      	mov	r0, r5
 80003de:	f7ff ff6b 	bl	80002b8 <checkEventResp>
	   if(res==BLE_OK){
 80003e2:	b920      	cbnz	r0, 80003ee <setConnectable+0x8a>
		   stackInitCompleteFlag|=0x80;
 80003e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <setConnectable+0xb0>)
 80003e6:	8813      	ldrh	r3, [r2, #0]
 80003e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ec:	8013      	strh	r3, [r2, #0]
	   }
	   }

	   free(rxEvent);
 80003ee:	4628      	mov	r0, r5
 80003f0:	f004 fb90 	bl	8004b14 <free>
	   free(discoverableCommand);
 80003f4:	4630      	mov	r0, r6
 80003f6:	f004 fb8d 	bl	8004b14 <free>
	   free(localname);
 80003fa:	4620      	mov	r0, r4
 80003fc:	f004 fb8a 	bl	8004b14 <free>
	   HAL_Delay(10);
 8000400:	200a      	movs	r0, #10
 8000402:	f001 fce5 	bl	8001dd0 <HAL_Delay>
}
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	2000072c 	.word	0x2000072c
 8000410:	20000018 	.word	0x20000018
 8000414:	2000046c 	.word	0x2000046c

08000418 <catchBLE>:
void catchBLE(){
 8000418:	b508      	push	{r3, lr}
int result=fetchBleEvent(buffer,127);
 800041a:	217f      	movs	r1, #127	@ 0x7f
 800041c:	4806      	ldr	r0, [pc, #24]	@ (8000438 <catchBLE+0x20>)
 800041e:	f7ff fed3 	bl	80001c8 <fetchBleEvent>
	  if(result==BLE_OK){
 8000422:	b928      	cbnz	r0, 8000430 <catchBLE+0x18>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000424:	2203      	movs	r2, #3
 8000426:	4905      	ldr	r1, [pc, #20]	@ (800043c <catchBLE+0x24>)
 8000428:	4803      	ldr	r0, [pc, #12]	@ (8000438 <catchBLE+0x20>)
 800042a:	f7ff ff45 	bl	80002b8 <checkEventResp>
 800042e:	b100      	cbz	r0, 8000432 <catchBLE+0x1a>
}
 8000430:	bd08      	pop	{r3, pc}
			  setConnectable();
 8000432:	f7ff ff97 	bl	8000364 <setConnectable>
}
 8000436:	e7fb      	b.n	8000430 <catchBLE+0x18>
 8000438:	20000470 	.word	0x20000470
 800043c:	20000020 	.word	0x20000020

08000440 <BLE_command>:
}




int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	4617      	mov	r7, r2
 8000444:	461e      	mov	r6, r3
	   int response;

	   sendCommand(command,size);
 8000446:	f7ff ff4d 	bl	80002e4 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800044a:	9d06      	ldr	r5, [sp, #24]
 800044c:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8000450:	4628      	mov	r0, r5
 8000452:	f004 fb57 	bl	8004b04 <malloc>
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <BLE_command+0x5c>)
 8000458:	f8c3 0104 	str.w	r0, [r3, #260]	@ 0x104

	   long contatore=0;
 800045c:	2400      	movs	r4, #0
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800045e:	2140      	movs	r1, #64	@ 0x40
 8000460:	480f      	ldr	r0, [pc, #60]	@ (80004a0 <BLE_command+0x60>)
 8000462:	f001 fe31 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000466:	b920      	cbnz	r0, 8000472 <BLE_command+0x32>
		   contatore++;
 8000468:	3401      	adds	r4, #1
		   if(contatore>30000){
 800046a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800046e:	4284      	cmp	r4, r0
 8000470:	ddf5      	ble.n	800045e <BLE_command+0x1e>
			   break;
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000472:	4629      	mov	r1, r5
 8000474:	4b09      	ldr	r3, [pc, #36]	@ (800049c <BLE_command+0x5c>)
 8000476:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 800047a:	f7ff fea5 	bl	80001c8 <fetchBleEvent>
	   if(response==BLE_OK){
 800047e:	4604      	mov	r4, r0
 8000480:	b938      	cbnz	r0, 8000492 <BLE_command+0x52>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000482:	4632      	mov	r2, r6
 8000484:	4639      	mov	r1, r7
 8000486:	4b05      	ldr	r3, [pc, #20]	@ (800049c <BLE_command+0x5c>)
 8000488:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 800048c:	f7ff ff14 	bl	80002b8 <checkEventResp>
 8000490:	4604      	mov	r4, r0
	   }
	   HAL_Delay(10);
 8000492:	200a      	movs	r0, #10
 8000494:	f001 fc9c 	bl	8001dd0 <HAL_Delay>


	return response;
}
 8000498:	4620      	mov	r0, r4
 800049a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800049c:	2000046c 	.word	0x2000046c
 80004a0:	48001000 	.word	0x48001000

080004a4 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	b083      	sub	sp, #12
 80004a8:	460d      	mov	r5, r1


	//memcpy
	memcpy(ADD_CUSTOM_SERVICE+5,UUID,16);
 80004aa:	4c16      	ldr	r4, [pc, #88]	@ (8000504 <addService+0x60>)
 80004ac:	f8d0 e000 	ldr.w	lr, [r0]
 80004b0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80004b4:	6881      	ldr	r1, [r0, #8]
 80004b6:	68c3      	ldr	r3, [r0, #12]
 80004b8:	f8c4 e029 	str.w	lr, [r4, #41]	@ 0x29
 80004bc:	f8c4 c02d 	str.w	ip, [r4, #45]	@ 0x2d
 80004c0:	f8c4 1031 	str.w	r1, [r4, #49]	@ 0x31
 80004c4:	f8c4 3035 	str.w	r3, [r4, #53]	@ 0x35
    ADD_CUSTOM_SERVICE[22]=attributes;
 80004c8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
	   if(BLE_command(ADD_CUSTOM_SERVICE,sizeof(ADD_CUSTOM_SERVICE),ADD_CUSTOM_SERVICE_COMPLETE,sizeof(ADD_CUSTOM_SERVICE_COMPLETE),1)==BLE_OK){
 80004cc:	2301      	movs	r3, #1
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2307      	movs	r3, #7
 80004d2:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 80004d6:	2117      	movs	r1, #23
 80004d8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80004dc:	f7ff ffb0 	bl	8000440 <BLE_command>
 80004e0:	b940      	cbnz	r0, 80004f4 <addService+0x50>
		   handle[0]=rxEvent[7];
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <addService+0x64>)
 80004e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80004e8:	79d2      	ldrb	r2, [r2, #7]
 80004ea:	702a      	strb	r2, [r5, #0]
		   handle[1]=rxEvent[8];
 80004ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80004f0:	7a1b      	ldrb	r3, [r3, #8]
 80004f2:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 80004f4:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <addService+0x64>)
 80004f6:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 80004fa:	f004 fb0b 	bl	8004b14 <free>



}
 80004fe:	b003      	add	sp, #12
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop
 8000504:	20000000 	.word	0x20000000
 8000508:	2000046c 	.word	0x2000046c

0800050c <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	460d      	mov	r5, r1



	memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000512:	4c1b      	ldr	r4, [pc, #108]	@ (8000580 <addCharacteristic+0x74>)
 8000514:	6806      	ldr	r6, [r0, #0]
 8000516:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800051a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800051e:	68c1      	ldr	r1, [r0, #12]
 8000520:	f8c4 604b 	str.w	r6, [r4, #75]	@ 0x4b
 8000524:	f8c4 e04f 	str.w	lr, [r4, #79]	@ 0x4f
 8000528:	f8c4 c053 	str.w	ip, [r4, #83]	@ 0x53
 800052c:	f8c4 1057 	str.w	r1, [r4, #87]	@ 0x57


	   ADD_CUSTOM_CHAR[4]= handleService[0];
 8000530:	7811      	ldrb	r1, [r2, #0]
 8000532:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
	   ADD_CUSTOM_CHAR[5]= handleService[1];
 8000536:	7852      	ldrb	r2, [r2, #1]
 8000538:	f884 2049 	strb.w	r2, [r4, #73]	@ 0x49
	   ADD_CUSTOM_CHAR[23]= maxsize;
 800053c:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
	   ADD_CUSTOM_CHAR[25]= proprieties;
 8000540:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000544:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
	   if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000548:	2301      	movs	r3, #1
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2307      	movs	r3, #7
 800054e:	f104 0264 	add.w	r2, r4, #100	@ 0x64
 8000552:	211e      	movs	r1, #30
 8000554:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8000558:	f7ff ff72 	bl	8000440 <BLE_command>
 800055c:	b940      	cbnz	r0, 8000570 <addCharacteristic+0x64>
		   handleChar[0]=rxEvent[7];
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <addCharacteristic+0x78>)
 8000560:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000564:	79d2      	ldrb	r2, [r2, #7]
 8000566:	702a      	strb	r2, [r5, #0]
		   handleChar[1]=rxEvent[8];
 8000568:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800056c:	7a1b      	ldrb	r3, [r3, #8]
 800056e:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <addCharacteristic+0x78>)
 8000572:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 8000576:	f004 facd 	bl	8004b14 <free>





}
 800057a:	b002      	add	sp, #8
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000
 8000584:	2000046c 	.word	0x2000046c

08000588 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	b083      	sub	sp, #12
 800058c:	461e      	mov	r6, r3

	UPDATE_CHAR[3]=size+6;
 800058e:	b2db      	uxtb	r3, r3
 8000590:	1d9d      	adds	r5, r3, #6
 8000592:	4c1c      	ldr	r4, [pc, #112]	@ (8000604 <updateCharValue+0x7c>)
 8000594:	f884 506f 	strb.w	r5, [r4, #111]	@ 0x6f
	UPDATE_CHAR[4]=handleService[0];
 8000598:	7805      	ldrb	r5, [r0, #0]
 800059a:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
	UPDATE_CHAR[5]=handleService[1];
 800059e:	7840      	ldrb	r0, [r0, #1]
 80005a0:	f884 0071 	strb.w	r0, [r4, #113]	@ 0x71
	UPDATE_CHAR[6]=handleChar[0];
 80005a4:	7808      	ldrb	r0, [r1, #0]
 80005a6:	f884 0072 	strb.w	r0, [r4, #114]	@ 0x72
	UPDATE_CHAR[7]=handleChar[1];
 80005aa:	7849      	ldrb	r1, [r1, #1]
 80005ac:	f884 1073 	strb.w	r1, [r4, #115]	@ 0x73
	UPDATE_CHAR[8]=offset;
 80005b0:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
	UPDATE_CHAR[9]=size;
 80005b4:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80005b8:	f106 070a 	add.w	r7, r6, #10
 80005bc:	4638      	mov	r0, r7
 80005be:	f004 faa1 	bl	8004b04 <malloc>
 80005c2:	4605      	mov	r5, r0
	memcpy(commandComplete,UPDATE_CHAR,10);
 80005c4:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80005c8:	cb03      	ldmia	r3!, {r0, r1}
 80005ca:	6028      	str	r0, [r5, #0]
 80005cc:	6069      	str	r1, [r5, #4]
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	812b      	strh	r3, [r5, #8]
	memcpy(commandComplete+10,data,size);
 80005d2:	4632      	mov	r2, r6
 80005d4:	9908      	ldr	r1, [sp, #32]
 80005d6:	f105 000a 	add.w	r0, r5, #10
 80005da:	f004 fb95 	bl	8004d08 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2307      	movs	r3, #7
 80005e4:	f104 0264 	add.w	r2, r4, #100	@ 0x64
 80005e8:	4639      	mov	r1, r7
 80005ea:	4628      	mov	r0, r5
 80005ec:	f7ff ff28 	bl	8000440 <BLE_command>

	free(commandComplete);
 80005f0:	4628      	mov	r0, r5
 80005f2:	f004 fa8f 	bl	8004b14 <free>
	free(rxEvent);
 80005f6:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <updateCharValue+0x80>)
 80005f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 80005fc:	f004 fa8a 	bl	8004b14 <free>

}
 8000600:	b003      	add	sp, #12
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000604:	20000000 	.word	0x20000000
 8000608:	2000046c 	.word	0x2000046c

0800060c <ble_init>:
void ble_init(){
 800060c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000610:	b083      	sub	sp, #12
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000612:	2006      	movs	r0, #6
 8000614:	f004 fa76 	bl	8004b04 <malloc>
 8000618:	4bd3      	ldr	r3, [pc, #844]	@ (8000968 <ble_init+0x35c>)
 800061a:	f8c3 0104 	str.w	r0, [r3, #260]	@ 0x104
	while(!dataAvailable);
 800061e:	4bd3      	ldr	r3, [pc, #844]	@ (800096c <ble_init+0x360>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0fb      	beq.n	800061e <ble_init+0x12>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 8000626:	2106      	movs	r1, #6
 8000628:	f7ff fdce 	bl	80001c8 <fetchBleEvent>
	if(res==BLE_OK){
 800062c:	b960      	cbnz	r0, 8000648 <ble_init+0x3c>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 800062e:	2206      	movs	r2, #6
 8000630:	49cf      	ldr	r1, [pc, #828]	@ (8000970 <ble_init+0x364>)
 8000632:	4bcd      	ldr	r3, [pc, #820]	@ (8000968 <ble_init+0x35c>)
 8000634:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 8000638:	f7ff fe3e 	bl	80002b8 <checkEventResp>
	if(res==BLE_OK){
 800063c:	b920      	cbnz	r0, 8000648 <ble_init+0x3c>
	   stackInitCompleteFlag|=0x01;
 800063e:	4aca      	ldr	r2, [pc, #808]	@ (8000968 <ble_init+0x35c>)
 8000640:	8813      	ldrh	r3, [r2, #0]
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	8013      	strh	r3, [r2, #0]
	HAL_Delay(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f001 fbc1 	bl	8001dd0 <HAL_Delay>
	free(rxEvent);
 800064e:	4bc6      	ldr	r3, [pc, #792]	@ (8000968 <ble_init+0x35c>)
 8000650:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 8000654:	f004 fa5e 	bl	8004b14 <free>
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000658:	48c6      	ldr	r0, [pc, #792]	@ (8000974 <ble_init+0x368>)
 800065a:	2300      	movs	r3, #0
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2307      	movs	r3, #7
 8000660:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8000664:	2104      	movs	r1, #4
 8000666:	308c      	adds	r0, #140	@ 0x8c
 8000668:	f7ff feea 	bl	8000440 <BLE_command>
 800066c:	b920      	cbnz	r0, 8000678 <ble_init+0x6c>
	   stackInitCompleteFlag|=0x02;
 800066e:	4abe      	ldr	r2, [pc, #760]	@ (8000968 <ble_init+0x35c>)
 8000670:	8813      	ldrh	r3, [r2, #0]
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000678:	4bbb      	ldr	r3, [pc, #748]	@ (8000968 <ble_init+0x35c>)
 800067a:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 800067e:	f004 fa49 	bl	8004b14 <free>
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000682:	48bc      	ldr	r0, [pc, #752]	@ (8000974 <ble_init+0x368>)
 8000684:	2303      	movs	r3, #3
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2307      	movs	r3, #7
 800068a:	f100 0290 	add.w	r2, r0, #144	@ 0x90
 800068e:	4619      	mov	r1, r3
 8000690:	3098      	adds	r0, #152	@ 0x98
 8000692:	f7ff fed5 	bl	8000440 <BLE_command>
 8000696:	b990      	cbnz	r0, 80006be <ble_init+0xb2>
	   stackInitCompleteFlag|=0x04;
 8000698:	4bb3      	ldr	r3, [pc, #716]	@ (8000968 <ble_init+0x35c>)
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	f042 0204 	orr.w	r2, r2, #4
 80006a0:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 80006a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80006a6:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 80006aa:	f8a3 1108 	strh.w	r1, [r3, #264]	@ 0x108
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 80006ae:	f8b2 1009 	ldrh.w	r1, [r2, #9]
 80006b2:	f8a3 110c 	strh.w	r1, [r3, #268]	@ 0x10c
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 80006b6:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80006ba:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
	free(rxEvent);
 80006be:	4caa      	ldr	r4, [pc, #680]	@ (8000968 <ble_init+0x35c>)
 80006c0:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
 80006c4:	f004 fa26 	bl	8004b14 <free>
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 80006c8:	4daa      	ldr	r5, [pc, #680]	@ (8000974 <ble_init+0x368>)
 80006ca:	9500      	str	r5, [sp, #0]
 80006cc:	2305      	movs	r3, #5
 80006ce:	2200      	movs	r2, #0
 80006d0:	f504 7186 	add.w	r1, r4, #268	@ 0x10c
 80006d4:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 80006d8:	f7ff ff56 	bl	8000588 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 80006dc:	8823      	ldrh	r3, [r4, #0]
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 80006e4:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
 80006e8:	f004 fa14 	bl	8004b14 <free>
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80006ec:	2300      	movs	r3, #0
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2307      	movs	r3, #7
 80006f2:	f105 02a0 	add.w	r2, r5, #160	@ 0xa0
 80006f6:	2110      	movs	r1, #16
 80006f8:	f105 00a8 	add.w	r0, r5, #168	@ 0xa8
 80006fc:	f7ff fea0 	bl	8000440 <BLE_command>
 8000700:	b918      	cbnz	r0, 800070a <ble_init+0xfe>
	   stackInitCompleteFlag|=0x10;
 8000702:	8823      	ldrh	r3, [r4, #0]
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 800070a:	4b97      	ldr	r3, [pc, #604]	@ (8000968 <ble_init+0x35c>)
 800070c:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 8000710:	f004 fa00 	bl	8004b14 <free>
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 8000714:	4897      	ldr	r0, [pc, #604]	@ (8000974 <ble_init+0x368>)
 8000716:	2300      	movs	r3, #0
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2307      	movs	r3, #7
 800071c:	f100 02b8 	add.w	r2, r0, #184	@ 0xb8
 8000720:	2106      	movs	r1, #6
 8000722:	30c0      	adds	r0, #192	@ 0xc0
 8000724:	f7ff fe8c 	bl	8000440 <BLE_command>
 8000728:	b920      	cbnz	r0, 8000734 <ble_init+0x128>
	   stackInitCompleteFlag|=0x20;
 800072a:	4a8f      	ldr	r2, [pc, #572]	@ (8000968 <ble_init+0x35c>)
 800072c:	8813      	ldrh	r3, [r2, #0]
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000734:	4b8c      	ldr	r3, [pc, #560]	@ (8000968 <ble_init+0x35c>)
 8000736:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
 800073a:	f004 f9eb 	bl	8004b14 <free>
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 800073e:	488d      	ldr	r0, [pc, #564]	@ (8000974 <ble_init+0x368>)
 8000740:	2300      	movs	r3, #0
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2307      	movs	r3, #7
 8000746:	f100 02c8 	add.w	r2, r0, #200	@ 0xc8
 800074a:	2124      	movs	r1, #36	@ 0x24
 800074c:	30d0      	adds	r0, #208	@ 0xd0
 800074e:	f7ff fe77 	bl	8000440 <BLE_command>
 8000752:	b920      	cbnz	r0, 800075e <ble_init+0x152>
	   stackInitCompleteFlag|=0x40;
 8000754:	4a84      	ldr	r2, [pc, #528]	@ (8000968 <ble_init+0x35c>)
 8000756:	8813      	ldrh	r3, [r2, #0]
 8000758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075c:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 800075e:	4d82      	ldr	r5, [pc, #520]	@ (8000968 <ble_init+0x35c>)
 8000760:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
 8000764:	f004 f9d6 	bl	8004b14 <free>
	setConnectable();
 8000768:	f7ff fdfc 	bl	8000364 <setConnectable>
	addService(UUID_SERVICE_1,CUSTOM_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 800076c:	f505 778a 	add.w	r7, r5, #276	@ 0x114
 8000770:	4c80      	ldr	r4, [pc, #512]	@ (8000974 <ble_init+0x368>)
 8000772:	220f      	movs	r2, #15
 8000774:	4639      	mov	r1, r7
 8000776:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
 800077a:	f7ff fe93 	bl	80004a4 <addService>
	addCharacteristic(UUID_CHAR_1,CUSTOM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(22),READABLE);
 800077e:	f505 768c 	add.w	r6, r5, #280	@ 0x118
 8000782:	f04f 0802 	mov.w	r8, #2
 8000786:	f8cd 8000 	str.w	r8, [sp]
 800078a:	2316      	movs	r3, #22
 800078c:	463a      	mov	r2, r7
 800078e:	4631      	mov	r1, r6
 8000790:	f504 7082 	add.w	r0, r4, #260	@ 0x104
 8000794:	f7ff feba 	bl	800050c <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,CUSTOM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(22),VALUE1);
 8000798:	f504 738a 	add.w	r3, r4, #276	@ 0x114
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2316      	movs	r3, #22
 80007a0:	2200      	movs	r2, #0
 80007a2:	4631      	mov	r1, r6
 80007a4:	4638      	mov	r0, r7
 80007a6:	f7ff feef 	bl	8000588 <updateCharValue>
	addCharacteristic(UUID_CHAR_TEMP,TEMP_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 80007aa:	f505 798e 	add.w	r9, r5, #284	@ 0x11c
 80007ae:	2612      	movs	r6, #18
 80007b0:	9600      	str	r6, [sp, #0]
 80007b2:	2311      	movs	r3, #17
 80007b4:	463a      	mov	r2, r7
 80007b6:	4649      	mov	r1, r9
 80007b8:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 80007bc:	f7ff fea6 	bl	800050c <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),VALUE_TEMP);
 80007c0:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2311      	movs	r3, #17
 80007c8:	2200      	movs	r2, #0
 80007ca:	4649      	mov	r1, r9
 80007cc:	4638      	mov	r0, r7
 80007ce:	f7ff fedb 	bl	8000588 <updateCharValue>
	addCharacteristic(UUID_CHAR_HUM,HUM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(16),READABLE|NOTIFIBLE);
 80007d2:	f505 7990 	add.w	r9, r5, #288	@ 0x120
 80007d6:	9600      	str	r6, [sp, #0]
 80007d8:	2310      	movs	r3, #16
 80007da:	463a      	mov	r2, r7
 80007dc:	4649      	mov	r1, r9
 80007de:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80007e2:	f7ff fe93 	bl	800050c <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(16),VALUE_HUM);
 80007e6:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2310      	movs	r3, #16
 80007ee:	2200      	movs	r2, #0
 80007f0:	4649      	mov	r1, r9
 80007f2:	4638      	mov	r0, r7
 80007f4:	f7ff fec8 	bl	8000588 <updateCharValue>
	addCharacteristic(UUID_CHAR_PRESS,PRESS_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(18),READABLE|NOTIFIBLE);
 80007f8:	f505 7992 	add.w	r9, r5, #292	@ 0x124
 80007fc:	9600      	str	r6, [sp, #0]
 80007fe:	4633      	mov	r3, r6
 8000800:	463a      	mov	r2, r7
 8000802:	4649      	mov	r1, r9
 8000804:	f504 70b8 	add.w	r0, r4, #368	@ 0x170
 8000808:	f7ff fe80 	bl	800050c <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,0,SET_CONTENT_LENGTH(18),VALUE_PRESS);
 800080c:	f504 73c0 	add.w	r3, r4, #384	@ 0x180
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	4633      	mov	r3, r6
 8000814:	2200      	movs	r2, #0
 8000816:	4649      	mov	r1, r9
 8000818:	4638      	mov	r0, r7
 800081a:	f7ff feb5 	bl	8000588 <updateCharValue>
	addCharacteristic(UUID_CHAR_TOF_VALUE,TOF_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),READABLE|NOTIFIBLE);
 800081e:	f505 7994 	add.w	r9, r5, #296	@ 0x128
 8000822:	9600      	str	r6, [sp, #0]
 8000824:	2314      	movs	r3, #20
 8000826:	463a      	mov	r2, r7
 8000828:	4649      	mov	r1, r9
 800082a:	f504 70ca 	add.w	r0, r4, #404	@ 0x194
 800082e:	f7ff fe6d 	bl	800050c <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,0,SET_CONTENT_LENGTH(20),TOF_VALUE);
 8000832:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2314      	movs	r3, #20
 800083a:	2200      	movs	r2, #0
 800083c:	4649      	mov	r1, r9
 800083e:	4638      	mov	r0, r7
 8000840:	f7ff fea2 	bl	8000588 <updateCharValue>
	 addService(UUID_INERTIAL_SERVICE,INERTIAL_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3+3+3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000844:	f505 7796 	add.w	r7, r5, #300	@ 0x12c
 8000848:	220c      	movs	r2, #12
 800084a:	4639      	mov	r1, r7
 800084c:	f504 70dc 	add.w	r0, r4, #440	@ 0x1b8
 8000850:	f7ff fe28 	bl	80004a4 <addService>
	 addCharacteristic(UUID_CHAR_INERTIAL_NAME,NAME_INERTIAL_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(24),READABLE);
 8000854:	f505 7998 	add.w	r9, r5, #304	@ 0x130
 8000858:	f8cd 8000 	str.w	r8, [sp]
 800085c:	2318      	movs	r3, #24
 800085e:	463a      	mov	r2, r7
 8000860:	4649      	mov	r1, r9
 8000862:	f504 70e4 	add.w	r0, r4, #456	@ 0x1c8
 8000866:	f7ff fe51 	bl	800050c <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,NAME_INERTIAL_HANDLE,0,SET_CONTENT_LENGTH(24),NAME_INERTIAL_VALUE);
 800086a:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2318      	movs	r3, #24
 8000872:	2200      	movs	r2, #0
 8000874:	4649      	mov	r1, r9
 8000876:	4638      	mov	r0, r7
 8000878:	f7ff fe86 	bl	8000588 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCX,ACCX_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 800087c:	f505 799a 	add.w	r9, r5, #308	@ 0x134
 8000880:	9600      	str	r6, [sp, #0]
 8000882:	2311      	movs	r3, #17
 8000884:	463a      	mov	r2, r7
 8000886:	4649      	mov	r1, r9
 8000888:	f504 70f8 	add.w	r0, r4, #496	@ 0x1f0
 800088c:	f7ff fe3e 	bl	800050c <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCX_INERTIAL_VALUE);
 8000890:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2311      	movs	r3, #17
 8000898:	2200      	movs	r2, #0
 800089a:	4649      	mov	r1, r9
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fe73 	bl	8000588 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCY,ACCY_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 80008a2:	f505 799c 	add.w	r9, r5, #312	@ 0x138
 80008a6:	9600      	str	r6, [sp, #0]
 80008a8:	2311      	movs	r3, #17
 80008aa:	463a      	mov	r2, r7
 80008ac:	4649      	mov	r1, r9
 80008ae:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 80008b2:	f7ff fe2b 	bl	800050c <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCY_INERTIAL_VALUE);
 80008b6:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2311      	movs	r3, #17
 80008be:	2200      	movs	r2, #0
 80008c0:	4649      	mov	r1, r9
 80008c2:	4638      	mov	r0, r7
 80008c4:	f7ff fe60 	bl	8000588 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCZ,ACCZ_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 80008c8:	f505 799e 	add.w	r9, r5, #316	@ 0x13c
 80008cc:	9600      	str	r6, [sp, #0]
 80008ce:	2311      	movs	r3, #17
 80008d0:	463a      	mov	r2, r7
 80008d2:	4649      	mov	r1, r9
 80008d4:	f504 700e 	add.w	r0, r4, #568	@ 0x238
 80008d8:	f7ff fe18 	bl	800050c <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCZ_INERTIAL_VALUE);
 80008dc:	f504 7312 	add.w	r3, r4, #584	@ 0x248
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2311      	movs	r3, #17
 80008e4:	2200      	movs	r2, #0
 80008e6:	4649      	mov	r1, r9
 80008e8:	4638      	mov	r0, r7
 80008ea:	f7ff fe4d 	bl	8000588 <updateCharValue>
	 addService(UUID_MAGNETIC_SERVICE,MAGNETIC_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 80008ee:	f505 77a0 	add.w	r7, r5, #320	@ 0x140
 80008f2:	220c      	movs	r2, #12
 80008f4:	4639      	mov	r1, r7
 80008f6:	f504 7017 	add.w	r0, r4, #604	@ 0x25c
 80008fa:	f7ff fdd3 	bl	80004a4 <addService>
	 addCharacteristic(UUID_CHAR_MAGNETIC_NAME,NAME_MAGNETIC_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(23),READABLE);
 80008fe:	f505 79a2 	add.w	r9, r5, #324	@ 0x144
 8000902:	f8cd 8000 	str.w	r8, [sp]
 8000906:	2317      	movs	r3, #23
 8000908:	463a      	mov	r2, r7
 800090a:	4649      	mov	r1, r9
 800090c:	f504 701b 	add.w	r0, r4, #620	@ 0x26c
 8000910:	f7ff fdfc 	bl	800050c <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,NAME_MAGNETIC_HANDLE,0,SET_CONTENT_LENGTH(23),NAME_MAGNETIC_VALUE);
 8000914:	f504 731f 	add.w	r3, r4, #636	@ 0x27c
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2317      	movs	r3, #23
 800091c:	2200      	movs	r2, #0
 800091e:	4649      	mov	r1, r9
 8000920:	4638      	mov	r0, r7
 8000922:	f7ff fe31 	bl	8000588 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGX,MAGX_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000926:	f505 78a4 	add.w	r8, r5, #328	@ 0x148
 800092a:	9600      	str	r6, [sp, #0]
 800092c:	2311      	movs	r3, #17
 800092e:	463a      	mov	r2, r7
 8000930:	4641      	mov	r1, r8
 8000932:	f504 7025 	add.w	r0, r4, #660	@ 0x294
 8000936:	f7ff fde9 	bl	800050c <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),X_VALUE);
 800093a:	f504 7329 	add.w	r3, r4, #676	@ 0x2a4
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2311      	movs	r3, #17
 8000942:	2200      	movs	r2, #0
 8000944:	4641      	mov	r1, r8
 8000946:	4638      	mov	r0, r7
 8000948:	f7ff fe1e 	bl	8000588 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGY,MAGY_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 800094c:	f505 78a6 	add.w	r8, r5, #332	@ 0x14c
 8000950:	9600      	str	r6, [sp, #0]
 8000952:	2311      	movs	r3, #17
 8000954:	463a      	mov	r2, r7
 8000956:	4641      	mov	r1, r8
 8000958:	f504 702e 	add.w	r0, r4, #696	@ 0x2b8
 800095c:	f7ff fdd6 	bl	800050c <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Y_VALUE);
 8000960:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
 8000964:	e008      	b.n	8000978 <ble_init+0x36c>
 8000966:	bf00      	nop
 8000968:	2000046c 	.word	0x2000046c
 800096c:	2000072c 	.word	0x2000072c
 8000970:	2000007c 	.word	0x2000007c
 8000974:	20000000 	.word	0x20000000
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2311      	movs	r3, #17
 800097c:	2200      	movs	r2, #0
 800097e:	4641      	mov	r1, r8
 8000980:	4638      	mov	r0, r7
 8000982:	f7ff fe01 	bl	8000588 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGZ,MAGZ_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000986:	f505 75a8 	add.w	r5, r5, #336	@ 0x150
 800098a:	9600      	str	r6, [sp, #0]
 800098c:	2311      	movs	r3, #17
 800098e:	463a      	mov	r2, r7
 8000990:	4629      	mov	r1, r5
 8000992:	f504 7037 	add.w	r0, r4, #732	@ 0x2dc
 8000996:	f7ff fdb9 	bl	800050c <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Z_VALUE);
 800099a:	f504 743b 	add.w	r4, r4, #748	@ 0x2ec
 800099e:	9400      	str	r4, [sp, #0]
 80009a0:	2311      	movs	r3, #17
 80009a2:	2200      	movs	r2, #0
 80009a4:	4629      	mov	r1, r5
 80009a6:	4638      	mov	r0, r7
 80009a8:	f7ff fdee 	bl	8000588 <updateCharValue>
}
 80009ac:	b003      	add	sp, #12
 80009ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009b2:	bf00      	nop

080009b4 <updateSignedMillesimal>:
void updateSignedMillesimal(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, int16_t data){
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	4607      	mov	r7, r0
 80009bc:	4688      	mov	r8, r1
 80009be:	4614      	mov	r4, r2
 80009c0:	461e      	mov	r6, r3
 80009c2:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
    newstring=(uint8_t*)malloc(offset+7);
 80009c6:	f103 0907 	add.w	r9, r3, #7
 80009ca:	4648      	mov	r0, r9
 80009cc:	f004 f89a 	bl	8004b04 <malloc>
 80009d0:	4605      	mov	r5, r0
    memcpy(newstring,defaultValue,offset);
 80009d2:	4632      	mov	r2, r6
 80009d4:	4621      	mov	r1, r4
 80009d6:	f004 f997 	bl	8004d08 <memcpy>
	if(data<0){
 80009da:	f1ba 0f00 	cmp.w	sl, #0
 80009de:	db67      	blt.n	8000ab0 <updateSignedMillesimal+0xfc>
	numberInChar[0]=43;
 80009e0:	232b      	movs	r3, #43	@ 0x2b
 80009e2:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=data/1000;
 80009e6:	4b55      	ldr	r3, [pc, #340]	@ (8000b3c <updateSignedMillesimal+0x188>)
 80009e8:	fb83 230a 	smull	r2, r3, r3, sl
 80009ec:	ea4f 72ea 	mov.w	r2, sl, asr #31
 80009f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(data-numberInChar[1]*1000)/100;
 80009fa:	4c51      	ldr	r4, [pc, #324]	@ (8000b40 <updateSignedMillesimal+0x18c>)
 80009fc:	fb02 f404 	mul.w	r4, r2, r4
 8000a00:	eb0a 0304 	add.w	r3, sl, r4
 8000a04:	494f      	ldr	r1, [pc, #316]	@ (8000b44 <updateSignedMillesimal+0x190>)
 8000a06:	fb81 0103 	smull	r0, r1, r1, r3
 8000a0a:	17db      	asrs	r3, r3, #31
 8000a0c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(data-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8000a16:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8000a1a:	fb01 a103 	mla	r1, r1, r3, sl
 8000a1e:	440c      	add	r4, r1
 8000a20:	4949      	ldr	r1, [pc, #292]	@ (8000b48 <updateSignedMillesimal+0x194>)
 8000a22:	fb81 0104 	smull	r0, r1, r1, r4
 8000a26:	17e4      	asrs	r4, r4, #31
 8000a28:	ebc4 04a1 	rsb	r4, r4, r1, asr #2
 8000a2c:	b2e4      	uxtb	r4, r4
 8000a2e:	f88d 400b 	strb.w	r4, [sp, #11]
    numberInChar[4]=(data-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 8000a32:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
 8000a36:	ebc4 0181 	rsb	r1, r4, r1, lsl #2
 8000a3a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8000a3e:	ebc3 0ccc 	rsb	ip, r3, ip, lsl #3
 8000a42:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a46:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
 8000a4a:	44d4      	add	ip, sl
 8000a4c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8000a50:	00c9      	lsls	r1, r1, #3
 8000a52:	fa51 fc8c 	uxtab	ip, r1, ip
 8000a56:	fa5f fc8c 	uxtb.w	ip, ip
 8000a5a:	f88d c00c 	strb.w	ip, [sp, #12]
    if(numberInChar[1]==0){
 8000a5e:	b37a      	cbz	r2, 8000ac0 <updateSignedMillesimal+0x10c>
        numberInChar[1]+='0';
 8000a60:	3230      	adds	r2, #48	@ 0x30
 8000a62:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 8000a66:	3330      	adds	r3, #48	@ 0x30
 8000a68:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 8000a6c:	3430      	adds	r4, #48	@ 0x30
 8000a6e:	f88d 400b 	strb.w	r4, [sp, #11]
    	numberInChar[4]+='0';
 8000a72:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000a76:	f88d c00c 	strb.w	ip, [sp, #12]
    	numberInChar[5]='\"';
 8000a7a:	2322      	movs	r3, #34	@ 0x22
 8000a7c:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 8000a80:	237d      	movs	r3, #125	@ 0x7d
 8000a82:	f88d 300e 	strb.w	r3, [sp, #14]
	int flagEmpty=0;
 8000a86:	2400      	movs	r4, #0
    memcpy(newstring+offset,numberInChar,7-flagEmpty);
 8000a88:	f1c4 0207 	rsb	r2, r4, #7
 8000a8c:	a902      	add	r1, sp, #8
 8000a8e:	19a8      	adds	r0, r5, r6
 8000a90:	f004 f93a 	bl	8004d08 <memcpy>
	updateCharValue(service, characteristic, 0,offset+7-flagEmpty, newstring);
 8000a94:	9500      	str	r5, [sp, #0]
 8000a96:	eba9 0304 	sub.w	r3, r9, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4641      	mov	r1, r8
 8000a9e:	4638      	mov	r0, r7
 8000aa0:	f7ff fd72 	bl	8000588 <updateCharValue>
	free(newstring);
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f004 f835 	bl	8004b14 <free>
}
 8000aaa:	b004      	add	sp, #16
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numberInChar[0]=45;
 8000ab0:	232d      	movs	r3, #45	@ 0x2d
 8000ab2:	f88d 3008 	strb.w	r3, [sp, #8]
    data=-data;
 8000ab6:	f1ca 0a00 	rsb	sl, sl, #0
 8000aba:	fa0f fa8a 	sxth.w	sl, sl
 8000abe:	e792      	b.n	80009e6 <updateSignedMillesimal+0x32>
    	if(numberInChar[2]==0){
 8000ac0:	bb3b      	cbnz	r3, 8000b12 <updateSignedMillesimal+0x15e>
        	if(numberInChar[3]==0){
 8000ac2:	b994      	cbnz	r4, 8000aea <updateSignedMillesimal+0x136>
        numberInChar[1]='0'+numberInChar[4];
 8000ac4:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000ac8:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='\"';
 8000acc:	2322      	movs	r3, #34	@ 0x22
 8000ace:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='}';
 8000ad2:	237d      	movs	r3, #125	@ 0x7d
 8000ad4:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]=' ';
 8000ad8:	2320      	movs	r3, #32
 8000ada:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 8000ade:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000ae2:	f88d 300e 	strb.w	r3, [sp, #14]
        		flagEmpty++;
 8000ae6:	2403      	movs	r4, #3
    }break;
 8000ae8:	e7ce      	b.n	8000a88 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[3];
 8000aea:	3430      	adds	r4, #48	@ 0x30
 8000aec:	f88d 4009 	strb.w	r4, [sp, #9]
    	numberInChar[2]='0'+numberInChar[4];
 8000af0:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000af4:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='\"';
 8000af8:	2322      	movs	r3, #34	@ 0x22
 8000afa:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='}';
 8000afe:	237d      	movs	r3, #125	@ 0x7d
 8000b00:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 8000b04:	2320      	movs	r3, #32
 8000b06:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000b0a:	f88d 300e 	strb.w	r3, [sp, #14]
    		flagEmpty++;
 8000b0e:	2402      	movs	r4, #2
    }break;
 8000b10:	e7ba      	b.n	8000a88 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[2];
 8000b12:	3330      	adds	r3, #48	@ 0x30
 8000b14:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 8000b18:	3430      	adds	r4, #48	@ 0x30
 8000b1a:	f88d 400a 	strb.w	r4, [sp, #10]
    	numberInChar[3]='0'+numberInChar[4];
 8000b1e:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000b22:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='\"';
 8000b26:	2322      	movs	r3, #34	@ 0x22
 8000b28:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 8000b2c:	237d      	movs	r3, #125	@ 0x7d
 8000b2e:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000b32:	2320      	movs	r3, #32
 8000b34:	f88d 300e 	strb.w	r3, [sp, #14]
    	flagEmpty++;
 8000b38:	2401      	movs	r4, #1
    }break;
 8000b3a:	e7a5      	b.n	8000a88 <updateSignedMillesimal+0xd4>
 8000b3c:	10624dd3 	.word	0x10624dd3
 8000b40:	fffffc18 	.word	0xfffffc18
 8000b44:	51eb851f 	.word	0x51eb851f
 8000b48:	66666667 	.word	0x66666667

08000b4c <updateSignedFloat>:
void updateSignedFloat(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, float data){
 8000b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b50:	ed2d 8b02 	vpush	{d8}
 8000b54:	b085      	sub	sp, #20
 8000b56:	4606      	mov	r6, r0
 8000b58:	460f      	mov	r7, r1
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	eeb0 8a40 	vmov.f32	s16, s0
	 newstring=(uint8_t*)malloc(offset+8);
 8000b62:	f103 0808 	add.w	r8, r3, #8
 8000b66:	4640      	mov	r0, r8
 8000b68:	f003 ffcc 	bl	8004b04 <malloc>
 8000b6c:	4604      	mov	r4, r0
	 memcpy(newstring,defaultValue,offset);
 8000b6e:	462a      	mov	r2, r5
 8000b70:	4649      	mov	r1, r9
 8000b72:	f004 f8c9 	bl	8004d08 <memcpy>
    int16_t newdata=(int16_t)(data*10);
 8000b76:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8000b7a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000b7e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8000b82:	ee18 3a10 	vmov	r3, s16
 8000b86:	b219      	sxth	r1, r3
	if(newdata<0){
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	db6f      	blt.n	8000c6c <updateSignedFloat+0x120>
	numberInChar[0]=43;
 8000b8c:	232b      	movs	r3, #43	@ 0x2b
 8000b8e:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=newdata/1000;
 8000b92:	4b53      	ldr	r3, [pc, #332]	@ (8000ce0 <updateSignedFloat+0x194>)
 8000b94:	fb83 2301 	smull	r2, r3, r3, r1
 8000b98:	17ca      	asrs	r2, r1, #31
 8000b9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(newdata-numberInChar[1]*1000)/100;
 8000ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce4 <updateSignedFloat+0x198>)
 8000ba6:	fb03 fc02 	mul.w	ip, r3, r2
 8000baa:	eb01 030c 	add.w	r3, r1, ip
 8000bae:	484e      	ldr	r0, [pc, #312]	@ (8000ce8 <updateSignedFloat+0x19c>)
 8000bb0:	fb80 e003 	smull	lr, r0, r0, r3
 8000bb4:	17db      	asrs	r3, r3, #31
 8000bb6:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(newdata-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8000bc0:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8000bc4:	fb00 1003 	mla	r0, r0, r3, r1
 8000bc8:	4484      	add	ip, r0
 8000bca:	4848      	ldr	r0, [pc, #288]	@ (8000cec <updateSignedFloat+0x1a0>)
 8000bcc:	fb80 e00c 	smull	lr, r0, r0, ip
 8000bd0:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8000bd4:	ebcc 0ca0 	rsb	ip, ip, r0, asr #2
 8000bd8:	fa5f fc8c 	uxtb.w	ip, ip
 8000bdc:	f88d c00b 	strb.w	ip, [sp, #11]
    numberInChar[5]=(newdata-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 8000be0:	ebcc 104c 	rsb	r0, ip, ip, lsl #5
 8000be4:	ebcc 0080 	rsb	r0, ip, r0, lsl #2
 8000be8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8000bec:	ebc3 0ece 	rsb	lr, r3, lr, lsl #3
 8000bf0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000bf4:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
 8000bf8:	448e      	add	lr, r1
 8000bfa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8000bfe:	00c9      	lsls	r1, r1, #3
 8000c00:	fa51 fe8e 	uxtab	lr, r1, lr
 8000c04:	fa5f fe8e 	uxtb.w	lr, lr
 8000c08:	f88d e00d 	strb.w	lr, [sp, #13]
    if(numberInChar[1]==0){
 8000c0c:	b3a2      	cbz	r2, 8000c78 <updateSignedFloat+0x12c>
        numberInChar[1]+='0';
 8000c0e:	3230      	adds	r2, #48	@ 0x30
 8000c10:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 8000c14:	3330      	adds	r3, #48	@ 0x30
 8000c16:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 8000c1a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000c1e:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='.';
 8000c22:	232e      	movs	r3, #46	@ 0x2e
 8000c24:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]+='0';
 8000c28:	f10e 0e30 	add.w	lr, lr, #48	@ 0x30
 8000c2c:	f88d e00d 	strb.w	lr, [sp, #13]
    	numberInChar[6]='\"';
 8000c30:	2322      	movs	r3, #34	@ 0x22
 8000c32:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]='}';
 8000c36:	237d      	movs	r3, #125	@ 0x7d
 8000c38:	f88d 300f 	strb.w	r3, [sp, #15]
	int flagEmpty=0;
 8000c3c:	f04f 0900 	mov.w	r9, #0
    memcpy(newstring+offset,numberInChar,8-flagEmpty);
 8000c40:	f1c9 0208 	rsb	r2, r9, #8
 8000c44:	a902      	add	r1, sp, #8
 8000c46:	1960      	adds	r0, r4, r5
 8000c48:	f004 f85e 	bl	8004d08 <memcpy>
	updateCharValue(service, characteristic, 0, offset+8-flagEmpty, newstring);
 8000c4c:	9400      	str	r4, [sp, #0]
 8000c4e:	eba8 0309 	sub.w	r3, r8, r9
 8000c52:	2200      	movs	r2, #0
 8000c54:	4639      	mov	r1, r7
 8000c56:	4630      	mov	r0, r6
 8000c58:	f7ff fc96 	bl	8000588 <updateCharValue>
	free(newstring);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f003 ff59 	bl	8004b14 <free>
}
 8000c62:	b005      	add	sp, #20
 8000c64:	ecbd 8b02 	vpop	{d8}
 8000c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    numberInChar[0]=45;
 8000c6c:	232d      	movs	r3, #45	@ 0x2d
 8000c6e:	f88d 3008 	strb.w	r3, [sp, #8]
    newdata=-newdata;
 8000c72:	4249      	negs	r1, r1
 8000c74:	b209      	sxth	r1, r1
 8000c76:	e78c      	b.n	8000b92 <updateSignedFloat+0x46>
    	if(numberInChar[2]==0){
 8000c78:	b9c3      	cbnz	r3, 8000cac <updateSignedFloat+0x160>
        numberInChar[1]='0'+numberInChar[3];
 8000c7a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000c7e:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='.';
 8000c82:	232e      	movs	r3, #46	@ 0x2e
 8000c84:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='0'+numberInChar[5];
 8000c88:	f10e 0e30 	add.w	lr, lr, #48	@ 0x30
 8000c8c:	f88d e00b 	strb.w	lr, [sp, #11]
    	numberInChar[4]='\"';
 8000c90:	2322      	movs	r3, #34	@ 0x22
 8000c92:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 8000c96:	237d      	movs	r3, #125	@ 0x7d
 8000c98:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000c9c:	2320      	movs	r3, #32
 8000c9e:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 8000ca2:	f88d 300f 	strb.w	r3, [sp, #15]
    		flagEmpty++;
 8000ca6:	f04f 0902 	mov.w	r9, #2
    }break;
 8000caa:	e7c9      	b.n	8000c40 <updateSignedFloat+0xf4>
        numberInChar[1]='0'+numberInChar[2];
 8000cac:	3330      	adds	r3, #48	@ 0x30
 8000cae:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 8000cb2:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000cb6:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='.';
 8000cba:	232e      	movs	r3, #46	@ 0x2e
 8000cbc:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='0'+numberInChar[5];
 8000cc0:	f10e 0e30 	add.w	lr, lr, #48	@ 0x30
 8000cc4:	f88d e00c 	strb.w	lr, [sp, #12]
    	numberInChar[5]='\"';
 8000cc8:	2322      	movs	r3, #34	@ 0x22
 8000cca:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 8000cce:	237d      	movs	r3, #125	@ 0x7d
 8000cd0:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	f88d 300f 	strb.w	r3, [sp, #15]
    	flagEmpty++;
 8000cda:	f04f 0901 	mov.w	r9, #1
    }break;
 8000cde:	e7af      	b.n	8000c40 <updateSignedFloat+0xf4>
 8000ce0:	10624dd3 	.word	0x10624dd3
 8000ce4:	fffffc18 	.word	0xfffffc18
 8000ce8:	51eb851f 	.word	0x51eb851f
 8000cec:	66666667 	.word	0x66666667

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	9405      	str	r4, [sp, #20]
 8000cfa:	9406      	str	r4, [sp, #24]
 8000cfc:	9407      	str	r4, [sp, #28]
 8000cfe:	9408      	str	r4, [sp, #32]
 8000d00:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b3b      	ldr	r3, [pc, #236]	@ (8000df0 <MX_GPIO_Init+0x100>)
 8000d04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d06:	f042 0210 	orr.w	r2, r2, #16
 8000d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d0e:	f002 0210 	and.w	r2, r2, #16
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d18:	f042 0202 	orr.w	r2, r2, #2
 8000d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d20:	f002 0202 	and.w	r2, r2, #2
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d2a:	f042 0208 	orr.w	r2, r2, #8
 8000d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d32:	f002 0208 	and.w	r2, r2, #8
 8000d36:	9202      	str	r2, [sp, #8]
 8000d38:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d3c:	f042 0204 	orr.w	r2, r2, #4
 8000d40:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d44:	f002 0204 	and.w	r2, r2, #4
 8000d48:	9203      	str	r2, [sp, #12]
 8000d4a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	9304      	str	r3, [sp, #16]
 8000d5c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8000d5e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8000e00 <MX_GPIO_Init+0x110>
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d68:	4640      	mov	r0, r8
 8000d6a:	f001 f9b4 	bl	80020d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port, TOF_RESET_Pin, GPIO_PIN_RESET);
 8000d6e:	4e21      	ldr	r6, [pc, #132]	@ (8000df4 <MX_GPIO_Init+0x104>)
 8000d70:	4622      	mov	r2, r4
 8000d72:	2140      	movs	r1, #64	@ 0x40
 8000d74:	4630      	mov	r0, r6
 8000d76:	f001 f9ae 	bl	80020d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d84:	f001 f9a7 	bl	80020d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000d88:	2740      	movs	r7, #64	@ 0x40
 8000d8a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_GPIO_Init+0x108>)
 8000d8e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000d92:	a905      	add	r1, sp, #20
 8000d94:	4819      	ldr	r0, [pc, #100]	@ (8000dfc <MX_GPIO_Init+0x10c>)
 8000d96:	f001 f8ab 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2501      	movs	r5, #1
 8000da2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8000daa:	a905      	add	r1, sp, #20
 8000dac:	4640      	mov	r0, r8
 8000dae:	f001 f89f 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_RESET_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin;
 8000db2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TOF_RESET_GPIO_Port, &GPIO_InitStruct);
 8000dba:	a905      	add	r1, sp, #20
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	f001 f897 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RESET_Pin */
  GPIO_InitStruct.Pin = BLE_RESET_Pin;
 8000dc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BLE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000dce:	a905      	add	r1, sp, #20
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f001 f88c 	bl	8001ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dd8:	4622      	mov	r2, r4
 8000dda:	4621      	mov	r1, r4
 8000ddc:	2017      	movs	r0, #23
 8000dde:	f001 f85f 	bl	8001ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000de2:	2017      	movs	r0, #23
 8000de4:	f001 f86c 	bl	8001ec0 <HAL_NVIC_EnableIRQ>

}
 8000de8:	b00a      	add	sp, #40	@ 0x28
 8000dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000800 	.word	0x48000800
 8000df8:	10110000 	.word	0x10110000
 8000dfc:	48001000 	.word	0x48001000
 8000e00:	48000c00 	.word	0x48000c00

08000e04 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <Error_Handler+0x2>

08000e08 <MX_SPI3_Init>:
{
 8000e08:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000e0a:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <MX_SPI3_Init+0x40>)
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_SPI3_Init+0x44>)
 8000e0e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e10:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000e14:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	2300      	movs	r3, #0
 8000e18:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e1a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e1e:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e20:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e22:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e28:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2a:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2c:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e30:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e32:	2207      	movs	r2, #7
 8000e34:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e36:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e3c:	f002 fe13 	bl	8003a66 <HAL_SPI_Init>
 8000e40:	b900      	cbnz	r0, 8000e44 <MX_SPI3_Init+0x3c>
}
 8000e42:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e44:	f7ff ffde 	bl	8000e04 <Error_Handler>
 8000e48:	200005e0 	.word	0x200005e0
 8000e4c:	40003c00 	.word	0x40003c00

08000e50 <MX_I2C2_Init>:
{
 8000e50:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8000e52:	4812      	ldr	r0, [pc, #72]	@ (8000e9c <MX_I2C2_Init+0x4c>)
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_I2C2_Init+0x50>)
 8000e56:	6643      	str	r3, [r0, #100]	@ 0x64
  hi2c2.Init.Timing = 0x2000090E;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_I2C2_Init+0x54>)
 8000e5a:	6683      	str	r3, [r0, #104]	@ 0x68
  hi2c2.Init.OwnAddress1 = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	66c3      	str	r3, [r0, #108]	@ 0x6c
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e60:	2201      	movs	r2, #1
 8000e62:	6702      	str	r2, [r0, #112]	@ 0x70
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	6743      	str	r3, [r0, #116]	@ 0x74
  hi2c2.Init.OwnAddress2 = 0;
 8000e66:	6783      	str	r3, [r0, #120]	@ 0x78
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e72:	3064      	adds	r0, #100	@ 0x64
 8000e74:	f001 fa83 	bl	800237e <HAL_I2C_Init>
 8000e78:	b950      	cbnz	r0, 8000e90 <MX_I2C2_Init+0x40>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	480a      	ldr	r0, [pc, #40]	@ (8000ea8 <MX_I2C2_Init+0x58>)
 8000e7e:	f001 fc59 	bl	8002734 <HAL_I2CEx_ConfigAnalogFilter>
 8000e82:	b938      	cbnz	r0, 8000e94 <MX_I2C2_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <MX_I2C2_Init+0x58>)
 8000e88:	f001 fc82 	bl	8002790 <HAL_I2CEx_ConfigDigitalFilter>
 8000e8c:	b920      	cbnz	r0, 8000e98 <MX_I2C2_Init+0x48>
}
 8000e8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e90:	f7ff ffb8 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8000e94:	f7ff ffb6 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8000e98:	f7ff ffb4 	bl	8000e04 <Error_Handler>
 8000e9c:	200005e0 	.word	0x200005e0
 8000ea0:	40005800 	.word	0x40005800
 8000ea4:	2000090e 	.word	0x2000090e
 8000ea8:	20000644 	.word	0x20000644

08000eac <MX_TIM6_Init>:
{
 8000eac:	b500      	push	{lr}
 8000eae:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8000eb8:	4811      	ldr	r0, [pc, #68]	@ (8000f00 <MX_TIM6_Init+0x54>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <MX_TIM6_Init+0x58>)
 8000ebc:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
  htim6.Init.Prescaler = 3999;
 8000ec0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000ec4:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
  htim6.Init.Period = 1000;
 8000ecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ed0:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ed8:	30b0      	adds	r0, #176	@ 0xb0
 8000eda:	f003 fb53 	bl	8004584 <HAL_TIM_Base_Init>
 8000ede:	b950      	cbnz	r0, 8000ef6 <MX_TIM6_Init+0x4a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ee6:	a901      	add	r1, sp, #4
 8000ee8:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <MX_TIM6_Init+0x5c>)
 8000eea:	f003 fd49 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	b920      	cbnz	r0, 8000efa <MX_TIM6_Init+0x4e>
}
 8000ef0:	b005      	add	sp, #20
 8000ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ef6:	f7ff ff85 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8000efa:	f7ff ff83 	bl	8000e04 <Error_Handler>
 8000efe:	bf00      	nop
 8000f00:	200005e0 	.word	0x200005e0
 8000f04:	40001000 	.word	0x40001000
 8000f08:	20000690 	.word	0x20000690

08000f0c <MX_TIM15_Init>:
{
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	b096      	sub	sp, #88	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	2400      	movs	r4, #0
 8000f12:	9413      	str	r4, [sp, #76]	@ 0x4c
 8000f14:	9414      	str	r4, [sp, #80]	@ 0x50
 8000f16:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	940c      	str	r4, [sp, #48]	@ 0x30
 8000f1a:	940d      	str	r4, [sp, #52]	@ 0x34
 8000f1c:	940e      	str	r4, [sp, #56]	@ 0x38
 8000f1e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8000f20:	9410      	str	r4, [sp, #64]	@ 0x40
 8000f22:	9411      	str	r4, [sp, #68]	@ 0x44
 8000f24:	9412      	str	r4, [sp, #72]	@ 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f26:	222c      	movs	r2, #44	@ 0x2c
 8000f28:	4621      	mov	r1, r4
 8000f2a:	a801      	add	r0, sp, #4
 8000f2c:	f003 fea8 	bl	8004c80 <memset>
  htim15.Instance = TIM15;
 8000f30:	4824      	ldr	r0, [pc, #144]	@ (8000fc4 <MX_TIM15_Init+0xb8>)
 8000f32:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <MX_TIM15_Init+0xbc>)
 8000f34:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
  htim15.Init.Prescaler = 100;
 8000f38:	2364      	movs	r3, #100	@ 0x64
 8000f3a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
  htim15.Init.Period = 500;
 8000f42:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f46:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4a:	f8c0 410c 	str.w	r4, [r0, #268]	@ 0x10c
  htim15.Init.RepetitionCounter = 0;
 8000f4e:	f8c0 4110 	str.w	r4, [r0, #272]	@ 0x110
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	f8c0 4114 	str.w	r4, [r0, #276]	@ 0x114
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f56:	30fc      	adds	r0, #252	@ 0xfc
 8000f58:	f003 fb44 	bl	80045e4 <HAL_TIM_PWM_Init>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d129      	bne.n	8000fb4 <MX_TIM15_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	9313      	str	r3, [sp, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f66:	a913      	add	r1, sp, #76	@ 0x4c
 8000f68:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <MX_TIM15_Init+0xc0>)
 8000f6a:	f003 fd09 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	bb18      	cbnz	r0, 8000fb8 <MX_TIM15_Init+0xac>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f70:	2360      	movs	r3, #96	@ 0x60
 8000f72:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f74:	2200      	movs	r2, #0
 8000f76:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f78:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f7a:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7c:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7e:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f80:	9212      	str	r2, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f82:	a90c      	add	r1, sp, #48	@ 0x30
 8000f84:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <MX_TIM15_Init+0xc0>)
 8000f86:	f003 fba3 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 8000f8a:	b9b8      	cbnz	r0, 8000fbc <MX_TIM15_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f90:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f92:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f94:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f96:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f9c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f9e:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa0:	a901      	add	r1, sp, #4
 8000fa2:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <MX_TIM15_Init+0xc0>)
 8000fa4:	f003 fd38 	bl	8004a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa8:	b950      	cbnz	r0, 8000fc0 <MX_TIM15_Init+0xb4>
  HAL_TIM_MspPostInit(&htim15);
 8000faa:	4808      	ldr	r0, [pc, #32]	@ (8000fcc <MX_TIM15_Init+0xc0>)
 8000fac:	f000 fe3a 	bl	8001c24 <HAL_TIM_MspPostInit>
}
 8000fb0:	b016      	add	sp, #88	@ 0x58
 8000fb2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000fb4:	f7ff ff26 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8000fb8:	f7ff ff24 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8000fbc:	f7ff ff22 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8000fc0:	f7ff ff20 	bl	8000e04 <Error_Handler>
 8000fc4:	200005e0 	.word	0x200005e0
 8000fc8:	40014000 	.word	0x40014000
 8000fcc:	200006dc 	.word	0x200006dc

08000fd0 <SystemClock_Config>:
{
 8000fd0:	b500      	push	{lr}
 8000fd2:	b0b9      	sub	sp, #228	@ 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd4:	2244      	movs	r2, #68	@ 0x44
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	a827      	add	r0, sp, #156	@ 0x9c
 8000fda:	f003 fe51 	bl	8004c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fde:	2100      	movs	r1, #0
 8000fe0:	9122      	str	r1, [sp, #136]	@ 0x88
 8000fe2:	9123      	str	r1, [sp, #140]	@ 0x8c
 8000fe4:	9124      	str	r1, [sp, #144]	@ 0x90
 8000fe6:	9125      	str	r1, [sp, #148]	@ 0x94
 8000fe8:	9126      	str	r1, [sp, #152]	@ 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fea:	2288      	movs	r2, #136	@ 0x88
 8000fec:	4668      	mov	r0, sp
 8000fee:	f003 fe47 	bl	8004c80 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	9327      	str	r3, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	932d      	str	r3, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000ffa:	2370      	movs	r3, #112	@ 0x70
 8000ffc:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	a827      	add	r0, sp, #156	@ 0x9c
 8001000:	f001 fce4 	bl	80029cc <HAL_RCC_OscConfig>
 8001004:	b9d0      	cbnz	r0, 800103c <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	9322      	str	r3, [sp, #136]	@ 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800100a:	2100      	movs	r1, #0
 800100c:	9123      	str	r1, [sp, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	9124      	str	r1, [sp, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001010:	9125      	str	r1, [sp, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	9126      	str	r1, [sp, #152]	@ 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001014:	a822      	add	r0, sp, #136	@ 0x88
 8001016:	f001 ffef 	bl	8002ff8 <HAL_RCC_ClockConfig>
 800101a:	b988      	cbnz	r0, 8001040 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001020:	2300      	movs	r3, #0
 8001022:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	4668      	mov	r0, sp
 8001026:	f002 f9f3 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	b958      	cbnz	r0, 8001044 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800102c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001030:	f001 fbe2 	bl	80027f8 <HAL_PWREx_ControlVoltageScaling>
 8001034:	b940      	cbnz	r0, 8001048 <SystemClock_Config+0x78>
}
 8001036:	b039      	add	sp, #228	@ 0xe4
 8001038:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800103c:	f7ff fee2 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8001040:	f7ff fee0 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8001044:	f7ff fede 	bl	8000e04 <Error_Handler>
    Error_Handler();
 8001048:	f7ff fedc 	bl	8000e04 <Error_Handler>

0800104c <main>:
{
 800104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001050:	b08a      	sub	sp, #40	@ 0x28
  HAL_Init();
 8001052:	f000 fe9b 	bl	8001d8c <HAL_Init>
  SystemClock_Config();
 8001056:	f7ff ffbb 	bl	8000fd0 <SystemClock_Config>
  MX_GPIO_Init();
 800105a:	f7ff fe49 	bl	8000cf0 <MX_GPIO_Init>
  MX_SPI3_Init();
 800105e:	f7ff fed3 	bl	8000e08 <MX_SPI3_Init>
  MX_I2C2_Init();
 8001062:	f7ff fef5 	bl	8000e50 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001066:	f7ff ff21 	bl	8000eac <MX_TIM6_Init>
  MX_TIM15_Init();
 800106a:	f7ff ff4f 	bl	8000f0c <MX_TIM15_Init>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001078:	f001 f82d 	bl	80020d6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800107c:	200a      	movs	r0, #10
 800107e:	f000 fea7 	bl	8001dd0 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108c:	f001 f823 	bl	80020d6 <HAL_GPIO_WritePin>
  ble_init();
 8001090:	f7ff fabc 	bl	800060c <ble_init>
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2140      	movs	r1, #64	@ 0x40
 8001098:	485f      	ldr	r0, [pc, #380]	@ (8001218 <main+0x1cc>)
 800109a:	f001 f81c 	bl	80020d6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f000 fe96 	bl	8001dd0 <HAL_Delay>
  startToF();
 80010a4:	f000 fb3e 	bl	8001724 <startToF>
  initLPS22hh();
 80010a8:	f000 f8e4 	bl	8001274 <initLPS22hh>
  int distanceComplete=0;
 80010ac:	2500      	movs	r5, #0
 80010ae:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_TIM_Base_Start_IT(&htim6);
 80010b0:	4c5a      	ldr	r4, [pc, #360]	@ (800121c <main+0x1d0>)
 80010b2:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 80010b6:	f003 f8e9 	bl	800428c <HAL_TIM_Base_Start_IT>
  initHTS221();
 80010ba:	f000 f945 	bl	8001348 <initHTS221>
  init_accelerometer();
 80010be:	f000 fb77 	bl	80017b0 <init_accelerometer>
  init_magnetometer();
 80010c2:	f000 fc35 	bl	8001930 <init_magnetometer>
  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80010c6:	4629      	mov	r1, r5
 80010c8:	f104 00fc 	add.w	r0, r4, #252	@ 0xfc
 80010cc:	f003 fba4 	bl	8004818 <HAL_TIM_PWM_Start>
 80010d0:	e004      	b.n	80010dc <main+0x90>
		  if(update){
 80010d2:	4b52      	ldr	r3, [pc, #328]	@ (800121c <main+0x1d0>)
 80010d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80010d8:	b94b      	cbnz	r3, 80010ee <main+0xa2>
	  __WFI();
 80010da:	bf30      	wfi
	  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){//if an event occurs let's catch it
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	4850      	ldr	r0, [pc, #320]	@ (8001220 <main+0x1d4>)
 80010e0:	f000 fff2 	bl	80020c8 <HAL_GPIO_ReadPin>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d0f4      	beq.n	80010d2 <main+0x86>
		  catchBLE();
 80010e8:	f7ff f996 	bl	8000418 <catchBLE>
 80010ec:	e7f5      	b.n	80010da <main+0x8e>
			  update=0;
 80010ee:	4b4b      	ldr	r3, [pc, #300]	@ (800121c <main+0x1d0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
			  getDistance(&distanceComplete);
 80010f6:	a809      	add	r0, sp, #36	@ 0x24
 80010f8:	f000 fb28 	bl	800174c <getDistance>
			  updateSignedMillesimal(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,TOF_VALUE,13,distanceComplete);
 80010fc:	4c49      	ldr	r4, [pc, #292]	@ (8001224 <main+0x1d8>)
 80010fe:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	230d      	movs	r3, #13
 8001106:	4a48      	ldr	r2, [pc, #288]	@ (8001228 <main+0x1dc>)
 8001108:	4948      	ldr	r1, [pc, #288]	@ (800122c <main+0x1e0>)
 800110a:	4620      	mov	r0, r4
 800110c:	f7ff fc52 	bl	80009b4 <updateSignedMillesimal>
			  HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f000 fe5d 	bl	8001dd0 <HAL_Delay>
			  getTemperature(&temp);
 8001116:	a806      	add	r0, sp, #24
 8001118:	f000 fabe 	bl	8001698 <getTemperature>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,VALUE_TEMP,9,temp);
 800111c:	ed9d 0a06 	vldr	s0, [sp, #24]
 8001120:	2309      	movs	r3, #9
 8001122:	4a43      	ldr	r2, [pc, #268]	@ (8001230 <main+0x1e4>)
 8001124:	4943      	ldr	r1, [pc, #268]	@ (8001234 <main+0x1e8>)
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff fd10 	bl	8000b4c <updateSignedFloat>
			  HAL_Delay(10);
 800112c:	200a      	movs	r0, #10
 800112e:	f000 fe4f 	bl	8001dd0 <HAL_Delay>
			  getHumidity(&hum);
 8001132:	a807      	add	r0, sp, #28
 8001134:	f000 fa6a 	bl	800160c <getHumidity>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,VALUE_HUM,8,hum);
 8001138:	ed9d 0a07 	vldr	s0, [sp, #28]
 800113c:	2308      	movs	r3, #8
 800113e:	4a3e      	ldr	r2, [pc, #248]	@ (8001238 <main+0x1ec>)
 8001140:	493e      	ldr	r1, [pc, #248]	@ (800123c <main+0x1f0>)
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff fd02 	bl	8000b4c <updateSignedFloat>
			  HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f000 fe41 	bl	8001dd0 <HAL_Delay>
			  getAxisAccelerometer(&accx,&accy,&accz);
 800114e:	f10d 0212 	add.w	r2, sp, #18
 8001152:	a905      	add	r1, sp, #20
 8001154:	f10d 0016 	add.w	r0, sp, #22
 8001158:	f000 fb3e 	bl	80017d8 <getAxisAccelerometer>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,X_VALUE,10,accx);
 800115c:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 8001270 <main+0x224>
 8001160:	4d37      	ldr	r5, [pc, #220]	@ (8001240 <main+0x1f4>)
 8001162:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	230a      	movs	r3, #10
 800116a:	4642      	mov	r2, r8
 800116c:	4935      	ldr	r1, [pc, #212]	@ (8001244 <main+0x1f8>)
 800116e:	4628      	mov	r0, r5
 8001170:	f7ff fc20 	bl	80009b4 <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,Y_VALUE,10,accy);
 8001174:	4f34      	ldr	r7, [pc, #208]	@ (8001248 <main+0x1fc>)
 8001176:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	230a      	movs	r3, #10
 800117e:	463a      	mov	r2, r7
 8001180:	4932      	ldr	r1, [pc, #200]	@ (800124c <main+0x200>)
 8001182:	4628      	mov	r0, r5
 8001184:	f7ff fc16 	bl	80009b4 <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,Z_VALUE,10,accz);
 8001188:	4e31      	ldr	r6, [pc, #196]	@ (8001250 <main+0x204>)
 800118a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	230a      	movs	r3, #10
 8001192:	4632      	mov	r2, r6
 8001194:	492f      	ldr	r1, [pc, #188]	@ (8001254 <main+0x208>)
 8001196:	4628      	mov	r0, r5
 8001198:	f7ff fc0c 	bl	80009b4 <updateSignedMillesimal>
			  getPressure(&press);
 800119c:	a808      	add	r0, sp, #32
 800119e:	f000 f87d 	bl	800129c <getPressure>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,VALUE_PRESS,10,press);
 80011a2:	ed9d 0a08 	vldr	s0, [sp, #32]
 80011a6:	230a      	movs	r3, #10
 80011a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <main+0x20c>)
 80011aa:	492c      	ldr	r1, [pc, #176]	@ (800125c <main+0x210>)
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fccd 	bl	8000b4c <updateSignedFloat>
              HAL_Delay(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f000 fe0c 	bl	8001dd0 <HAL_Delay>
			  getAxisMagnetometer(&magx,&magy,&magz);
 80011b8:	aa03      	add	r2, sp, #12
 80011ba:	f10d 010e 	add.w	r1, sp, #14
 80011be:	a804      	add	r0, sp, #16
 80011c0:	f000 fbc8 	bl	8001954 <getAxisMagnetometer>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,X_VALUE,10,magx);
 80011c4:	4c26      	ldr	r4, [pc, #152]	@ (8001260 <main+0x214>)
 80011c6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	230a      	movs	r3, #10
 80011ce:	4642      	mov	r2, r8
 80011d0:	4924      	ldr	r1, [pc, #144]	@ (8001264 <main+0x218>)
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff fbee 	bl	80009b4 <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,Y_VALUE,10,magy);
 80011d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	230a      	movs	r3, #10
 80011e0:	463a      	mov	r2, r7
 80011e2:	4921      	ldr	r1, [pc, #132]	@ (8001268 <main+0x21c>)
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff fbe5 	bl	80009b4 <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,Z_VALUE,10,magz);
 80011ea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	230a      	movs	r3, #10
 80011f2:	4632      	mov	r2, r6
 80011f4:	491d      	ldr	r1, [pc, #116]	@ (800126c <main+0x220>)
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fbdc 	bl	80009b4 <updateSignedMillesimal>
			  startToF();
 80011fc:	f000 fa92 	bl	8001724 <startToF>
			  pwm=distanceComplete;
 8001200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			  if(distanceComplete>500){
 8001202:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001206:	dd01      	ble.n	800120c <main+0x1c0>
				  pwm=500;
 8001208:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
			  __HAL_TIM_SetCompare(&htim15,TIM_CHANNEL_1,pwm);
 800120c:	4a03      	ldr	r2, [pc, #12]	@ (800121c <main+0x1d0>)
 800120e:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 8001212:	6353      	str	r3, [r2, #52]	@ 0x34
 8001214:	e761      	b.n	80010da <main+0x8e>
 8001216:	bf00      	nop
 8001218:	48000800 	.word	0x48000800
 800121c:	200005e0 	.word	0x200005e0
 8001220:	48001000 	.word	0x48001000
 8001224:	20000580 	.word	0x20000580
 8001228:	200001a4 	.word	0x200001a4
 800122c:	20000594 	.word	0x20000594
 8001230:	2000013c 	.word	0x2000013c
 8001234:	20000588 	.word	0x20000588
 8001238:	20000160 	.word	0x20000160
 800123c:	2000058c 	.word	0x2000058c
 8001240:	20000598 	.word	0x20000598
 8001244:	200005a0 	.word	0x200005a0
 8001248:	200002c8 	.word	0x200002c8
 800124c:	200005a4 	.word	0x200005a4
 8001250:	200002ec 	.word	0x200002ec
 8001254:	200005a8 	.word	0x200005a8
 8001258:	20000180 	.word	0x20000180
 800125c:	20000590 	.word	0x20000590
 8001260:	200005ac 	.word	0x200005ac
 8001264:	200005b4 	.word	0x200005b4
 8001268:	200005b8 	.word	0x200005b8
 800126c:	200005bc 	.word	0x200005bc
 8001270:	200002a4 	.word	0x200002a4

08001274 <initLPS22hh>:
int16_t H_0_lsb=0;
int16_t H_1_lsb=0;
float mh=0;


void initLPS22hh(){
 8001274:	b500      	push	{lr}
 8001276:	b085      	sub	sp, #20
	uint8_t addressWrite=0xba;
	uint8_t turnOn[]={0x10,0x20};//The address of the register and the value of the register to turn on the sensor
 8001278:	f242 0310 	movw	r3, #8208	@ 0x2010
 800127c:	f8ad 300c 	strh.w	r3, [sp, #12]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001280:	2301      	movs	r3, #1
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2302      	movs	r3, #2
 8001286:	aa03      	add	r2, sp, #12
 8001288:	21ba      	movs	r1, #186	@ 0xba
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <initLPS22hh+0x24>)
 800128c:	f001 f8d6 	bl	800243c <HAL_I2C_Master_Transmit>
}
 8001290:	b005      	add	sp, #20
 8001292:	f85d fb04 	ldr.w	pc, [sp], #4
 8001296:	bf00      	nop
 8001298:	20000644 	.word	0x20000644

0800129c <getPressure>:

void getPressure(float *pressure){
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	4607      	mov	r7, r0

	int lsb;
	uint8_t addressWrite=0xba;
	uint8_t addressRead=0xbb;
	uint8_t pressXL[]={0x28};
 80012a2:	2328      	movs	r3, #40	@ 0x28
 80012a4:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t pressL[]={0x29};
 80012a8:	2329      	movs	r3, #41	@ 0x29
 80012aa:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t pressH[]={0x2a};
 80012ae:	232a      	movs	r3, #42	@ 0x2a
 80012b0:	f88d 300c 	strb.w	r3, [sp, #12]
	uint8_t data[2];

        HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressXL,1,1);
 80012b4:	4e22      	ldr	r6, [pc, #136]	@ (8001340 <getPressure+0xa4>)
 80012b6:	2501      	movs	r5, #1
 80012b8:	9500      	str	r5, [sp, #0]
 80012ba:	462b      	mov	r3, r5
 80012bc:	aa05      	add	r2, sp, #20
 80012be:	21ba      	movs	r1, #186	@ 0xba
 80012c0:	4630      	mov	r0, r6
 80012c2:	f001 f8bb 	bl	800243c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,2,1);
 80012c6:	9500      	str	r5, [sp, #0]
 80012c8:	2302      	movs	r3, #2
 80012ca:	aa02      	add	r2, sp, #8
 80012cc:	21bb      	movs	r1, #187	@ 0xbb
 80012ce:	4630      	mov	r0, r6
 80012d0:	f001 f972 	bl	80025b8 <HAL_I2C_Master_Receive>
	lsb=data[0];
 80012d4:	f89d 4008 	ldrb.w	r4, [sp, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressL,1,1);
 80012d8:	9500      	str	r5, [sp, #0]
 80012da:	462b      	mov	r3, r5
 80012dc:	aa04      	add	r2, sp, #16
 80012de:	21ba      	movs	r1, #186	@ 0xba
 80012e0:	4630      	mov	r0, r6
 80012e2:	f001 f8ab 	bl	800243c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,2,1);
 80012e6:	9500      	str	r5, [sp, #0]
 80012e8:	2302      	movs	r3, #2
 80012ea:	aa02      	add	r2, sp, #8
 80012ec:	21bb      	movs	r1, #187	@ 0xbb
 80012ee:	4630      	mov	r0, r6
 80012f0:	f001 f962 	bl	80025b8 <HAL_I2C_Master_Receive>
	lsb|=data[0]<<8;
 80012f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80012f8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressH,1,1);
 80012fc:	9500      	str	r5, [sp, #0]
 80012fe:	462b      	mov	r3, r5
 8001300:	aa03      	add	r2, sp, #12
 8001302:	21ba      	movs	r1, #186	@ 0xba
 8001304:	4630      	mov	r0, r6
 8001306:	f001 f899 	bl	800243c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,2,1);
 800130a:	9500      	str	r5, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	aa02      	add	r2, sp, #8
 8001310:	21bb      	movs	r1, #187	@ 0xbb
 8001312:	4630      	mov	r0, r6
 8001314:	f001 f950 	bl	80025b8 <HAL_I2C_Master_Receive>
	lsb|=data[0]<<16;
 8001318:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800131c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16


	if(lsb>8388607){
 8001320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001324:	db00      	blt.n	8001328 <getPressure+0x8c>
		lsb=lsb-1;
		lsb=~lsb;
 8001326:	425b      	negs	r3, r3
	}

	*pressure=((float)lsb)/((float)(4096));
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001344 <getPressure+0xa8>
 8001334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001338:	edc7 7a00 	vstr	s15, [r7]

}
 800133c:	b007      	add	sp, #28
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	20000644 	.word	0x20000644
 8001344:	39800000 	.word	0x39800000

08001348 <initHTS221>:

void initHTS221(){
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	b08e      	sub	sp, #56	@ 0x38
	uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	uint8_t turnOn[]={0x20,0x81};//The address of the register and the value of the register to turn on the sensor
 800134c:	f248 1320 	movw	r3, #33056	@ 0x8120
 8001350:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001354:	4eab      	ldr	r6, [pc, #684]	@ (8001604 <initHTS221+0x2bc>)
 8001356:	2401      	movs	r4, #1
 8001358:	9400      	str	r4, [sp, #0]
 800135a:	2302      	movs	r3, #2
 800135c:	aa0d      	add	r2, sp, #52	@ 0x34
 800135e:	21be      	movs	r1, #190	@ 0xbe
 8001360:	4630      	mov	r0, r6
 8001362:	f001 f86b 	bl	800243c <HAL_I2C_Master_Transmit>


    uint8_t tempMinAddress[]={0x32};
 8001366:	2332      	movs	r3, #50	@ 0x32
 8001368:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    uint8_t tempMaxAddress[]={0x33};
 800136c:	2333      	movs	r3, #51	@ 0x33
 800136e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    //reading low temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMinAddress,1,1);
 8001372:	9400      	str	r4, [sp, #0]
 8001374:	4623      	mov	r3, r4
 8001376:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001378:	21be      	movs	r1, #190	@ 0xbe
 800137a:	4630      	mov	r0, r6
 800137c:	f001 f85e 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001380:	9400      	str	r4, [sp, #0]
 8001382:	4623      	mov	r3, r4
 8001384:	aa0c      	add	r2, sp, #48	@ 0x30
 8001386:	21bf      	movs	r1, #191	@ 0xbf
 8001388:	4630      	mov	r0, r6
 800138a:	f001 f915 	bl	80025b8 <HAL_I2C_Master_Receive>
    T_C0=data[0];
 800138e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001392:	4d9d      	ldr	r5, [pc, #628]	@ (8001608 <initHTS221+0x2c0>)
 8001394:	602b      	str	r3, [r5, #0]

    //reading high temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMaxAddress,1,1);
 8001396:	9400      	str	r4, [sp, #0]
 8001398:	4623      	mov	r3, r4
 800139a:	aa0a      	add	r2, sp, #40	@ 0x28
 800139c:	21be      	movs	r1, #190	@ 0xbe
 800139e:	4630      	mov	r0, r6
 80013a0:	f001 f84c 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80013a4:	9400      	str	r4, [sp, #0]
 80013a6:	4623      	mov	r3, r4
 80013a8:	aa0c      	add	r2, sp, #48	@ 0x30
 80013aa:	21bf      	movs	r1, #191	@ 0xbf
 80013ac:	4630      	mov	r0, r6
 80013ae:	f001 f903 	bl	80025b8 <HAL_I2C_Master_Receive>
    T_C1=data[0];
 80013b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80013b6:	606b      	str	r3, [r5, #4]

	uint8_t MSB_temp[]={0x35};
 80013b8:	2335      	movs	r3, #53	@ 0x35
 80013ba:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MSB_temp,1,1);
 80013be:	9400      	str	r4, [sp, #0]
 80013c0:	4623      	mov	r3, r4
 80013c2:	aa09      	add	r2, sp, #36	@ 0x24
 80013c4:	21be      	movs	r1, #190	@ 0xbe
 80013c6:	4630      	mov	r0, r6
 80013c8:	f001 f838 	bl	800243c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80013cc:	9400      	str	r4, [sp, #0]
 80013ce:	4623      	mov	r3, r4
 80013d0:	aa0c      	add	r2, sp, #48	@ 0x30
 80013d2:	21bf      	movs	r1, #191	@ 0xbf
 80013d4:	4630      	mov	r0, r6
 80013d6:	f001 f8ef 	bl	80025b8 <HAL_I2C_Master_Receive>

	T_C0|=((data[0]&0x03)<<8);
 80013da:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80013de:	021a      	lsls	r2, r3, #8
 80013e0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80013e4:	6829      	ldr	r1, [r5, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	602a      	str	r2, [r5, #0]
	T_C1|=(((data[0]&0x0c)>>2)<<8);
 80013ea:	109b      	asrs	r3, r3, #2
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80013f2:	6869      	ldr	r1, [r5, #4]
 80013f4:	430b      	orrs	r3, r1
 80013f6:	606b      	str	r3, [r5, #4]

	T_C0=T_C0>>3;
 80013f8:	10d2      	asrs	r2, r2, #3
 80013fa:	602a      	str	r2, [r5, #0]
	T_C1=T_C1>>3;
 80013fc:	10db      	asrs	r3, r3, #3
 80013fe:	606b      	str	r3, [r5, #4]

	uint8_t ADC0L[]={0x3c};
 8001400:	233c      	movs	r3, #60	@ 0x3c
 8001402:	f88d 3020 	strb.w	r3, [sp, #32]
	uint8_t ADC0H[]={0x3d};
 8001406:	233d      	movs	r3, #61	@ 0x3d
 8001408:	f88d 301c 	strb.w	r3, [sp, #28]
	//get the calibration adc min
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	4623      	mov	r3, r4
 8001410:	aa08      	add	r2, sp, #32
 8001412:	21be      	movs	r1, #190	@ 0xbe
 8001414:	4630      	mov	r0, r6
 8001416:	f001 f811 	bl	800243c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800141a:	9400      	str	r4, [sp, #0]
 800141c:	4623      	mov	r3, r4
 800141e:	aa0c      	add	r2, sp, #48	@ 0x30
 8001420:	21bf      	movs	r1, #191	@ 0xbf
 8001422:	4630      	mov	r0, r6
 8001424:	f001 f8c8 	bl	80025b8 <HAL_I2C_Master_Receive>
	T_C0_lsb=data[0];
 8001428:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800142c:	812b      	strh	r3, [r5, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 800142e:	9400      	str	r4, [sp, #0]
 8001430:	4623      	mov	r3, r4
 8001432:	aa07      	add	r2, sp, #28
 8001434:	21be      	movs	r1, #190	@ 0xbe
 8001436:	4630      	mov	r0, r6
 8001438:	f001 f800 	bl	800243c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800143c:	9400      	str	r4, [sp, #0]
 800143e:	4623      	mov	r3, r4
 8001440:	aa0c      	add	r2, sp, #48	@ 0x30
 8001442:	21bf      	movs	r1, #191	@ 0xbf
 8001444:	4630      	mov	r0, r6
 8001446:	f001 f8b7 	bl	80025b8 <HAL_I2C_Master_Receive>
	T_C0_lsb|=data[0]<<8;
 800144a:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 800144e:	892b      	ldrh	r3, [r5, #8]
 8001450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001454:	812b      	strh	r3, [r5, #8]


    uint8_t ADC1L[]={0x3e};
 8001456:	233e      	movs	r3, #62	@ 0x3e
 8001458:	f88d 3018 	strb.w	r3, [sp, #24]
    uint8_t ADC1H[]={0x3f};
 800145c:	233f      	movs	r3, #63	@ 0x3f
 800145e:	f88d 3014 	strb.w	r3, [sp, #20]
    //leggo temperatura
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 8001462:	9400      	str	r4, [sp, #0]
 8001464:	4623      	mov	r3, r4
 8001466:	aa06      	add	r2, sp, #24
 8001468:	21be      	movs	r1, #190	@ 0xbe
 800146a:	4630      	mov	r0, r6
 800146c:	f000 ffe6 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001470:	9400      	str	r4, [sp, #0]
 8001472:	4623      	mov	r3, r4
 8001474:	aa0c      	add	r2, sp, #48	@ 0x30
 8001476:	21bf      	movs	r1, #191	@ 0xbf
 8001478:	4630      	mov	r0, r6
 800147a:	f001 f89d 	bl	80025b8 <HAL_I2C_Master_Receive>
    T_C1_lsb=data[0];
 800147e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001482:	816b      	strh	r3, [r5, #10]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 8001484:	9400      	str	r4, [sp, #0]
 8001486:	4623      	mov	r3, r4
 8001488:	aa05      	add	r2, sp, #20
 800148a:	21be      	movs	r1, #190	@ 0xbe
 800148c:	4630      	mov	r0, r6
 800148e:	f000 ffd5 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001492:	9400      	str	r4, [sp, #0]
 8001494:	4623      	mov	r3, r4
 8001496:	aa0c      	add	r2, sp, #48	@ 0x30
 8001498:	21bf      	movs	r1, #191	@ 0xbf
 800149a:	4630      	mov	r0, r6
 800149c:	f001 f88c 	bl	80025b8 <HAL_I2C_Master_Receive>
    T_C1_lsb|=data[0]<<8;
 80014a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 80014a4:	896b      	ldrh	r3, [r5, #10]
 80014a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	816b      	strh	r3, [r5, #10]

    m=((float)(T_C1-T_C0))/((float)(T_C1_lsb-T_C0_lsb));
 80014ae:	686a      	ldr	r2, [r5, #4]
 80014b0:	6829      	ldr	r1, [r5, #0]
 80014b2:	1a52      	subs	r2, r2, r1
 80014b4:	ee07 2a90 	vmov	s15, r2
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014ce:	edc5 6a03 	vstr	s13, [r5, #12]


    uint8_t HumMinAddress[]={0x30};
 80014d2:	2330      	movs	r3, #48	@ 0x30
 80014d4:	f88d 3010 	strb.w	r3, [sp, #16]
     uint8_t HumMaxAddress[]={0x31};
 80014d8:	2331      	movs	r3, #49	@ 0x31
 80014da:	f88d 300c 	strb.w	r3, [sp, #12]
     //reading low temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMinAddress,1,1);
 80014de:	9400      	str	r4, [sp, #0]
 80014e0:	4623      	mov	r3, r4
 80014e2:	aa04      	add	r2, sp, #16
 80014e4:	21be      	movs	r1, #190	@ 0xbe
 80014e6:	4630      	mov	r0, r6
 80014e8:	f000 ffa8 	bl	800243c <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80014ec:	9400      	str	r4, [sp, #0]
 80014ee:	4623      	mov	r3, r4
 80014f0:	aa0c      	add	r2, sp, #48	@ 0x30
 80014f2:	21bf      	movs	r1, #191	@ 0xbf
 80014f4:	4630      	mov	r0, r6
 80014f6:	f001 f85f 	bl	80025b8 <HAL_I2C_Master_Receive>
     H_0=data[0];
 80014fa:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80014fe:	742b      	strb	r3, [r5, #16]

     //reading high temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMaxAddress,1,1);
 8001500:	9400      	str	r4, [sp, #0]
 8001502:	4623      	mov	r3, r4
 8001504:	aa03      	add	r2, sp, #12
 8001506:	21be      	movs	r1, #190	@ 0xbe
 8001508:	4630      	mov	r0, r6
 800150a:	f000 ff97 	bl	800243c <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800150e:	9400      	str	r4, [sp, #0]
 8001510:	4623      	mov	r3, r4
 8001512:	aa0c      	add	r2, sp, #48	@ 0x30
 8001514:	21bf      	movs	r1, #191	@ 0xbf
 8001516:	4630      	mov	r0, r6
 8001518:	f001 f84e 	bl	80025b8 <HAL_I2C_Master_Receive>
     H_1=data[0];
 800151c:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001520:	746b      	strb	r3, [r5, #17]


 	H_0=H_0>>1;
 8001522:	7c2a      	ldrb	r2, [r5, #16]
 8001524:	40e2      	lsrs	r2, r4
 8001526:	742a      	strb	r2, [r5, #16]
 	H_1=H_1>>1;
 8001528:	40e3      	lsrs	r3, r4
 800152a:	746b      	strb	r3, [r5, #17]

 	ADC0L[0]=0x36;
 800152c:	2336      	movs	r3, #54	@ 0x36
 800152e:	f88d 3020 	strb.w	r3, [sp, #32]
 	ADC0H[0]=0x37;
 8001532:	2337      	movs	r3, #55	@ 0x37
 8001534:	f88d 301c 	strb.w	r3, [sp, #28]
 	//get the calibration adc min
 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 8001538:	9400      	str	r4, [sp, #0]
 800153a:	4623      	mov	r3, r4
 800153c:	aa08      	add	r2, sp, #32
 800153e:	21be      	movs	r1, #190	@ 0xbe
 8001540:	4630      	mov	r0, r6
 8001542:	f000 ff7b 	bl	800243c <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001546:	9400      	str	r4, [sp, #0]
 8001548:	4623      	mov	r3, r4
 800154a:	aa0c      	add	r2, sp, #48	@ 0x30
 800154c:	21bf      	movs	r1, #191	@ 0xbf
 800154e:	4630      	mov	r0, r6
 8001550:	f001 f832 	bl	80025b8 <HAL_I2C_Master_Receive>
 	H_0_lsb=data[0];
 8001554:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001558:	826b      	strh	r3, [r5, #18]

 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 800155a:	9400      	str	r4, [sp, #0]
 800155c:	4623      	mov	r3, r4
 800155e:	aa07      	add	r2, sp, #28
 8001560:	21be      	movs	r1, #190	@ 0xbe
 8001562:	4630      	mov	r0, r6
 8001564:	f000 ff6a 	bl	800243c <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001568:	9400      	str	r4, [sp, #0]
 800156a:	4623      	mov	r3, r4
 800156c:	aa0c      	add	r2, sp, #48	@ 0x30
 800156e:	21bf      	movs	r1, #191	@ 0xbf
 8001570:	4630      	mov	r0, r6
 8001572:	f001 f821 	bl	80025b8 <HAL_I2C_Master_Receive>
 	H_0_lsb|=data[0]<<8;
 8001576:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 800157a:	8a6b      	ldrh	r3, [r5, #18]
 800157c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001580:	826b      	strh	r3, [r5, #18]


    ADC1L[0]=0x3a;
 8001582:	233a      	movs	r3, #58	@ 0x3a
 8001584:	f88d 3018 	strb.w	r3, [sp, #24]
    ADC1H[0]=0x3b;
 8001588:	233b      	movs	r3, #59	@ 0x3b
 800158a:	f88d 3014 	strb.w	r3, [sp, #20]
     //leggo temperatura
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 800158e:	9400      	str	r4, [sp, #0]
 8001590:	4623      	mov	r3, r4
 8001592:	aa06      	add	r2, sp, #24
 8001594:	21be      	movs	r1, #190	@ 0xbe
 8001596:	4630      	mov	r0, r6
 8001598:	f000 ff50 	bl	800243c <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800159c:	9400      	str	r4, [sp, #0]
 800159e:	4623      	mov	r3, r4
 80015a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80015a2:	21bf      	movs	r1, #191	@ 0xbf
 80015a4:	4630      	mov	r0, r6
 80015a6:	f001 f807 	bl	80025b8 <HAL_I2C_Master_Receive>
     H_1_lsb=data[0];
 80015aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80015ae:	82ab      	strh	r3, [r5, #20]

     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 80015b0:	9400      	str	r4, [sp, #0]
 80015b2:	4623      	mov	r3, r4
 80015b4:	aa05      	add	r2, sp, #20
 80015b6:	21be      	movs	r1, #190	@ 0xbe
 80015b8:	4630      	mov	r0, r6
 80015ba:	f000 ff3f 	bl	800243c <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80015be:	9400      	str	r4, [sp, #0]
 80015c0:	4623      	mov	r3, r4
 80015c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80015c4:	21bf      	movs	r1, #191	@ 0xbf
 80015c6:	4630      	mov	r0, r6
 80015c8:	f000 fff6 	bl	80025b8 <HAL_I2C_Master_Receive>
     H_1_lsb|=data[0]<<8;
 80015cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 80015d0:	8aab      	ldrh	r3, [r5, #20]
 80015d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	82ab      	strh	r3, [r5, #20]

     mh=((float)(H_1-H_0))/((float)(H_1_lsb-H_0_lsb));
 80015da:	7c6a      	ldrb	r2, [r5, #17]
 80015dc:	7c29      	ldrb	r1, [r5, #16]
 80015de:	1a52      	subs	r2, r2, r1
 80015e0:	ee07 2a90 	vmov	s15, r2
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015fa:	edc5 6a06 	vstr	s13, [r5, #24]



}
 80015fe:	b00e      	add	sp, #56	@ 0x38
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	bf00      	nop
 8001604:	20000644 	.word	0x20000644
 8001608:	20000730 	.word	0x20000730

0800160c <getHumidity>:

void getHumidity(float *humidity){
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b087      	sub	sp, #28
 8001610:	4607      	mov	r7, r0

    uint8_t humL[]={0x28};
 8001612:	2328      	movs	r3, #40	@ 0x28
 8001614:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t humH[]={0x29};
 8001618:	2329      	movs	r3, #41	@ 0x29
 800161a:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t hum;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humL,1,1);
 800161e:	4e1c      	ldr	r6, [pc, #112]	@ (8001690 <getHumidity+0x84>)
 8001620:	2401      	movs	r4, #1
 8001622:	9400      	str	r4, [sp, #0]
 8001624:	4623      	mov	r3, r4
 8001626:	aa05      	add	r2, sp, #20
 8001628:	21be      	movs	r1, #190	@ 0xbe
 800162a:	4630      	mov	r0, r6
 800162c:	f000 ff06 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001630:	9400      	str	r4, [sp, #0]
 8001632:	4623      	mov	r3, r4
 8001634:	aa03      	add	r2, sp, #12
 8001636:	21bf      	movs	r1, #191	@ 0xbf
 8001638:	4630      	mov	r0, r6
 800163a:	f000 ffbd 	bl	80025b8 <HAL_I2C_Master_Receive>
    hum=data[0];
 800163e:	f89d 500c 	ldrb.w	r5, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humH,1,1);
 8001642:	9400      	str	r4, [sp, #0]
 8001644:	4623      	mov	r3, r4
 8001646:	aa04      	add	r2, sp, #16
 8001648:	21be      	movs	r1, #190	@ 0xbe
 800164a:	4630      	mov	r0, r6
 800164c:	f000 fef6 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001650:	9400      	str	r4, [sp, #0]
 8001652:	4623      	mov	r3, r4
 8001654:	aa03      	add	r2, sp, #12
 8001656:	21bf      	movs	r1, #191	@ 0xbf
 8001658:	4630      	mov	r0, r6
 800165a:	f000 ffad 	bl	80025b8 <HAL_I2C_Master_Receive>
    hum|=data[0]<<1;
 800165e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001662:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
 8001666:	ee07 3a90 	vmov	s15, r3

    *humidity=H_0+mh*hum;
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <getHumidity+0x88>)
 8001670:	ed93 7a06 	vldr	s14, [r3, #24]
 8001674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001678:	7c1b      	ldrb	r3, [r3, #16]
 800167a:	ee07 3a10 	vmov	s14, r3
 800167e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001686:	edc7 7a00 	vstr	s15, [r7]

}
 800168a:	b007      	add	sp, #28
 800168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168e:	bf00      	nop
 8001690:	20000644 	.word	0x20000644
 8001694:	20000730 	.word	0x20000730

08001698 <getTemperature>:



void getTemperature(float *temperature){
 8001698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169a:	b087      	sub	sp, #28
 800169c:	4607      	mov	r7, r0

    uint8_t tempL[]={0x2A};
 800169e:	232a      	movs	r3, #42	@ 0x2a
 80016a0:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t tempH[]={0x2B};
 80016a4:	232b      	movs	r3, #43	@ 0x2b
 80016a6:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t temp;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempL,1,1);
 80016aa:	4e1c      	ldr	r6, [pc, #112]	@ (800171c <getTemperature+0x84>)
 80016ac:	2501      	movs	r5, #1
 80016ae:	9500      	str	r5, [sp, #0]
 80016b0:	462b      	mov	r3, r5
 80016b2:	aa05      	add	r2, sp, #20
 80016b4:	21be      	movs	r1, #190	@ 0xbe
 80016b6:	4630      	mov	r0, r6
 80016b8:	f000 fec0 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80016bc:	9500      	str	r5, [sp, #0]
 80016be:	462b      	mov	r3, r5
 80016c0:	aa03      	add	r2, sp, #12
 80016c2:	21bf      	movs	r1, #191	@ 0xbf
 80016c4:	4630      	mov	r0, r6
 80016c6:	f000 ff77 	bl	80025b8 <HAL_I2C_Master_Receive>
    temp=data[0];
 80016ca:	f89d 400c 	ldrb.w	r4, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempH,1,1);
 80016ce:	9500      	str	r5, [sp, #0]
 80016d0:	462b      	mov	r3, r5
 80016d2:	aa04      	add	r2, sp, #16
 80016d4:	21be      	movs	r1, #190	@ 0xbe
 80016d6:	4630      	mov	r0, r6
 80016d8:	f000 feb0 	bl	800243c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80016dc:	9500      	str	r5, [sp, #0]
 80016de:	462b      	mov	r3, r5
 80016e0:	aa03      	add	r2, sp, #12
 80016e2:	21bf      	movs	r1, #191	@ 0xbf
 80016e4:	4630      	mov	r0, r6
 80016e6:	f000 ff67 	bl	80025b8 <HAL_I2C_Master_Receive>
    temp|=data[0]<<8;
 80016ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80016ee:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80016f2:	b224      	sxth	r4, r4

    *temperature=T_C0+m*temp;
 80016f4:	ee07 4a90 	vmov	s15, r4
 80016f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <getTemperature+0x88>)
 80016fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	ed93 7a00 	vldr	s14, [r3]
 800170a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	edc7 7a00 	vstr	s15, [r7]

}
 8001716:	b007      	add	sp, #28
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	bf00      	nop
 800171c:	20000644 	.word	0x20000644
 8001720:	20000730 	.word	0x20000730

08001724 <startToF>:


void startToF(){
 8001724:	b500      	push	{lr}
 8001726:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x52;
	 uint8_t turnOn[]={0x00,0x01};
 8001728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172c:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001730:	2301      	movs	r3, #1
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2302      	movs	r3, #2
 8001736:	aa03      	add	r2, sp, #12
 8001738:	2152      	movs	r1, #82	@ 0x52
 800173a:	4803      	ldr	r0, [pc, #12]	@ (8001748 <startToF+0x24>)
 800173c:	f000 fe7e 	bl	800243c <HAL_I2C_Master_Transmit>
}
 8001740:	b005      	add	sp, #20
 8001742:	f85d fb04 	ldr.w	pc, [sp], #4
 8001746:	bf00      	nop
 8001748:	20000644 	.word	0x20000644

0800174c <getDistance>:

void getDistance(int *distance){
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	4604      	mov	r4, r0
	 uint8_t addressWrite=0x52;
	  uint8_t addressRead=0x53;
	  uint8_t resultAddress[]={0x1e};
 8001752:	231e      	movs	r3, #30
 8001754:	f88d 300c 	strb.w	r3, [sp, #12]
	  uint8_t rawData[]={0,0};
 8001758:	2300      	movs	r3, #0
 800175a:	f8ad 3008 	strh.w	r3, [sp, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 800175e:	4e13      	ldr	r6, [pc, #76]	@ (80017ac <getDistance+0x60>)
 8001760:	2501      	movs	r5, #1
 8001762:	9500      	str	r5, [sp, #0]
 8001764:	462b      	mov	r3, r5
 8001766:	aa03      	add	r2, sp, #12
 8001768:	2152      	movs	r1, #82	@ 0x52
 800176a:	4630      	mov	r0, r6
 800176c:	f000 fe66 	bl	800243c <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 8001770:	9500      	str	r5, [sp, #0]
 8001772:	2302      	movs	r3, #2
 8001774:	aa02      	add	r2, sp, #8
 8001776:	2153      	movs	r1, #83	@ 0x53
 8001778:	4630      	mov	r0, r6
 800177a:	f000 ff1d 	bl	80025b8 <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 800177e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001782:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001786:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800178a:	3b14      	subs	r3, #20
 800178c:	6023      	str	r3, [r4, #0]

	  if(*distance<0){
 800178e:	2b00      	cmp	r3, #0
 8001790:	db08      	blt.n	80017a4 <getDistance+0x58>
		  *distance=0;
	  }
	  if(*distance>2000){
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001798:	dd02      	ble.n	80017a0 <getDistance+0x54>
		  *distance=2000;
 800179a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800179e:	6023      	str	r3, [r4, #0]
	  }
}
 80017a0:	b004      	add	sp, #16
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
		  *distance=0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	6023      	str	r3, [r4, #0]
 80017a8:	e7f3      	b.n	8001792 <getDistance+0x46>
 80017aa:	bf00      	nop
 80017ac:	20000644 	.word	0x20000644

080017b0 <init_accelerometer>:



void init_accelerometer(){
 80017b0:	b500      	push	{lr}
 80017b2:	b085      	sub	sp, #20

	 uint8_t addressWrite=0xd4;
	 uint8_t turnOn[]={0x10,0x10};
 80017b4:	f241 0310 	movw	r3, #4112	@ 0x1010
 80017b8:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 80017bc:	2301      	movs	r3, #1
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2302      	movs	r3, #2
 80017c2:	aa03      	add	r2, sp, #12
 80017c4:	21d4      	movs	r1, #212	@ 0xd4
 80017c6:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <init_accelerometer+0x24>)
 80017c8:	f000 fe38 	bl	800243c <HAL_I2C_Master_Transmit>


	}
 80017cc:	b005      	add	sp, #20
 80017ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80017d2:	bf00      	nop
 80017d4:	20000644 	.word	0x20000644

080017d8 <getAxisAccelerometer>:


void getAxisAccelerometer(int16_t *accx, int16_t *accy, int16_t *accz){
 80017d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	4680      	mov	r8, r0
 80017e0:	460f      	mov	r7, r1
 80017e2:	4616      	mov	r6, r2
	 uint8_t ACCcmd[1];
	 uint8_t ACCread[1];


	   //ACC X
	   ACCcmd[0]=0x28;
 80017e4:	2328      	movs	r3, #40	@ 0x28
 80017e6:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80017ea:	4d50      	ldr	r5, [pc, #320]	@ (800192c <getAxisAccelerometer+0x154>)
 80017ec:	2401      	movs	r4, #1
 80017ee:	9400      	str	r4, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	aa03      	add	r2, sp, #12
 80017f4:	21d4      	movs	r1, #212	@ 0xd4
 80017f6:	4628      	mov	r0, r5
 80017f8:	f000 fe20 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 80017fc:	9400      	str	r4, [sp, #0]
 80017fe:	4623      	mov	r3, r4
 8001800:	aa02      	add	r2, sp, #8
 8001802:	21d5      	movs	r1, #213	@ 0xd5
 8001804:	4628      	mov	r0, r5
 8001806:	f000 fed7 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *accx=ACCread[0];
 800180a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800180e:	f8a8 3000 	strh.w	r3, [r8]

	   ACCcmd[0]=0x29;
 8001812:	2329      	movs	r3, #41	@ 0x29
 8001814:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001818:	9400      	str	r4, [sp, #0]
 800181a:	4623      	mov	r3, r4
 800181c:	aa03      	add	r2, sp, #12
 800181e:	21d4      	movs	r1, #212	@ 0xd4
 8001820:	4628      	mov	r0, r5
 8001822:	f000 fe0b 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001826:	9400      	str	r4, [sp, #0]
 8001828:	4623      	mov	r3, r4
 800182a:	aa02      	add	r2, sp, #8
 800182c:	21d5      	movs	r1, #213	@ 0xd5
 800182e:	4628      	mov	r0, r5
 8001830:	f000 fec2 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *accx|=((ACCread[0])<<8);
 8001834:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001838:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800183c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001840:	f8a8 3000 	strh.w	r3, [r8]



	   //ACC Y

	   ACCcmd[0]=0x2a;
 8001844:	232a      	movs	r3, #42	@ 0x2a
 8001846:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 800184a:	9400      	str	r4, [sp, #0]
 800184c:	4623      	mov	r3, r4
 800184e:	aa03      	add	r2, sp, #12
 8001850:	21d4      	movs	r1, #212	@ 0xd4
 8001852:	4628      	mov	r0, r5
 8001854:	f000 fdf2 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001858:	9400      	str	r4, [sp, #0]
 800185a:	4623      	mov	r3, r4
 800185c:	aa02      	add	r2, sp, #8
 800185e:	21d5      	movs	r1, #213	@ 0xd5
 8001860:	4628      	mov	r0, r5
 8001862:	f000 fea9 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *accy=ACCread[0];
 8001866:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800186a:	803b      	strh	r3, [r7, #0]

	   ACCcmd[0]=0x2b;
 800186c:	232b      	movs	r3, #43	@ 0x2b
 800186e:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001872:	9400      	str	r4, [sp, #0]
 8001874:	4623      	mov	r3, r4
 8001876:	aa03      	add	r2, sp, #12
 8001878:	21d4      	movs	r1, #212	@ 0xd4
 800187a:	4628      	mov	r0, r5
 800187c:	f000 fdde 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001880:	9400      	str	r4, [sp, #0]
 8001882:	4623      	mov	r3, r4
 8001884:	aa02      	add	r2, sp, #8
 8001886:	21d5      	movs	r1, #213	@ 0xd5
 8001888:	4628      	mov	r0, r5
 800188a:	f000 fe95 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *accy|=((ACCread[0])<<8);
 800188e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001892:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001896:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800189a:	803b      	strh	r3, [r7, #0]



	   //ACC Z

	   ACCcmd[0]=0x2c;
 800189c:	232c      	movs	r3, #44	@ 0x2c
 800189e:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80018a2:	9400      	str	r4, [sp, #0]
 80018a4:	4623      	mov	r3, r4
 80018a6:	aa03      	add	r2, sp, #12
 80018a8:	21d4      	movs	r1, #212	@ 0xd4
 80018aa:	4628      	mov	r0, r5
 80018ac:	f000 fdc6 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 80018b0:	9400      	str	r4, [sp, #0]
 80018b2:	4623      	mov	r3, r4
 80018b4:	aa02      	add	r2, sp, #8
 80018b6:	21d5      	movs	r1, #213	@ 0xd5
 80018b8:	4628      	mov	r0, r5
 80018ba:	f000 fe7d 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *accz=ACCread[0];
 80018be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80018c2:	8033      	strh	r3, [r6, #0]

	   ACCcmd[0]=0x2d;
 80018c4:	232d      	movs	r3, #45	@ 0x2d
 80018c6:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80018ca:	9400      	str	r4, [sp, #0]
 80018cc:	4623      	mov	r3, r4
 80018ce:	aa03      	add	r2, sp, #12
 80018d0:	21d4      	movs	r1, #212	@ 0xd4
 80018d2:	4628      	mov	r0, r5
 80018d4:	f000 fdb2 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 80018d8:	9400      	str	r4, [sp, #0]
 80018da:	4623      	mov	r3, r4
 80018dc:	aa02      	add	r2, sp, #8
 80018de:	21d5      	movs	r1, #213	@ 0xd5
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 fe69 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *accz|=((ACCread[0])<<8);
 80018e6:	f9b6 3000 	ldrsh.w	r3, [r6]
 80018ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80018ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018f2:	8033      	strh	r3, [r6, #0]

	   *accx=*accx/16;
 80018f4:	f9b8 3000 	ldrsh.w	r3, [r8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db11      	blt.n	8001920 <getAxisAccelerometer+0x148>
 80018fc:	111b      	asrs	r3, r3, #4
 80018fe:	f8a8 3000 	strh.w	r3, [r8]
	   *accy=*accy/16;
 8001902:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0c      	blt.n	8001924 <getAxisAccelerometer+0x14c>
 800190a:	111b      	asrs	r3, r3, #4
 800190c:	803b      	strh	r3, [r7, #0]
	   *accz=*accz/16;
 800190e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db08      	blt.n	8001928 <getAxisAccelerometer+0x150>
 8001916:	111b      	asrs	r3, r3, #4
 8001918:	8033      	strh	r3, [r6, #0]



}
 800191a:	b004      	add	sp, #16
 800191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *accx=*accx/16;
 8001920:	330f      	adds	r3, #15
 8001922:	e7eb      	b.n	80018fc <getAxisAccelerometer+0x124>
	   *accy=*accy/16;
 8001924:	330f      	adds	r3, #15
 8001926:	e7f0      	b.n	800190a <getAxisAccelerometer+0x132>
	   *accz=*accz/16;
 8001928:	330f      	adds	r3, #15
 800192a:	e7f4      	b.n	8001916 <getAxisAccelerometer+0x13e>
 800192c:	20000644 	.word	0x20000644

08001930 <init_magnetometer>:
	counter++;
	}
	return counter;
}

void init_magnetometer(){
 8001930:	b500      	push	{lr}
 8001932:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x3c;
	 uint8_t turnOn[]={0x22,0x00};
 8001934:	2322      	movs	r3, #34	@ 0x22
 8001936:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 800193a:	2301      	movs	r3, #1
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2302      	movs	r3, #2
 8001940:	aa03      	add	r2, sp, #12
 8001942:	213c      	movs	r1, #60	@ 0x3c
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <init_magnetometer+0x20>)
 8001946:	f000 fd79 	bl	800243c <HAL_I2C_Master_Transmit>


}
 800194a:	b005      	add	sp, #20
 800194c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001950:	20000644 	.word	0x20000644

08001954 <getAxisMagnetometer>:


void getAxisMagnetometer(int16_t *magx, int16_t *magy, int16_t *magz){
 8001954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	4680      	mov	r8, r0
 800195c:	460f      	mov	r7, r1
 800195e:	4616      	mov	r6, r2

	 uint8_t MAGcmd[1];
	 uint8_t MAGread[1];

	   //MAG X
	   MAGcmd[0]=0x28;
 8001960:	2328      	movs	r3, #40	@ 0x28
 8001962:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001966:	4d50      	ldr	r5, [pc, #320]	@ (8001aa8 <getAxisMagnetometer+0x154>)
 8001968:	2401      	movs	r4, #1
 800196a:	9400      	str	r4, [sp, #0]
 800196c:	4623      	mov	r3, r4
 800196e:	aa03      	add	r2, sp, #12
 8001970:	213c      	movs	r1, #60	@ 0x3c
 8001972:	4628      	mov	r0, r5
 8001974:	f000 fd62 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001978:	9400      	str	r4, [sp, #0]
 800197a:	4623      	mov	r3, r4
 800197c:	aa02      	add	r2, sp, #8
 800197e:	213d      	movs	r1, #61	@ 0x3d
 8001980:	4628      	mov	r0, r5
 8001982:	f000 fe19 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *magx=MAGread[0];
 8001986:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800198a:	f8a8 3000 	strh.w	r3, [r8]

	   MAGcmd[0]=0x29;
 800198e:	2329      	movs	r3, #41	@ 0x29
 8001990:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001994:	9400      	str	r4, [sp, #0]
 8001996:	4623      	mov	r3, r4
 8001998:	aa03      	add	r2, sp, #12
 800199a:	213c      	movs	r1, #60	@ 0x3c
 800199c:	4628      	mov	r0, r5
 800199e:	f000 fd4d 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80019a2:	9400      	str	r4, [sp, #0]
 80019a4:	4623      	mov	r3, r4
 80019a6:	aa02      	add	r2, sp, #8
 80019a8:	213d      	movs	r1, #61	@ 0x3d
 80019aa:	4628      	mov	r0, r5
 80019ac:	f000 fe04 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *magx|=((MAGread[0])<<8);
 80019b0:	f9b8 3000 	ldrsh.w	r3, [r8]
 80019b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80019b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019bc:	f8a8 3000 	strh.w	r3, [r8]

	   //MAG Y
	   MAGcmd[0]=0x2a;
 80019c0:	232a      	movs	r3, #42	@ 0x2a
 80019c2:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80019c6:	9400      	str	r4, [sp, #0]
 80019c8:	4623      	mov	r3, r4
 80019ca:	aa03      	add	r2, sp, #12
 80019cc:	213c      	movs	r1, #60	@ 0x3c
 80019ce:	4628      	mov	r0, r5
 80019d0:	f000 fd34 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80019d4:	9400      	str	r4, [sp, #0]
 80019d6:	4623      	mov	r3, r4
 80019d8:	aa02      	add	r2, sp, #8
 80019da:	213d      	movs	r1, #61	@ 0x3d
 80019dc:	4628      	mov	r0, r5
 80019de:	f000 fdeb 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *magy=MAGread[0];
 80019e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80019e6:	803b      	strh	r3, [r7, #0]

	   MAGcmd[0]=0x2b;
 80019e8:	232b      	movs	r3, #43	@ 0x2b
 80019ea:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80019ee:	9400      	str	r4, [sp, #0]
 80019f0:	4623      	mov	r3, r4
 80019f2:	aa03      	add	r2, sp, #12
 80019f4:	213c      	movs	r1, #60	@ 0x3c
 80019f6:	4628      	mov	r0, r5
 80019f8:	f000 fd20 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80019fc:	9400      	str	r4, [sp, #0]
 80019fe:	4623      	mov	r3, r4
 8001a00:	aa02      	add	r2, sp, #8
 8001a02:	213d      	movs	r1, #61	@ 0x3d
 8001a04:	4628      	mov	r0, r5
 8001a06:	f000 fdd7 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *magy|=((MAGread[0])<<8);
 8001a0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a0e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001a12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a16:	803b      	strh	r3, [r7, #0]

	   //MAG Z
	   MAGcmd[0]=0x2c;
 8001a18:	232c      	movs	r3, #44	@ 0x2c
 8001a1a:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001a1e:	9400      	str	r4, [sp, #0]
 8001a20:	4623      	mov	r3, r4
 8001a22:	aa03      	add	r2, sp, #12
 8001a24:	213c      	movs	r1, #60	@ 0x3c
 8001a26:	4628      	mov	r0, r5
 8001a28:	f000 fd08 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001a2c:	9400      	str	r4, [sp, #0]
 8001a2e:	4623      	mov	r3, r4
 8001a30:	aa02      	add	r2, sp, #8
 8001a32:	213d      	movs	r1, #61	@ 0x3d
 8001a34:	4628      	mov	r0, r5
 8001a36:	f000 fdbf 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *magz=MAGread[0];
 8001a3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001a3e:	8033      	strh	r3, [r6, #0]

	   MAGcmd[0]=0x2d;
 8001a40:	232d      	movs	r3, #45	@ 0x2d
 8001a42:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001a46:	9400      	str	r4, [sp, #0]
 8001a48:	4623      	mov	r3, r4
 8001a4a:	aa03      	add	r2, sp, #12
 8001a4c:	213c      	movs	r1, #60	@ 0x3c
 8001a4e:	4628      	mov	r0, r5
 8001a50:	f000 fcf4 	bl	800243c <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001a54:	9400      	str	r4, [sp, #0]
 8001a56:	4623      	mov	r3, r4
 8001a58:	aa02      	add	r2, sp, #8
 8001a5a:	213d      	movs	r1, #61	@ 0x3d
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f000 fdab 	bl	80025b8 <HAL_I2C_Master_Receive>
	   *magz|=((MAGread[0])<<8);
 8001a62:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001a66:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a6e:	8033      	strh	r3, [r6, #0]

	   *magx=*magx/8;
 8001a70:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db11      	blt.n	8001a9c <getAxisMagnetometer+0x148>
 8001a78:	10db      	asrs	r3, r3, #3
 8001a7a:	f8a8 3000 	strh.w	r3, [r8]
	   *magy=*magy/8;
 8001a7e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0c      	blt.n	8001aa0 <getAxisMagnetometer+0x14c>
 8001a86:	10db      	asrs	r3, r3, #3
 8001a88:	803b      	strh	r3, [r7, #0]
	   *magz=*magz/8;
 8001a8a:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db08      	blt.n	8001aa4 <getAxisMagnetometer+0x150>
 8001a92:	10db      	asrs	r3, r3, #3
 8001a94:	8033      	strh	r3, [r6, #0]



}
 8001a96:	b004      	add	sp, #16
 8001a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *magx=*magx/8;
 8001a9c:	3307      	adds	r3, #7
 8001a9e:	e7eb      	b.n	8001a78 <getAxisMagnetometer+0x124>
	   *magy=*magy/8;
 8001aa0:	3307      	adds	r3, #7
 8001aa2:	e7f0      	b.n	8001a86 <getAxisMagnetometer+0x132>
	   *magz=*magz/8;
 8001aa4:	3307      	adds	r3, #7
 8001aa6:	e7f4      	b.n	8001a92 <getAxisMagnetometer+0x13e>
 8001aa8:	20000644 	.word	0x20000644

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_MspInit+0x2c>)
 8001ab0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60
 8001ab8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aba:	f002 0201 	and.w	r2, r2, #1
 8001abe:	9200      	str	r2, [sp, #0]
 8001ac0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ac4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ac8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad4:	b002      	add	sp, #8
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001adc:	b510      	push	{r4, lr}
 8001ade:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9303      	str	r3, [sp, #12]
 8001ae4:	9304      	str	r3, [sp, #16]
 8001ae6:	9305      	str	r3, [sp, #20]
 8001ae8:	9306      	str	r3, [sp, #24]
 8001aea:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8001aec:	6802      	ldr	r2, [r0, #0]
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_I2C_MspInit+0x64>)
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001af4:	b008      	add	sp, #32
 8001af6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af8:	4c12      	ldr	r4, [pc, #72]	@ (8001b44 <HAL_I2C_MspInit+0x68>)
 8001afa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001b02:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b0c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b12:	2312      	movs	r3, #18
 8001b14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	a903      	add	r1, sp, #12
 8001b24:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <HAL_I2C_MspInit+0x6c>)
 8001b26:	f000 f9e3 	bl	8001ef0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b30:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001b32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	9b02      	ldr	r3, [sp, #8]
}
 8001b3c:	e7da      	b.n	8001af4 <HAL_I2C_MspInit+0x18>
 8001b3e:	bf00      	nop
 8001b40:	40005800 	.word	0x40005800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	48000400 	.word	0x48000400

08001b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b4c:	b500      	push	{lr}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	2300      	movs	r3, #0
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	9304      	str	r3, [sp, #16]
 8001b56:	9305      	str	r3, [sp, #20]
 8001b58:	9306      	str	r3, [sp, #24]
 8001b5a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8001b5c:	6802      	ldr	r2, [r0, #0]
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_SPI_MspInit+0x64>)
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d002      	beq.n	8001b6a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b64:	b009      	add	sp, #36	@ 0x24
 8001b66:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b6a:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 8001b6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b74:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b78:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8001b7c:	9201      	str	r2, [sp, #4]
 8001b7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b82:	f042 0204 	orr.w	r2, r2, #4
 8001b86:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b92:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	a903      	add	r1, sp, #12
 8001ba6:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <HAL_SPI_MspInit+0x68>)
 8001ba8:	f000 f9a2 	bl	8001ef0 <HAL_GPIO_Init>
}
 8001bac:	e7da      	b.n	8001b64 <HAL_SPI_MspInit+0x18>
 8001bae:	bf00      	nop
 8001bb0:	40003c00 	.word	0x40003c00
 8001bb4:	48000800 	.word	0x48000800

08001bb8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8001bb8:	6802      	ldr	r2, [r0, #0]
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d000      	beq.n	8001bc2 <HAL_TIM_Base_MspInit+0xa>
 8001bc0:	4770      	bx	lr
{
 8001bc2:	b500      	push	{lr}
 8001bc4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bc6:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001bca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bcc:	f042 0210 	orr.w	r2, r2, #16
 8001bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4611      	mov	r1, r2
 8001be0:	2036      	movs	r0, #54	@ 0x36
 8001be2:	f000 f95d 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001be6:	2036      	movs	r0, #54	@ 0x36
 8001be8:	f000 f96a 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001bec:	b003      	add	sp, #12
 8001bee:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bf2:	bf00      	nop
 8001bf4:	40001000 	.word	0x40001000

08001bf8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM15)
 8001bf8:	6802      	ldr	r2, [r0, #0]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_TIM_PWM_MspInit+0x28>)
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d000      	beq.n	8001c02 <HAL_TIM_PWM_MspInit+0xa>
 8001c00:	4770      	bx	lr
{
 8001c02:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c04:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 8001c08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c0e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001c1a:	b002      	add	sp, #8
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40014000 	.word	0x40014000

08001c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c24:	b500      	push	{lr}
 8001c26:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	9303      	str	r3, [sp, #12]
 8001c30:	9304      	str	r3, [sp, #16]
 8001c32:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM15)
 8001c34:	6802      	ldr	r2, [r0, #0]
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_TIM_MspPostInit+0x4c>)
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d002      	beq.n	8001c42 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001c3c:	b007      	add	sp, #28
 8001c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 8001c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c48:	f042 0202 	orr.w	r2, r2, #2
 8001c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c5c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001c62:	230e      	movs	r3, #14
 8001c64:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	a901      	add	r1, sp, #4
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <HAL_TIM_MspPostInit+0x50>)
 8001c6a:	f000 f941 	bl	8001ef0 <HAL_GPIO_Init>
}
 8001c6e:	e7e5      	b.n	8001c3c <HAL_TIM_MspPostInit+0x18>
 8001c70:	40014000 	.word	0x40014000
 8001c74:	48000400 	.word	0x48000400

08001c78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler>

08001c7a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler>

08001c7c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler>

08001c7e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <BusFault_Handler>

08001c80 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler>

08001c82 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c82:	4770      	bx	lr

08001c84 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8a:	f000 f88f 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8e:	bd08      	pop	{r3, pc}

08001c90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataAvailable=1;
 8001c92:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <EXTI9_5_IRQHandler+0x10>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c98:	2040      	movs	r0, #64	@ 0x40
 8001c9a:	f000 fa23 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c9e:	bd08      	pop	{r3, pc}
 8001ca0:	2000072c 	.word	0x2000072c

08001ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
update=1;
 8001ca6:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <TIM6_DAC_IRQHandler+0x10>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <TIM6_DAC_IRQHandler+0x14>)
 8001cae:	f002 fb38 	bl	8004322 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cb2:	bd08      	pop	{r3, pc}
 8001cb4:	20000728 	.word	0x20000728
 8001cb8:	20000690 	.word	0x20000690

08001cbc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001cbc:	b508      	push	{r3, lr}
 8001cbe:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <_sbrk+0x34>)
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	b142      	cbz	r2, 8001cd8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <_sbrk+0x34>)
 8001cc8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001cca:	4403      	add	r3, r0
 8001ccc:	466a      	mov	r2, sp
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d806      	bhi.n	8001ce0 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001cd2:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <_sbrk+0x34>)
 8001cd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001cd6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001cd8:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <_sbrk+0x34>)
 8001cda:	4906      	ldr	r1, [pc, #24]	@ (8001cf4 <_sbrk+0x38>)
 8001cdc:	6011      	str	r1, [r2, #0]
 8001cde:	e7f2      	b.n	8001cc6 <_sbrk+0xa>
		errno = ENOMEM;
 8001ce0:	f002 ffe6 	bl	8004cb0 <__errno>
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	e7f3      	b.n	8001cd6 <_sbrk+0x1a>
 8001cee:	bf00      	nop
 8001cf0:	2000074c 	.word	0x2000074c
 8001cf4:	200008a0 	.word	0x200008a0

08001cf8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	490f      	ldr	r1, [pc, #60]	@ (8001d38 <SystemInit+0x40>)
 8001cfa:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001cfe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d06:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <SystemInit+0x44>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d10:	2000      	movs	r0, #0
 8001d12:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 8001d1a:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d2c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d2e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001d34:	608b      	str	r3, [r1, #8]
#endif
}
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <HAL_InitTick+0x44>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b90b      	cbnz	r3, 8001d4a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d46:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001d48:	4770      	bx	lr
{
 8001d4a:	b510      	push	{r4, lr}
 8001d4c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <HAL_InitTick+0x48>)
 8001d58:	6810      	ldr	r0, [r2, #0]
 8001d5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d5e:	f000 f8b3 	bl	8001ec8 <HAL_SYSTICK_Config>
 8001d62:	b968      	cbnz	r0, 8001d80 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d64:	2c0f      	cmp	r4, #15
 8001d66:	d901      	bls.n	8001d6c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001d68:	2001      	movs	r0, #1
 8001d6a:	e00a      	b.n	8001d82 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4621      	mov	r1, r4
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f000 f894 	bl	8001ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d78:	4b02      	ldr	r3, [pc, #8]	@ (8001d84 <HAL_InitTick+0x44>)
 8001d7a:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	e000      	b.n	8001d82 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
}
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	200003f4 	.word	0x200003f4
 8001d88:	200003f0 	.word	0x200003f0

08001d8c <HAL_Init>:
{
 8001d8c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f000 f874 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ffd3 	bl	8001d40 <HAL_InitTick>
 8001d9a:	b110      	cbz	r0, 8001da2 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001d9c:	2401      	movs	r4, #1
}
 8001d9e:	4620      	mov	r0, r4
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	4604      	mov	r4, r0
    HAL_MspInit();
 8001da4:	f7ff fe82 	bl	8001aac <HAL_MspInit>
 8001da8:	e7f9      	b.n	8001d9e <HAL_Init+0x12>
	...

08001dac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <HAL_IncTick+0x10>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4a03      	ldr	r2, [pc, #12]	@ (8001dc0 <HAL_IncTick+0x14>)
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	440b      	add	r3, r1
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	200003f4 	.word	0x200003f4
 8001dc0:	20000754 	.word	0x20000754

08001dc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dc4:	4b01      	ldr	r3, [pc, #4]	@ (8001dcc <HAL_GetTick+0x8>)
 8001dc6:	6818      	ldr	r0, [r3, #0]
}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000754 	.word	0x20000754

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fff6 	bl	8001dc4 <HAL_GetTick>
 8001dd8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dda:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001dde:	d002      	beq.n	8001de6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <HAL_Delay+0x24>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de6:	f7ff ffed 	bl	8001dc4 <HAL_GetTick>
 8001dea:	1b40      	subs	r0, r0, r5
 8001dec:	42a0      	cmp	r0, r4
 8001dee:	d3fa      	bcc.n	8001de6 <HAL_Delay+0x16>
  {
  }
}
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
 8001df2:	bf00      	nop
 8001df4:	200003f4 	.word	0x200003f4

08001df8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	db07      	blt.n	8001e0c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfc:	f000 021f 	and.w	r2, r0, #31
 8001e00:	0940      	lsrs	r0, r0, #5
 8001e02:	2301      	movs	r3, #1
 8001e04:	4093      	lsls	r3, r2
 8001e06:	4a02      	ldr	r2, [pc, #8]	@ (8001e10 <__NVIC_EnableIRQ+0x18>)
 8001e08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001e14:	2800      	cmp	r0, #0
 8001e16:	db08      	blt.n	8001e2a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	0109      	lsls	r1, r1, #4
 8001e1a:	b2c9      	uxtb	r1, r1
 8001e1c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001e20:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001e24:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001e28:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	f000 000f 	and.w	r0, r0, #15
 8001e2e:	0109      	lsls	r1, r1, #4
 8001e30:	b2c9      	uxtb	r1, r1
 8001e32:	4b01      	ldr	r3, [pc, #4]	@ (8001e38 <__NVIC_SetPriority+0x24>)
 8001e34:	5419      	strb	r1, [r3, r0]
  }
}
 8001e36:	4770      	bx	lr
 8001e38:	e000ed14 	.word	0xe000ed14

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e42:	f1c0 0c07 	rsb	ip, r0, #7
 8001e46:	f1bc 0f04 	cmp.w	ip, #4
 8001e4a:	bf28      	it	cs
 8001e4c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e50:	1d03      	adds	r3, r0, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d90f      	bls.n	8001e76 <NVIC_EncodePriority+0x3a>
 8001e56:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 3eff 	mov.w	lr, #4294967295
 8001e5c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001e60:	ea21 0100 	bic.w	r1, r1, r0
 8001e64:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e66:	fa0e fe03 	lsl.w	lr, lr, r3
 8001e6a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001e6e:	ea41 0002 	orr.w	r0, r1, r2
 8001e72:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	2300      	movs	r3, #0
 8001e78:	e7ee      	b.n	8001e58 <NVIC_EncodePriority+0x1c>
	...

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e7e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e88:	0200      	lsls	r0, r0, #8
 8001e8a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001e98:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_NVIC_SetPriority+0x1c>)
 8001ea6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001eac:	f7ff ffc6 	bl	8001e3c <NVIC_EncodePriority>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7ff ffae 	bl	8001e14 <__NVIC_SetPriority>
}
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec2:	f7ff ff99 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001ec6:	bd08      	pop	{r3, pc}

08001ec8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	3801      	subs	r0, #1
 8001eca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001ece:	d20b      	bcs.n	8001ee8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001ed4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <HAL_SYSTICK_Config+0x24>)
 8001ed8:	21f0      	movs	r1, #240	@ 0xf0
 8001eda:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ede:	2000      	movs	r0, #0
 8001ee0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ee8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001ef4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	e03f      	b.n	8001f78 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ef8:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001efa:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001efe:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8001f02:	409c      	lsls	r4, r3
 8001f04:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8001f06:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8001f08:	e062      	b.n	8001fd0 <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f0a:	2406      	movs	r4, #6
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x20>
 8001f0e:	2400      	movs	r4, #0
 8001f10:	40b4      	lsls	r4, r6
 8001f12:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f14:	3502      	adds	r5, #2
 8001f16:	4e68      	ldr	r6, [pc, #416]	@ (80020b8 <HAL_GPIO_Init+0x1c8>)
 8001f18:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1c:	4c67      	ldr	r4, [pc, #412]	@ (80020bc <HAL_GPIO_Init+0x1cc>)
 8001f1e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001f20:	43d4      	mvns	r4, r2
 8001f22:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f26:	684f      	ldr	r7, [r1, #4]
 8001f28:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8001f2c:	d001      	beq.n	8001f32 <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8001f2e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001f32:	4d62      	ldr	r5, [pc, #392]	@ (80020bc <HAL_GPIO_Init+0x1cc>)
 8001f34:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001f36:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001f38:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3c:	684f      	ldr	r7, [r1, #4]
 8001f3e:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8001f42:	d001      	beq.n	8001f48 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8001f44:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001f48:	4d5c      	ldr	r5, [pc, #368]	@ (80020bc <HAL_GPIO_Init+0x1cc>)
 8001f4a:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4c:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001f4e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f52:	684f      	ldr	r7, [r1, #4]
 8001f54:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8001f58:	d001      	beq.n	8001f5e <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8001f5a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001f5e:	4d57      	ldr	r5, [pc, #348]	@ (80020bc <HAL_GPIO_Init+0x1cc>)
 8001f60:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001f62:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001f64:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f66:	684e      	ldr	r6, [r1, #4]
 8001f68:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001f6c:	d001      	beq.n	8001f72 <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8001f6e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001f72:	4a52      	ldr	r2, [pc, #328]	@ (80020bc <HAL_GPIO_Init+0x1cc>)
 8001f74:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001f76:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f78:	680a      	ldr	r2, [r1, #0]
 8001f7a:	fa32 f403 	lsrs.w	r4, r2, r3
 8001f7e:	f000 8098 	beq.w	80020b2 <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f82:	f04f 0c01 	mov.w	ip, #1
 8001f86:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001f8a:	ea1c 0202 	ands.w	r2, ip, r2
 8001f8e:	d0f2      	beq.n	8001f76 <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f90:	684c      	ldr	r4, [r1, #4]
 8001f92:	1e65      	subs	r5, r4, #1
 8001f94:	2d01      	cmp	r5, #1
 8001f96:	d903      	bls.n	8001fa0 <HAL_GPIO_Init+0xb0>
 8001f98:	2c11      	cmp	r4, #17
 8001f9a:	d001      	beq.n	8001fa0 <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9c:	2c12      	cmp	r4, #18
 8001f9e:	d112      	bne.n	8001fc6 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8001fa0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fa2:	005e      	lsls	r6, r3, #1
 8001fa4:	2403      	movs	r4, #3
 8001fa6:	40b4      	lsls	r4, r6
 8001fa8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fac:	68cc      	ldr	r4, [r1, #12]
 8001fae:	40b4      	lsls	r4, r6
 8001fb0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001fb2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001fb4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fb6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fba:	684c      	ldr	r4, [r1, #4]
 8001fbc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001fc0:	409c      	lsls	r4, r3
 8001fc2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001fc4:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fc6:	684c      	ldr	r4, [r1, #4]
 8001fc8:	f004 0503 	and.w	r5, r4, #3
 8001fcc:	2d03      	cmp	r5, #3
 8001fce:	d093      	beq.n	8001ef8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8001fd0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fd2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001fd6:	2403      	movs	r4, #3
 8001fd8:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fdc:	ea6f 0c04 	mvn.w	ip, r4
 8001fe0:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fe4:	688c      	ldr	r4, [r1, #8]
 8001fe6:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001fec:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fee:	684c      	ldr	r4, [r1, #4]
 8001ff0:	2c02      	cmp	r4, #2
 8001ff2:	d001      	beq.n	8001ff8 <HAL_GPIO_Init+0x108>
 8001ff4:	2c12      	cmp	r4, #18
 8001ff6:	d10f      	bne.n	8002018 <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 8001ff8:	08dd      	lsrs	r5, r3, #3
 8001ffa:	3508      	adds	r5, #8
 8001ffc:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002000:	f003 0607 	and.w	r6, r3, #7
 8002004:	00b6      	lsls	r6, r6, #2
 8002006:	240f      	movs	r4, #15
 8002008:	40b4      	lsls	r4, r6
 800200a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800200e:	690c      	ldr	r4, [r1, #16]
 8002010:	40b4      	lsls	r4, r6
 8002012:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8002014:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8002018:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800201a:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800201e:	684c      	ldr	r4, [r1, #4]
 8002020:	f004 0403 	and.w	r4, r4, #3
 8002024:	fa04 f40e 	lsl.w	r4, r4, lr
 8002028:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800202c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202e:	684c      	ldr	r4, [r1, #4]
 8002030:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8002034:	d09f      	beq.n	8001f76 <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	4c22      	ldr	r4, [pc, #136]	@ (80020c0 <HAL_GPIO_Init+0x1d0>)
 8002038:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800203a:	f045 0501 	orr.w	r5, r5, #1
 800203e:	6625      	str	r5, [r4, #96]	@ 0x60
 8002040:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8002042:	f004 0401 	and.w	r4, r4, #1
 8002046:	9401      	str	r4, [sp, #4]
 8002048:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800204a:	089d      	lsrs	r5, r3, #2
 800204c:	1cae      	adds	r6, r5, #2
 800204e:	4c1a      	ldr	r4, [pc, #104]	@ (80020b8 <HAL_GPIO_Init+0x1c8>)
 8002050:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002054:	f003 0603 	and.w	r6, r3, #3
 8002058:	00b6      	lsls	r6, r6, #2
 800205a:	240f      	movs	r4, #15
 800205c:	40b4      	lsls	r4, r6
 800205e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002062:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8002066:	f43f af52 	beq.w	8001f0e <HAL_GPIO_Init+0x1e>
 800206a:	4c16      	ldr	r4, [pc, #88]	@ (80020c4 <HAL_GPIO_Init+0x1d4>)
 800206c:	42a0      	cmp	r0, r4
 800206e:	d016      	beq.n	800209e <HAL_GPIO_Init+0x1ae>
 8002070:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002074:	42a0      	cmp	r0, r4
 8002076:	d014      	beq.n	80020a2 <HAL_GPIO_Init+0x1b2>
 8002078:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800207c:	42a0      	cmp	r0, r4
 800207e:	d012      	beq.n	80020a6 <HAL_GPIO_Init+0x1b6>
 8002080:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002084:	42a0      	cmp	r0, r4
 8002086:	d010      	beq.n	80020aa <HAL_GPIO_Init+0x1ba>
 8002088:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800208c:	42a0      	cmp	r0, r4
 800208e:	d00e      	beq.n	80020ae <HAL_GPIO_Init+0x1be>
 8002090:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002094:	42a0      	cmp	r0, r4
 8002096:	f43f af38 	beq.w	8001f0a <HAL_GPIO_Init+0x1a>
 800209a:	2407      	movs	r4, #7
 800209c:	e738      	b.n	8001f10 <HAL_GPIO_Init+0x20>
 800209e:	2401      	movs	r4, #1
 80020a0:	e736      	b.n	8001f10 <HAL_GPIO_Init+0x20>
 80020a2:	2402      	movs	r4, #2
 80020a4:	e734      	b.n	8001f10 <HAL_GPIO_Init+0x20>
 80020a6:	2403      	movs	r4, #3
 80020a8:	e732      	b.n	8001f10 <HAL_GPIO_Init+0x20>
 80020aa:	2404      	movs	r4, #4
 80020ac:	e730      	b.n	8001f10 <HAL_GPIO_Init+0x20>
 80020ae:	2405      	movs	r4, #5
 80020b0:	e72e      	b.n	8001f10 <HAL_GPIO_Init+0x20>
  }
}
 80020b2:	b003      	add	sp, #12
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40010400 	.word	0x40010400
 80020c0:	40021000 	.word	0x40021000
 80020c4:	48000400 	.word	0x48000400

080020c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020c8:	6903      	ldr	r3, [r0, #16]
 80020ca:	4219      	tst	r1, r3
 80020cc:	d001      	beq.n	80020d2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80020ce:	2001      	movs	r0, #1
 80020d0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80020d4:	4770      	bx	lr

080020d6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d6:	b10a      	cbz	r2, 80020dc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020d8:	6181      	str	r1, [r0, #24]
 80020da:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020dc:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80020de:	4770      	bx	lr

080020e0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80020e4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020e6:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4203      	tst	r3, r0
 80020ec:	d100      	bne.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80020ee:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f0:	4b02      	ldr	r3, [pc, #8]	@ (80020fc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f4:	f7ff fff4 	bl	80020e0 <HAL_GPIO_EXTI_Callback>
}
 80020f8:	e7f9      	b.n	80020ee <HAL_GPIO_EXTI_IRQHandler+0xa>
 80020fa:	bf00      	nop
 80020fc:	40010400 	.word	0x40010400

08002100 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002100:	6803      	ldr	r3, [r0, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	f012 0f02 	tst.w	r2, #2
 8002108:	d001      	beq.n	800210e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800210e:	6803      	ldr	r3, [r0, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	f012 0f01 	tst.w	r2, #1
 8002116:	d103      	bne.n	8002120 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	619a      	str	r2, [r3, #24]
  }
}
 8002120:	4770      	bx	lr

08002122 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002122:	b430      	push	{r4, r5}
 8002124:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002126:	6804      	ldr	r4, [r0, #0]
 8002128:	6860      	ldr	r0, [r4, #4]
 800212a:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 800212e:	f40c 6c80 	and.w	ip, ip, #1024	@ 0x400
 8002132:	f04c 7c7f 	orr.w	ip, ip, #66846720	@ 0x3fc0000
 8002136:	f44c 3c58 	orr.w	ip, ip, #221184	@ 0x36000
 800213a:	f44c 7c7f 	orr.w	ip, ip, #1020	@ 0x3fc
 800213e:	f04c 0c03 	orr.w	ip, ip, #3
 8002142:	ea20 000c 	bic.w	r0, r0, ip
 8002146:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800214a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800214e:	4319      	orrs	r1, r3
 8002150:	4329      	orrs	r1, r5
 8002152:	4308      	orrs	r0, r1
 8002154:	6060      	str	r0, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002156:	bc30      	pop	{r4, r5}
 8002158:	4770      	bx	lr

0800215a <I2C_IsAcknowledgeFailed>:
{
 800215a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215c:	4605      	mov	r5, r0
 800215e:	460e      	mov	r6, r1
 8002160:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002162:	6803      	ldr	r3, [r0, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f013 0f10 	tst.w	r3, #16
 800216a:	d101      	bne.n	8002170 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 800216c:	2000      	movs	r0, #0
}
 800216e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	699c      	ldr	r4, [r3, #24]
 8002174:	f014 0f20 	tst.w	r4, #32
 8002178:	d117      	bne.n	80021aa <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 800217a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800217e:	d0f7      	beq.n	8002170 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002180:	f7ff fe20 	bl	8001dc4 <HAL_GetTick>
 8002184:	1bc0      	subs	r0, r0, r7
 8002186:	42b0      	cmp	r0, r6
 8002188:	d801      	bhi.n	800218e <I2C_IsAcknowledgeFailed+0x34>
 800218a:	2e00      	cmp	r6, #0
 800218c:	d1f0      	bne.n	8002170 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002190:	f043 0320 	orr.w	r3, r3, #32
 8002194:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002196:	2320      	movs	r3, #32
 8002198:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	2300      	movs	r3, #0
 800219e:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80021a2:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80021a6:	2001      	movs	r0, #1
 80021a8:	e7e1      	b.n	800216e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	2210      	movs	r2, #16
 80021ac:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ae:	682b      	ldr	r3, [r5, #0]
 80021b0:	2420      	movs	r4, #32
 80021b2:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80021b4:	4628      	mov	r0, r5
 80021b6:	f7ff ffa3 	bl	8002100 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80021ba:	682a      	ldr	r2, [r5, #0]
 80021bc:	6853      	ldr	r3, [r2, #4]
 80021be:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80021c2:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80021c6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021d0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	f885 4041 	strb.w	r4, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80021e2:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    return HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
 80021e8:	e7c1      	b.n	800216e <I2C_IsAcknowledgeFailed+0x14>

080021ea <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80021ea:	b570      	push	{r4, r5, r6, lr}
 80021ec:	4604      	mov	r4, r0
 80021ee:	460d      	mov	r5, r1
 80021f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f013 0f02 	tst.w	r3, #2
 80021fa:	d11d      	bne.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fc:	4632      	mov	r2, r6
 80021fe:	4629      	mov	r1, r5
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff ffaa 	bl	800215a <I2C_IsAcknowledgeFailed>
 8002206:	b9c8      	cbnz	r0, 800223c <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002208:	f1b5 3fff 	cmp.w	r5, #4294967295
 800220c:	d0f1      	beq.n	80021f2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7ff fdd9 	bl	8001dc4 <HAL_GetTick>
 8002212:	1b80      	subs	r0, r0, r6
 8002214:	42a8      	cmp	r0, r5
 8002216:	d801      	bhi.n	800221c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002218:	2d00      	cmp	r5, #0
 800221a:	d1ea      	bne.n	80021f2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800221e:	f043 0320 	orr.w	r3, r3, #32
 8002222:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002224:	2320      	movs	r3, #32
 8002226:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800222a:	2300      	movs	r3, #0
 800222c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8002230:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
 8002236:	e000      	b.n	800223a <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002238:	2000      	movs	r0, #0
}
 800223a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e7fc      	b.n	800223a <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002240 <I2C_WaitOnFlagUntilTimeout>:
{
 8002240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002244:	4606      	mov	r6, r0
 8002246:	4688      	mov	r8, r1
 8002248:	4617      	mov	r7, r2
 800224a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800224c:	6834      	ldr	r4, [r6, #0]
 800224e:	69a4      	ldr	r4, [r4, #24]
 8002250:	ea38 0404 	bics.w	r4, r8, r4
 8002254:	bf0c      	ite	eq
 8002256:	2401      	moveq	r4, #1
 8002258:	2400      	movne	r4, #0
 800225a:	42bc      	cmp	r4, r7
 800225c:	d118      	bne.n	8002290 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800225e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002262:	d0f3      	beq.n	800224c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002264:	f7ff fdae 	bl	8001dc4 <HAL_GetTick>
 8002268:	9b06      	ldr	r3, [sp, #24]
 800226a:	1ac0      	subs	r0, r0, r3
 800226c:	42a8      	cmp	r0, r5
 800226e:	d801      	bhi.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x34>
 8002270:	2d00      	cmp	r5, #0
 8002272:	d1eb      	bne.n	800224c <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002274:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8002276:	f043 0320 	orr.w	r3, r3, #32
 800227a:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800227c:	2320      	movs	r3, #32
 800227e:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002282:	2300      	movs	r3, #0
 8002284:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8002288:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 800228c:	2001      	movs	r0, #1
 800228e:	e000      	b.n	8002292 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8002290:	2000      	movs	r0, #0
}
 8002292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002296 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	4605      	mov	r5, r0
 800229a:	460c      	mov	r4, r1
 800229c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800229e:	682b      	ldr	r3, [r5, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f013 0f20 	tst.w	r3, #32
 80022a6:	d11a      	bne.n	80022de <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a8:	4632      	mov	r2, r6
 80022aa:	4621      	mov	r1, r4
 80022ac:	4628      	mov	r0, r5
 80022ae:	f7ff ff54 	bl	800215a <I2C_IsAcknowledgeFailed>
 80022b2:	b9b0      	cbnz	r0, 80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b4:	f7ff fd86 	bl	8001dc4 <HAL_GetTick>
 80022b8:	1b80      	subs	r0, r0, r6
 80022ba:	42a0      	cmp	r0, r4
 80022bc:	d801      	bhi.n	80022c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80022be:	2c00      	cmp	r4, #0
 80022c0:	d1ed      	bne.n	800229e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	2320      	movs	r3, #32
 80022cc:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80022d6:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
}
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80022de:	2000      	movs	r0, #0
 80022e0:	e7fc      	b.n	80022dc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80022e2:	2001      	movs	r0, #1
 80022e4:	e7fa      	b.n	80022dc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080022e6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80022e6:	b570      	push	{r4, r5, r6, lr}
 80022e8:	4604      	mov	r4, r0
 80022ea:	460d      	mov	r5, r1
 80022ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f013 0f04 	tst.w	r3, #4
 80022f6:	d13e      	bne.n	8002376 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f8:	4632      	mov	r2, r6
 80022fa:	4629      	mov	r1, r5
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7ff ff2c 	bl	800215a <I2C_IsAcknowledgeFailed>
 8002302:	4601      	mov	r1, r0
 8002304:	2800      	cmp	r0, #0
 8002306:	d138      	bne.n	800237a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	f012 0f20 	tst.w	r2, #32
 8002310:	d113      	bne.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7ff fd57 	bl	8001dc4 <HAL_GetTick>
 8002316:	1b80      	subs	r0, r0, r6
 8002318:	42a8      	cmp	r0, r5
 800231a:	d801      	bhi.n	8002320 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800231c:	2d00      	cmp	r5, #0
 800231e:	d1e6      	bne.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002320:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002322:	f043 0320 	orr.w	r3, r3, #32
 8002326:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002328:	2320      	movs	r3, #32
 800232a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      __HAL_UNLOCK(hi2c);
 800232e:	2300      	movs	r3, #0
 8002330:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002334:	2101      	movs	r1, #1
}
 8002336:	4608      	mov	r0, r1
 8002338:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	f012 0f04 	tst.w	r2, #4
 8002340:	d002      	beq.n	8002348 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002342:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8002344:	2a00      	cmp	r2, #0
 8002346:	d1f6      	bne.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002348:	2220      	movs	r2, #32
 800234a:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800234c:	6821      	ldr	r1, [r4, #0]
 800234e:	684b      	ldr	r3, [r1, #4]
 8002350:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002354:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8002358:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002362:	2300      	movs	r3, #0
 8002364:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002366:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800236a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800236e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8002372:	2101      	movs	r1, #1
 8002374:	e7df      	b.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8002376:	2100      	movs	r1, #0
 8002378:	e7dd      	b.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 800237a:	2101      	movs	r1, #1
 800237c:	e7db      	b.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

0800237e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800237e:	2800      	cmp	r0, #0
 8002380:	d059      	beq.n	8002436 <HAL_I2C_Init+0xb8>
{
 8002382:	b510      	push	{r4, lr}
 8002384:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800238a:	2b00      	cmp	r3, #0
 800238c:	d043      	beq.n	8002416 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800238e:	2324      	movs	r3, #36	@ 0x24
 8002390:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800239e:	6863      	ldr	r3, [r4, #4]
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80023a6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	6893      	ldr	r3, [r2, #8]
 80023ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80023b0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b2:	68e3      	ldr	r3, [r4, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d033      	beq.n	8002420 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b8:	68a3      	ldr	r3, [r4, #8]
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80023c0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c2:	68e3      	ldr	r3, [r4, #12]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d031      	beq.n	800242c <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6853      	ldr	r3, [r2, #4]
 80023cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	68d3      	ldr	r3, [r2, #12]
 80023da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80023de:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023e0:	6923      	ldr	r3, [r4, #16]
 80023e2:	6962      	ldr	r2, [r4, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	69a1      	ldr	r1, [r4, #24]
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023ee:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023f0:	69e3      	ldr	r3, [r4, #28]
 80023f2:	6a21      	ldr	r1, [r4, #32]
 80023f4:	6822      	ldr	r2, [r4, #0]
 80023f6:	430b      	orrs	r3, r1
 80023f8:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80023fa:	6822      	ldr	r2, [r4, #0]
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	2000      	movs	r0, #0
 8002406:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002408:	2320      	movs	r3, #32
 800240a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800240e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8002414:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002416:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800241a:	f7ff fb5f 	bl	8001adc <HAL_I2C_MspInit>
 800241e:	e7b6      	b.n	800238e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002420:	68a3      	ldr	r3, [r4, #8]
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002428:	6093      	str	r3, [r2, #8]
 800242a:	e7ca      	b.n	80023c2 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	e7c8      	b.n	80023c8 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002436:	2001      	movs	r0, #1
}
 8002438:	4770      	bx	lr
	...

0800243c <HAL_I2C_Master_Transmit>:
{
 800243c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	460f      	mov	r7, r1
 8002444:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002446:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800244a:	b2c9      	uxtb	r1, r1
 800244c:	2920      	cmp	r1, #32
 800244e:	f040 80a3 	bne.w	8002598 <HAL_I2C_Master_Transmit+0x15c>
 8002452:	4604      	mov	r4, r0
 8002454:	4690      	mov	r8, r2
 8002456:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002458:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800245c:	2b01      	cmp	r3, #1
 800245e:	f000 809f 	beq.w	80025a0 <HAL_I2C_Master_Transmit+0x164>
 8002462:	f04f 0a01 	mov.w	sl, #1
 8002466:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800246a:	f7ff fcab 	bl	8001dc4 <HAL_GetTick>
 800246e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002470:	9000      	str	r0, [sp, #0]
 8002472:	2319      	movs	r3, #25
 8002474:	4652      	mov	r2, sl
 8002476:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800247a:	4620      	mov	r0, r4
 800247c:	f7ff fee0 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 8002480:	2800      	cmp	r0, #0
 8002482:	f040 808f 	bne.w	80025a4 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002486:	2321      	movs	r3, #33	@ 0x21
 8002488:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800248c:	2310      	movs	r3, #16
 800248e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002492:	2300      	movs	r3, #0
 8002494:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002496:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800249a:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800249e:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2bff      	cmp	r3, #255	@ 0xff
 80024a6:	d90a      	bls.n	80024be <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a8:	22ff      	movs	r2, #255	@ 0xff
 80024aa:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024ac:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <HAL_I2C_Master_Transmit+0x178>)
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024b4:	4639      	mov	r1, r7
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff fe33 	bl	8002122 <I2C_TransferConfig>
 80024bc:	e018      	b.n	80024f0 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80024be:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80024c0:	b292      	uxth	r2, r2
 80024c2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80024c4:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <HAL_I2C_Master_Transmit+0x178>)
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4639      	mov	r1, r7
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff fe26 	bl	8002122 <I2C_TransferConfig>
 80024d6:	e00b      	b.n	80024f0 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80024d8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80024da:	b292      	uxth	r2, r2
 80024dc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4639      	mov	r1, r7
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7ff fe19 	bl	8002122 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d033      	beq.n	8002560 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	462a      	mov	r2, r5
 80024fa:	4631      	mov	r1, r6
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff fe74 	bl	80021ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002502:	2800      	cmp	r0, #0
 8002504:	d150      	bne.n	80025a8 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002506:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800250e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002510:	3301      	adds	r3, #1
 8002512:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002514:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29b      	uxth	r3, r3
 800251c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800251e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002526:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002528:	b292      	uxth	r2, r2
 800252a:	2a00      	cmp	r2, #0
 800252c:	d0e0      	beq.n	80024f0 <HAL_I2C_Master_Transmit+0xb4>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1de      	bne.n	80024f0 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002532:	9500      	str	r5, [sp, #0]
 8002534:	4633      	mov	r3, r6
 8002536:	2200      	movs	r2, #0
 8002538:	2180      	movs	r1, #128	@ 0x80
 800253a:	4620      	mov	r0, r4
 800253c:	f7ff fe80 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 8002540:	bba0      	cbnz	r0, 80025ac <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002542:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2bff      	cmp	r3, #255	@ 0xff
 8002548:	d9c6      	bls.n	80024d8 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800254a:	22ff      	movs	r2, #255	@ 0xff
 800254c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800254e:	2300      	movs	r3, #0
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002556:	4639      	mov	r1, r7
 8002558:	4620      	mov	r0, r4
 800255a:	f7ff fde2 	bl	8002122 <I2C_TransferConfig>
 800255e:	e7c7      	b.n	80024f0 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002560:	462a      	mov	r2, r5
 8002562:	4631      	mov	r1, r6
 8002564:	4620      	mov	r0, r4
 8002566:	f7ff fe96 	bl	8002296 <I2C_WaitOnSTOPFlagUntilTimeout>
 800256a:	bb08      	cbnz	r0, 80025b0 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	2220      	movs	r2, #32
 8002570:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002572:	6821      	ldr	r1, [r4, #0]
 8002574:	684b      	ldr	r3, [r1, #4]
 8002576:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800257a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800257e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800258c:	2300      	movs	r3, #0
 800258e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002592:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8002596:	e000      	b.n	800259a <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8002598:	2002      	movs	r0, #2
}
 800259a:	b002      	add	sp, #8
 800259c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80025a0:	2002      	movs	r0, #2
 80025a2:	e7fa      	b.n	800259a <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
 80025a6:	e7f8      	b.n	800259a <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
 80025aa:	e7f6      	b.n	800259a <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 80025ac:	2001      	movs	r0, #1
 80025ae:	e7f4      	b.n	800259a <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
 80025b2:	e7f2      	b.n	800259a <HAL_I2C_Master_Transmit+0x15e>
 80025b4:	80002000 	.word	0x80002000

080025b8 <HAL_I2C_Master_Receive>:
{
 80025b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	460f      	mov	r7, r1
 80025c0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c2:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80025c6:	b2c9      	uxtb	r1, r1
 80025c8:	2920      	cmp	r1, #32
 80025ca:	f040 80a2 	bne.w	8002712 <HAL_I2C_Master_Receive+0x15a>
 80025ce:	4604      	mov	r4, r0
 80025d0:	4690      	mov	r8, r2
 80025d2:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80025d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f000 809e 	beq.w	800271a <HAL_I2C_Master_Receive+0x162>
 80025de:	f04f 0a01 	mov.w	sl, #1
 80025e2:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80025e6:	f7ff fbed 	bl	8001dc4 <HAL_GetTick>
 80025ea:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ec:	9000      	str	r0, [sp, #0]
 80025ee:	2319      	movs	r3, #25
 80025f0:	4652      	mov	r2, sl
 80025f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff fe22 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	f040 808e 	bne.w	800271e <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002602:	2322      	movs	r3, #34	@ 0x22
 8002604:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002608:	2310      	movs	r3, #16
 800260a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260e:	2300      	movs	r3, #0
 8002610:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002612:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002616:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800261a:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2bff      	cmp	r3, #255	@ 0xff
 8002622:	d90a      	bls.n	800263a <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002624:	22ff      	movs	r2, #255	@ 0xff
 8002626:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002628:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <HAL_I2C_Master_Receive+0x178>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002630:	4639      	mov	r1, r7
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff fd75 	bl	8002122 <I2C_TransferConfig>
 8002638:	e018      	b.n	800266c <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800263a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800263c:	b292      	uxth	r2, r2
 800263e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002640:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <HAL_I2C_Master_Receive+0x178>)
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4639      	mov	r1, r7
 800264c:	4620      	mov	r0, r4
 800264e:	f7ff fd68 	bl	8002122 <I2C_TransferConfig>
 8002652:	e00b      	b.n	800266c <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002654:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002656:	b292      	uxth	r2, r2
 8002658:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265a:	2300      	movs	r3, #0
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	4639      	mov	r1, r7
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff fd5b 	bl	8002122 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800266c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d032      	beq.n	80026da <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	462a      	mov	r2, r5
 8002676:	4631      	mov	r1, r6
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff fe34 	bl	80022e6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800267e:	2800      	cmp	r0, #0
 8002680:	d14f      	bne.n	8002722 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002686:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002688:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800268a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002690:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8002692:	3a01      	subs	r2, #1
 8002694:	b292      	uxth	r2, r2
 8002696:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002698:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0e0      	beq.n	800266c <HAL_I2C_Master_Receive+0xb4>
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d1de      	bne.n	800266c <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ae:	9500      	str	r5, [sp, #0]
 80026b0:	4633      	mov	r3, r6
 80026b2:	2180      	movs	r1, #128	@ 0x80
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff fdc3 	bl	8002240 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	bba0      	cbnz	r0, 8002726 <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2bff      	cmp	r3, #255	@ 0xff
 80026c2:	d9c7      	bls.n	8002654 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c4:	22ff      	movs	r2, #255	@ 0xff
 80026c6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026d0:	4639      	mov	r1, r7
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fd25 	bl	8002122 <I2C_TransferConfig>
 80026d8:	e7c8      	b.n	800266c <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026da:	462a      	mov	r2, r5
 80026dc:	4631      	mov	r1, r6
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff fdd9 	bl	8002296 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026e4:	bb08      	cbnz	r0, 800272a <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	2220      	movs	r2, #32
 80026ea:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026ec:	6821      	ldr	r1, [r4, #0]
 80026ee:	684b      	ldr	r3, [r1, #4]
 80026f0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80026f4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80026f8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002706:	2300      	movs	r3, #0
 8002708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800270c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8002710:	e000      	b.n	8002714 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8002712:	2002      	movs	r0, #2
}
 8002714:	b002      	add	sp, #8
 8002716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800271a:	2002      	movs	r0, #2
 800271c:	e7fa      	b.n	8002714 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
 8002720:	e7f8      	b.n	8002714 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	e7f6      	b.n	8002714 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8002726:	2001      	movs	r0, #1
 8002728:	e7f4      	b.n	8002714 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800272a:	2001      	movs	r0, #1
 800272c:	e7f2      	b.n	8002714 <HAL_I2C_Master_Receive+0x15c>
 800272e:	bf00      	nop
 8002730:	80002400 	.word	0x80002400

08002734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002734:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002736:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	2a20      	cmp	r2, #32
 800273e:	d123      	bne.n	8002788 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002740:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002744:	2a01      	cmp	r2, #1
 8002746:	d021      	beq.n	800278c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002748:	2201      	movs	r2, #1
 800274a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002754:	6800      	ldr	r0, [r0, #0]
 8002756:	6802      	ldr	r2, [r0, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	6802      	ldr	r2, [r0, #0]
 8002762:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002766:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	6802      	ldr	r2, [r0, #0]
 800276c:	4311      	orrs	r1, r2
 800276e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	680a      	ldr	r2, [r1, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	2000      	movs	r0, #0
 8002782:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8002786:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002788:	2002      	movs	r0, #2
 800278a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800278c:	2002      	movs	r0, #2
  }
}
 800278e:	4770      	bx	lr

08002790 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002790:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002792:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	2a20      	cmp	r2, #32
 800279a:	d121      	bne.n	80027e0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80027a0:	2a01      	cmp	r2, #1
 80027a2:	d01f      	beq.n	80027e4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80027a4:	2201      	movs	r2, #1
 80027a6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027aa:	2224      	movs	r2, #36	@ 0x24
 80027ac:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027b0:	6800      	ldr	r0, [r0, #0]
 80027b2:	6802      	ldr	r2, [r0, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027be:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	680a      	ldr	r2, [r1, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d8:	2000      	movs	r0, #0
 80027da:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80027de:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2002      	movs	r0, #2
 80027e2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80027e4:	2002      	movs	r0, #2
  }
}
 80027e6:	4770      	bx	lr

080027e8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027e8:	4b02      	ldr	r3, [pc, #8]	@ (80027f4 <HAL_PWREx_GetVoltageRange+0xc>)
 80027ea:	6818      	ldr	r0, [r3, #0]
#endif
}
 80027ec:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40007000 	.word	0x40007000

080027f8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80027fc:	d00f      	beq.n	800281e <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280a:	d034      	beq.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800280c:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0x84>)
 800280e:	6813      	ldr	r3, [r2, #0]
 8002810:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002814:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002818:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800281a:	2000      	movs	r0, #0
 800281c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800281e:	4b17      	ldr	r3, [pc, #92]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800282a:	d020      	beq.n	800286e <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800282c:	4a13      	ldr	r2, [pc, #76]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0x84>)
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002838:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2232      	movs	r2, #50	@ 0x32
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	4a0f      	ldr	r2, [pc, #60]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800284e:	e000      	b.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8002850:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002854:	6952      	ldr	r2, [r2, #20]
 8002856:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800285a:	d001      	beq.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x68>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f7      	bne.n	8002850 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002868:	d103      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800286a:	2000      	movs	r0, #0
 800286c:	4770      	bx	lr
 800286e:	2000      	movs	r0, #0
 8002870:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002872:	2003      	movs	r0, #3
 8002874:	4770      	bx	lr
  return HAL_OK;
 8002876:	2000      	movs	r0, #0
}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000
 8002880:	200003f0 	.word	0x200003f0
 8002884:	431bde83 	.word	0x431bde83

08002888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002888:	b530      	push	{r4, r5, lr}
 800288a:	b083      	sub	sp, #12
 800288c:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800288e:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002896:	d00b      	beq.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002898:	f7ff ffa6 	bl	80027e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800289c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80028a0:	d017      	beq.n	80028d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028a2:	2c80      	cmp	r4, #128	@ 0x80
 80028a4:	d81f      	bhi.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028a6:	d02d      	beq.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028a8:	2c70      	cmp	r4, #112	@ 0x70
 80028aa:	d02d      	beq.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ac:	2100      	movs	r1, #0
 80028ae:	e01b      	b.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4d17      	ldr	r5, [pc, #92]	@ (8002910 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80028b2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80028ba:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80028c4:	f7ff ff90 	bl	80027e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	65ab      	str	r3, [r5, #88]	@ 0x58
 80028d0:	e7e4      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80028d2:	2c80      	cmp	r4, #128	@ 0x80
 80028d4:	d903      	bls.n	80028de <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80028d6:	2ca0      	cmp	r4, #160	@ 0xa0
 80028d8:	d903      	bls.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80028da:	2102      	movs	r1, #2
 80028dc:	e004      	b.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028de:	2100      	movs	r1, #0
 80028e0:	e002      	b.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e2:	2101      	movs	r1, #1
 80028e4:	e000      	b.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80028e6:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80028ea:	6813      	ldr	r3, [r2, #0]
 80028ec:	f023 0307 	bic.w	r3, r3, #7
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028f4:	6813      	ldr	r3, [r2, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	428b      	cmp	r3, r1
 80028fc:	d106      	bne.n	800290c <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80028fe:	2000      	movs	r0, #0
}
 8002900:	b003      	add	sp, #12
 8002902:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002904:	2102      	movs	r1, #2
 8002906:	e7ef      	b.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002908:	2101      	movs	r1, #1
 800290a:	e7ed      	b.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800290c:	2001      	movs	r0, #1
 800290e:	e7f7      	b.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8002910:	40021000 	.word	0x40021000
 8002914:	40022000 	.word	0x40022000

08002918 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002918:	4a28      	ldr	r2, [pc, #160]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800291a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002922:	f013 030c 	ands.w	r3, r3, #12
 8002926:	d00a      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x26>
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d006      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800292c:	2b04      	cmp	r3, #4
 800292e:	d01f      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002930:	2b08      	cmp	r3, #8
 8002932:	d020      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002934:	2000      	movs	r0, #0
 8002936:	4602      	mov	r2, r0
 8002938:	e010      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800293a:	2a01      	cmp	r2, #1
 800293c:	d1f6      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800293e:	4a1f      	ldr	r2, [pc, #124]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	f012 0f08 	tst.w	r2, #8
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002948:	4a1c      	ldr	r2, [pc, #112]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800294a:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800294e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002952:	491b      	ldr	r1, [pc, #108]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002954:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002958:	b143      	cbz	r3, 800296c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800295a:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d00d      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x64>
}
 8002960:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002962:	4a16      	ldr	r2, [pc, #88]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800296a:	e7f2      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 800296c:	4610      	mov	r0, r2
 800296e:	e7f5      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002970:	4814      	ldr	r0, [pc, #80]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002972:	2200      	movs	r2, #0
 8002974:	e7f2      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002976:	4814      	ldr	r0, [pc, #80]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002978:	2200      	movs	r2, #0
 800297a:	e7ef      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800297c:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002984:	2b02      	cmp	r3, #2
 8002986:	d016      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x9e>
 8002988:	2b03      	cmp	r3, #3
 800298a:	d100      	bne.n	800298e <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 800298c:	4a0e      	ldr	r2, [pc, #56]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298e:	490b      	ldr	r1, [pc, #44]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002990:	68cb      	ldr	r3, [r1, #12]
 8002992:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002996:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002998:	68c8      	ldr	r0, [r1, #12]
 800299a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800299e:	fb02 f000 	mul.w	r0, r2, r0
 80029a2:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a6:	68cb      	ldr	r3, [r1, #12]
 80029a8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80029ac:	3301      	adds	r3, #1
 80029ae:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80029b0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80029b4:	e7d4      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80029b6:	4a03      	ldr	r2, [pc, #12]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xac>)
 80029b8:	e7e9      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x76>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08004de0 	.word	0x08004de0
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200

080029cc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80029cc:	2800      	cmp	r0, #0
 80029ce:	f000 82fc 	beq.w	8002fca <HAL_RCC_OscConfig+0x5fe>
{
 80029d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d4:	b083      	sub	sp, #12
 80029d6:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d8:	4b96      	ldr	r3, [pc, #600]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 80029da:	689d      	ldr	r5, [r3, #8]
 80029dc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e0:	68de      	ldr	r6, [r3, #12]
 80029e2:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029e6:	6803      	ldr	r3, [r0, #0]
 80029e8:	f013 0f10 	tst.w	r3, #16
 80029ec:	d05a      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ee:	b1e5      	cbz	r5, 8002a2a <HAL_RCC_OscConfig+0x5e>
 80029f0:	2d0c      	cmp	r5, #12
 80029f2:	d018      	beq.n	8002a26 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029f4:	69a3      	ldr	r3, [r4, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80bb 	beq.w	8002b72 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80029fc:	4a8d      	ldr	r2, [pc, #564]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 80029fe:	6813      	ldr	r3, [r2, #0]
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a06:	f7ff f9dd 	bl	8001dc4 <HAL_GetTick>
 8002a0a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0c:	4b89      	ldr	r3, [pc, #548]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f013 0f02 	tst.w	r3, #2
 8002a14:	f040 809a 	bne.w	8002b4c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a18:	f7ff f9d4 	bl	8001dc4 <HAL_GetTick>
 8002a1c:	1bc0      	subs	r0, r0, r7
 8002a1e:	2802      	cmp	r0, #2
 8002a20:	d9f4      	bls.n	8002a0c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002a22:	2003      	movs	r0, #3
 8002a24:	e2dc      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a26:	2e01      	cmp	r6, #1
 8002a28:	d1e4      	bne.n	80029f4 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2a:	4b82      	ldr	r3, [pc, #520]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f013 0f02 	tst.w	r3, #2
 8002a32:	d003      	beq.n	8002a3c <HAL_RCC_OscConfig+0x70>
 8002a34:	69a3      	ldr	r3, [r4, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 82c9 	beq.w	8002fce <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a3c:	6a20      	ldr	r0, [r4, #32]
 8002a3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f013 0f08 	tst.w	r3, #8
 8002a46:	d05b      	beq.n	8002b00 <HAL_RCC_OscConfig+0x134>
 8002a48:	4b7a      	ldr	r3, [pc, #488]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a50:	4298      	cmp	r0, r3
 8002a52:	d85c      	bhi.n	8002b0e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a54:	4b77      	ldr	r3, [pc, #476]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	f042 0208 	orr.w	r2, r2, #8
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002a64:	6a21      	ldr	r1, [r4, #32]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002a70:	69e1      	ldr	r1, [r4, #28]
 8002a72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a76:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a78:	2d00      	cmp	r5, #0
 8002a7a:	d060      	beq.n	8002b3e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a7c:	f7ff ff4c 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8002a80:	4b6c      	ldr	r3, [pc, #432]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a88:	4a6b      	ldr	r2, [pc, #428]	@ (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	40d8      	lsrs	r0, r3
 8002a92:	4b6a      	ldr	r3, [pc, #424]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a94:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002a96:	4b6a      	ldr	r3, [pc, #424]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	f7ff f951 	bl	8001d40 <HAL_InitTick>
        if(status != HAL_OK)
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	f040 829e 	bne.w	8002fe0 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	f013 0f01 	tst.w	r3, #1
 8002aaa:	f000 8081 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aae:	2d08      	cmp	r5, #8
 8002ab0:	d075      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
 8002ab2:	2d0c      	cmp	r5, #12
 8002ab4:	d071      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	6863      	ldr	r3, [r4, #4]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abc:	f000 8097 	beq.w	8002bee <HAL_RCC_OscConfig+0x222>
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac4:	f000 8099 	beq.w	8002bfa <HAL_RCC_OscConfig+0x22e>
 8002ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ad8:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ada:	6863      	ldr	r3, [r4, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8099 	beq.w	8002c14 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f96f 	bl	8001dc4 <HAL_GetTick>
 8002ae6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae8:	4b52      	ldr	r3, [pc, #328]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002af0:	d15e      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af2:	f7ff f967 	bl	8001dc4 <HAL_GetTick>
 8002af6:	1bc0      	subs	r0, r0, r7
 8002af8:	2864      	cmp	r0, #100	@ 0x64
 8002afa:	d9f5      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002afc:	2003      	movs	r0, #3
 8002afe:	e26f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b00:	4b4c      	ldr	r3, [pc, #304]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b0c:	e7a0      	b.n	8002a50 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b0e:	f7ff febb 	bl	8002888 <RCC_SetFlashLatencyFromMSIRange>
 8002b12:	2800      	cmp	r0, #0
 8002b14:	f040 825d 	bne.w	8002fd2 <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b18:	4b46      	ldr	r3, [pc, #280]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f042 0208 	orr.w	r2, r2, #8
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002b28:	6a21      	ldr	r1, [r4, #32]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002b34:	69e1      	ldr	r1, [r4, #28]
 8002b36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	e79e      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b3e:	6a20      	ldr	r0, [r4, #32]
 8002b40:	f7ff fea2 	bl	8002888 <RCC_SetFlashLatencyFromMSIRange>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d099      	beq.n	8002a7c <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002b48:	2001      	movs	r0, #1
 8002b4a:	e249      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4c:	4b39      	ldr	r3, [pc, #228]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f042 0208 	orr.w	r2, r2, #8
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002b5c:	6a21      	ldr	r1, [r4, #32]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002b68:	69e1      	ldr	r1, [r4, #28]
 8002b6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	e798      	b.n	8002aa4 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8002b72:	4a30      	ldr	r2, [pc, #192]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002b74:	6813      	ldr	r3, [r2, #0]
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f922 	bl	8001dc4 <HAL_GetTick>
 8002b80:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b82:	4b2c      	ldr	r3, [pc, #176]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f013 0f02 	tst.w	r3, #2
 8002b8a:	d08b      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f91a 	bl	8001dc4 <HAL_GetTick>
 8002b90:	1bc0      	subs	r0, r0, r7
 8002b92:	2802      	cmp	r0, #2
 8002b94:	d9f5      	bls.n	8002b82 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8002b96:	2003      	movs	r0, #3
 8002b98:	e222      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b9a:	2e03      	cmp	r6, #3
 8002b9c:	d18b      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9e:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002ba6:	d003      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1e4>
 8002ba8:	6863      	ldr	r3, [r4, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8213 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	f013 0f02 	tst.w	r3, #2
 8002bb6:	d058      	beq.n	8002c6a <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bb8:	2d04      	cmp	r5, #4
 8002bba:	d045      	beq.n	8002c48 <HAL_RCC_OscConfig+0x27c>
 8002bbc:	2d0c      	cmp	r5, #12
 8002bbe:	d041      	beq.n	8002c44 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d077      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f8f8 	bl	8001dc4 <HAL_GetTick>
 8002bd4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd6:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002bde:	d161      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be0:	f7ff f8f0 	bl	8001dc4 <HAL_GetTick>
 8002be4:	1b80      	subs	r0, r0, r6
 8002be6:	2802      	cmp	r0, #2
 8002be8:	d9f5      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8002bea:	2003      	movs	r0, #3
 8002bec:	e1f8      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bee:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e76f      	b.n	8002ada <HAL_RCC_OscConfig+0x10e>
 8002bfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bfe:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e762      	b.n	8002ada <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8002c14:	f7ff f8d6 	bl	8001dc4 <HAL_GetTick>
 8002c18:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_RCC_OscConfig+0x268>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002c22:	d0c5      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7ff f8ce 	bl	8001dc4 <HAL_GetTick>
 8002c28:	1bc0      	subs	r0, r0, r7
 8002c2a:	2864      	cmp	r0, #100	@ 0x64
 8002c2c:	d9f5      	bls.n	8002c1a <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002c2e:	2003      	movs	r0, #3
 8002c30:	e1d6      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08004e10 	.word	0x08004e10
 8002c3c:	200003f0 	.word	0x200003f0
 8002c40:	200003f8 	.word	0x200003f8
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c44:	2e02      	cmp	r6, #2
 8002c46:	d1bb      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c48:	4b95      	ldr	r3, [pc, #596]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_OscConfig+0x28e>
 8002c52:	68e3      	ldr	r3, [r4, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 81c0 	beq.w	8002fda <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	4a91      	ldr	r2, [pc, #580]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002c5c:	6853      	ldr	r3, [r2, #4]
 8002c5e:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002c62:	6921      	ldr	r1, [r4, #16]
 8002c64:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c68:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	f013 0f08 	tst.w	r3, #8
 8002c70:	d04c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	6963      	ldr	r3, [r4, #20]
 8002c74:	b39b      	cbz	r3, 8002cde <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4a8a      	ldr	r2, [pc, #552]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002c84:	f7ff f89e 	bl	8001dc4 <HAL_GetTick>
 8002c88:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c90:	f013 0f02 	tst.w	r3, #2
 8002c94:	d13a      	bne.n	8002d0c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c96:	f7ff f895 	bl	8001dc4 <HAL_GetTick>
 8002c9a:	1b80      	subs	r0, r0, r6
 8002c9c:	2802      	cmp	r0, #2
 8002c9e:	d9f4      	bls.n	8002c8a <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	e19d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002ca6:	6853      	ldr	r3, [r2, #4]
 8002ca8:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002cac:	6921      	ldr	r1, [r4, #16]
 8002cae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cb2:	6053      	str	r3, [r2, #4]
 8002cb4:	e7d9      	b.n	8002c6a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8002cb6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cbe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f880 	bl	8001dc4 <HAL_GetTick>
 8002cc4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc6:	4b76      	ldr	r3, [pc, #472]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002cce:	d0cc      	beq.n	8002c6a <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7ff f878 	bl	8001dc4 <HAL_GetTick>
 8002cd4:	1b80      	subs	r0, r0, r6
 8002cd6:	2802      	cmp	r0, #2
 8002cd8:	d9f5      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8002cda:	2003      	movs	r0, #3
 8002cdc:	e180      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8002cde:	4a70      	ldr	r2, [pc, #448]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002ce0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002cec:	f7ff f86a 	bl	8001dc4 <HAL_GetTick>
 8002cf0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf8:	f013 0f02 	tst.w	r3, #2
 8002cfc:	d006      	beq.n	8002d0c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7ff f861 	bl	8001dc4 <HAL_GetTick>
 8002d02:	1b80      	subs	r0, r0, r6
 8002d04:	2802      	cmp	r0, #2
 8002d06:	d9f4      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8002d08:	2003      	movs	r0, #3
 8002d0a:	e169      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	f013 0f04 	tst.w	r3, #4
 8002d12:	d07a      	beq.n	8002e0a <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d14:	4b62      	ldr	r3, [pc, #392]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002d1c:	d136      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002d20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d22:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d26:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d32:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d34:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002d3c:	d028      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3e:	68a3      	ldr	r3, [r4, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d039      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3ec>
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d03f      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x3fc>
 8002d48:	4b55      	ldr	r3, [pc, #340]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002d4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002d56:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d62:	68a3      	ldr	r3, [r4, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d03d      	beq.n	8002de4 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002d68:	f7ff f82c 	bl	8001dc4 <HAL_GetTick>
 8002d6c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d74:	f013 0f02 	tst.w	r3, #2
 8002d78:	d146      	bne.n	8002e08 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7ff f823 	bl	8001dc4 <HAL_GetTick>
 8002d7e:	1bc0      	subs	r0, r0, r7
 8002d80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d84:	4298      	cmp	r0, r3
 8002d86:	d9f2      	bls.n	8002d6e <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002d88:	2003      	movs	r0, #3
 8002d8a:	e129      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	e7d1      	b.n	8002d34 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d90:	4a44      	ldr	r2, [pc, #272]	@ (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002d92:	6813      	ldr	r3, [r2, #0]
 8002d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d98:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f813 	bl	8001dc4 <HAL_GetTick>
 8002d9e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da0:	4b40      	ldr	r3, [pc, #256]	@ (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002da8:	d1c9      	bne.n	8002d3e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7ff f80b 	bl	8001dc4 <HAL_GetTick>
 8002dae:	1bc0      	subs	r0, r0, r7
 8002db0:	2802      	cmp	r0, #2
 8002db2:	d9f5      	bls.n	8002da0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002db4:	2003      	movs	r0, #3
 8002db6:	e113      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db8:	4a39      	ldr	r2, [pc, #228]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002dba:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc6:	e7cc      	b.n	8002d62 <HAL_RCC_OscConfig+0x396>
 8002dc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002dca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002dce:	f042 0204 	orr.w	r2, r2, #4
 8002dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002dd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002de2:	e7be      	b.n	8002d62 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002de4:	f7fe ffee 	bl	8001dc4 <HAL_GetTick>
 8002de8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df0:	f013 0f02 	tst.w	r3, #2
 8002df4:	d008      	beq.n	8002e08 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe ffe5 	bl	8001dc4 <HAL_GetTick>
 8002dfa:	1bc0      	subs	r0, r0, r7
 8002dfc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e00:	4298      	cmp	r0, r3
 8002e02:	d9f2      	bls.n	8002dea <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002e04:	2003      	movs	r0, #3
 8002e06:	e0eb      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8002e08:	bb6e      	cbnz	r6, 8002e66 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80e6 	beq.w	8002fde <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d02d      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e16:	2d0c      	cmp	r5, #12
 8002e18:	f000 80e8 	beq.w	8002fec <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002e24:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f013 5f20 	tst.w	r3, #671088640	@ 0x28000000
 8002e2c:	d104      	bne.n	8002e38 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	68d3      	ldr	r3, [r2, #12]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e38:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e3a:	68d3      	ldr	r3, [r2, #12]
 8002e3c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e44:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002e46:	f7fe ffbd 	bl	8001dc4 <HAL_GetTick>
 8002e4a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002e54:	f000 80b7 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe ffb4 	bl	8001dc4 <HAL_GetTick>
 8002e5c:	1b00      	subs	r0, r0, r4
 8002e5e:	2802      	cmp	r0, #2
 8002e60:	d9f4      	bls.n	8002e4c <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8002e62:	2003      	movs	r0, #3
 8002e64:	e0bc      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e70:	e7cb      	b.n	8002e0a <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	f003 0103 	and.w	r1, r3, #3
 8002e7a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002e7c:	4291      	cmp	r1, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e80:	2d0c      	cmp	r5, #12
 8002e82:	f000 80af 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002e8e:	f040 80ab 	bne.w	8002fe8 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e92:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002e9a:	d031      	beq.n	8002f00 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	e09f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002eac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002eae:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002eb4:	d1e4      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002eba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002ec0:	d1de      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ec2:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 8002ec6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002ec8:	3a07      	subs	r2, #7
 8002eca:	bf18      	it	ne
 8002ecc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	4291      	cmp	r1, r2
 8002ed0:	d1d6      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002ed6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002ed8:	0852      	lsrs	r2, r2, #1
 8002eda:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002edc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002ee0:	d1ce      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002ee6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002ee8:	0852      	lsrs	r2, r2, #1
 8002eea:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eec:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002ef0:	d1c6      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff0 <HAL_RCC_OscConfig+0x624>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002efa:	d04a      	beq.n	8002f92 <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8002efc:	2000      	movs	r0, #0
 8002efe:	e06f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8002f00:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff0 <HAL_RCC_OscConfig+0x624>)
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002f0a:	f7fe ff5b 	bl	8001dc4 <HAL_GetTick>
 8002f0e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	4b37      	ldr	r3, [pc, #220]	@ (8002ff0 <HAL_RCC_OscConfig+0x624>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002f18:	d006      	beq.n	8002f28 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fe ff53 	bl	8001dc4 <HAL_GetTick>
 8002f1e:	1b40      	subs	r0, r0, r5
 8002f20:	2802      	cmp	r0, #2
 8002f22:	d9f5      	bls.n	8002f10 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8002f24:	2003      	movs	r0, #3
 8002f26:	e05b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f28:	4a31      	ldr	r2, [pc, #196]	@ (8002ff0 <HAL_RCC_OscConfig+0x624>)
 8002f2a:	68d3      	ldr	r3, [r2, #12]
 8002f2c:	4931      	ldr	r1, [pc, #196]	@ (8002ff4 <HAL_RCC_OscConfig+0x628>)
 8002f2e:	4019      	ands	r1, r3
 8002f30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002f32:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002f34:	3801      	subs	r0, #1
 8002f36:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002f3a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002f3c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f40:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002f42:	0840      	lsrs	r0, r0, #1
 8002f44:	3801      	subs	r0, #1
 8002f46:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002f4a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002f4c:	0840      	lsrs	r0, r0, #1
 8002f4e:	3801      	subs	r0, #1
 8002f50:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002f54:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002f56:	0900      	lsrs	r0, r0, #4
 8002f58:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8002f5c:	4319      	orrs	r1, r3
 8002f5e:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f68:	68d3      	ldr	r3, [r2, #12]
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002f70:	f7fe ff28 	bl	8001dc4 <HAL_GetTick>
 8002f74:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff0 <HAL_RCC_OscConfig+0x624>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe ff20 	bl	8001dc4 <HAL_GetTick>
 8002f84:	1b00      	subs	r0, r0, r4
 8002f86:	2802      	cmp	r0, #2
 8002f88:	d9f5      	bls.n	8002f76 <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	e028      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e026      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 8002f92:	4b17      	ldr	r3, [pc, #92]	@ (8002ff0 <HAL_RCC_OscConfig+0x624>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002f9a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002fa2:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002fa4:	f7fe ff0e 	bl	8001dc4 <HAL_GetTick>
 8002fa8:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <HAL_RCC_OscConfig+0x624>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe ff06 	bl	8001dc4 <HAL_GetTick>
 8002fb8:	1b03      	subs	r3, r0, r4
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d9f5      	bls.n	8002faa <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	e00e      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	e00c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
}
 8002fcc:	4770      	bx	lr
        return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
 8002fd0:	e006      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8002fde:	2000      	movs	r0, #0
}
 8002fe0:	b003      	add	sp, #12
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	e7fb      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8002fe8:	2001      	movs	r0, #1
 8002fea:	e7f9      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
 8002fee:	e7f7      	b.n	8002fe0 <HAL_RCC_OscConfig+0x614>
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	f99d808c 	.word	0xf99d808c

08002ff8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	f000 8098 	beq.w	800312e <HAL_RCC_ClockConfig+0x136>
{
 8002ffe:	b570      	push	{r4, r5, r6, lr}
 8003000:	460c      	mov	r4, r1
 8003002:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b4e      	ldr	r3, [pc, #312]	@ (8003140 <HAL_RCC_ClockConfig+0x148>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	428b      	cmp	r3, r1
 800300e:	d20b      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003010:	4a4b      	ldr	r2, [pc, #300]	@ (8003140 <HAL_RCC_ClockConfig+0x148>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	f023 0307 	bic.w	r3, r3, #7
 8003018:	430b      	orrs	r3, r1
 800301a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301c:	6813      	ldr	r3, [r2, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	428b      	cmp	r3, r1
 8003024:	f040 8085 	bne.w	8003132 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	f013 0f01 	tst.w	r3, #1
 800302e:	d039      	beq.n	80030a4 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003030:	686b      	ldr	r3, [r5, #4]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	2b02      	cmp	r3, #2
 8003038:	d026      	beq.n	8003088 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800303a:	bb63      	cbnz	r3, 8003096 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800303c:	4a41      	ldr	r2, [pc, #260]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	f012 0f02 	tst.w	r2, #2
 8003044:	d106      	bne.n	8003054 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
 8003048:	e070      	b.n	800312c <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	4a3e      	ldr	r2, [pc, #248]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003052:	d070      	beq.n	8003136 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003054:	493b      	ldr	r1, [pc, #236]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 8003056:	688a      	ldr	r2, [r1, #8]
 8003058:	f022 0203 	bic.w	r2, r2, #3
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003060:	f7fe feb0 	bl	8001dc4 <HAL_GetTick>
 8003064:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	686a      	ldr	r2, [r5, #4]
 8003070:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f7fe fea5 	bl	8001dc4 <HAL_GetTick>
 800307a:	1b80      	subs	r0, r0, r6
 800307c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003080:	4298      	cmp	r0, r3
 8003082:	d9f0      	bls.n	8003066 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8003084:	2003      	movs	r0, #3
 8003086:	e051      	b.n	800312c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003088:	4a2e      	ldr	r2, [pc, #184]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003090:	d1e0      	bne.n	8003054 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e04a      	b.n	800312c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003096:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800309e:	d1d9      	bne.n	8003054 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80030a0:	2001      	movs	r0, #1
 80030a2:	e043      	b.n	800312c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	f013 0f02 	tst.w	r3, #2
 80030aa:	d006      	beq.n	80030ba <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4a25      	ldr	r2, [pc, #148]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 80030ae:	6893      	ldr	r3, [r2, #8]
 80030b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030b4:	68a9      	ldr	r1, [r5, #8]
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ba:	4b21      	ldr	r3, [pc, #132]	@ (8003140 <HAL_RCC_ClockConfig+0x148>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	42a3      	cmp	r3, r4
 80030c4:	d90a      	bls.n	80030dc <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <HAL_RCC_ClockConfig+0x148>)
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	4323      	orrs	r3, r4
 80030d0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	42a3      	cmp	r3, r4
 80030da:	d12e      	bne.n	800313a <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	f013 0f04 	tst.w	r3, #4
 80030e2:	d006      	beq.n	80030f2 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 80030e6:	6893      	ldr	r3, [r2, #8]
 80030e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030ec:	68e9      	ldr	r1, [r5, #12]
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	f013 0f08 	tst.w	r3, #8
 80030f8:	d007      	beq.n	800310a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fa:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 80030fc:	6893      	ldr	r3, [r2, #8]
 80030fe:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003102:	6929      	ldr	r1, [r5, #16]
 8003104:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003108:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800310a:	f7ff fc05 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <HAL_RCC_ClockConfig+0x14c>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003116:	4a0c      	ldr	r2, [pc, #48]	@ (8003148 <HAL_RCC_ClockConfig+0x150>)
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	40d8      	lsrs	r0, r3
 8003120:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <HAL_RCC_ClockConfig+0x154>)
 8003122:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_RCC_ClockConfig+0x158>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	f7fe fe0a 	bl	8001d40 <HAL_InitTick>
}
 800312c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800312e:	2001      	movs	r0, #1
}
 8003130:	4770      	bx	lr
      return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
 8003134:	e7fa      	b.n	800312c <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8003136:	2001      	movs	r0, #1
 8003138:	e7f8      	b.n	800312c <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 800313a:	2001      	movs	r0, #1
 800313c:	e7f6      	b.n	800312c <HAL_RCC_ClockConfig+0x134>
 800313e:	bf00      	nop
 8003140:	40022000 	.word	0x40022000
 8003144:	40021000 	.word	0x40021000
 8003148:	08004e10 	.word	0x08004e10
 800314c:	200003f0 	.word	0x200003f0
 8003150:	200003f8 	.word	0x200003f8

08003154 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	4604      	mov	r4, r0
 8003158:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800315a:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f013 0f03 	tst.w	r3, #3
 8003162:	d017      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003164:	4b56      	ldr	r3, [pc, #344]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	6802      	ldr	r2, [r0, #0]
 800316e:	4293      	cmp	r3, r2
 8003170:	d001      	beq.n	8003176 <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003172:	2601      	movs	r6, #1
 8003174:	e016      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
       ||
 8003176:	2a00      	cmp	r2, #0
 8003178:	f000 809f 	beq.w	80032ba <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800317c:	4b50      	ldr	r3, [pc, #320]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003184:	3301      	adds	r3, #1
 8003186:	6842      	ldr	r2, [r0, #4]
       ||
 8003188:	4293      	cmp	r3, r2
 800318a:	d001      	beq.n	8003190 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 800318c:	2601      	movs	r6, #1
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8003190:	2600      	movs	r6, #0
 8003192:	e01b      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x78>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003194:	6803      	ldr	r3, [r0, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d058      	beq.n	800324c <RCCEx_PLLSAI1_Config+0xf8>
 800319a:	2b03      	cmp	r3, #3
 800319c:	d05d      	beq.n	800325a <RCCEx_PLLSAI1_Config+0x106>
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d002      	beq.n	80031a8 <RCCEx_PLLSAI1_Config+0x54>
 80031a2:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 80031a4:	4630      	mov	r0, r6
 80031a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031a8:	4a45      	ldr	r2, [pc, #276]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	f012 0f02 	tst.w	r2, #2
 80031b0:	d05f      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031b2:	4843      	ldr	r0, [pc, #268]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 80031b4:	68c2      	ldr	r2, [r0, #12]
 80031b6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80031ba:	6861      	ldr	r1, [r4, #4]
 80031bc:	3901      	subs	r1, #1
 80031be:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60c3      	str	r3, [r0, #12]
 80031c6:	2600      	movs	r6, #0
  if(status == HAL_OK)
 80031c8:	2e00      	cmp	r6, #0
 80031ca:	d1eb      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
    __HAL_RCC_PLLSAI1_DISABLE();
 80031cc:	4a3c      	ldr	r2, [pc, #240]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80031d6:	f7fe fdf5 	bl	8001dc4 <HAL_GetTick>
 80031da:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031dc:	4b38      	ldr	r3, [pc, #224]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80031e4:	d005      	beq.n	80031f2 <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e6:	f7fe fded 	bl	8001dc4 <HAL_GetTick>
 80031ea:	1bc3      	subs	r3, r0, r7
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d9f5      	bls.n	80031dc <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 80031f0:	2603      	movs	r6, #3
    if(status == HAL_OK)
 80031f2:	2e00      	cmp	r6, #0
 80031f4:	d1d6      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
      if(Divider == DIVIDER_P_UPDATE)
 80031f6:	2d00      	cmp	r5, #0
 80031f8:	d13d      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031fa:	4931      	ldr	r1, [pc, #196]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 80031fc:	690b      	ldr	r3, [r1, #16]
 80031fe:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003206:	68a0      	ldr	r0, [r4, #8]
 8003208:	68e2      	ldr	r2, [r4, #12]
 800320a:	0912      	lsrs	r2, r2, #4
 800320c:	0452      	lsls	r2, r2, #17
 800320e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003212:	4313      	orrs	r3, r2
 8003214:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003216:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800321e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003220:	f7fe fdd0 	bl	8001dc4 <HAL_GetTick>
 8003224:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003226:	4b26      	ldr	r3, [pc, #152]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800322e:	d105      	bne.n	800323c <RCCEx_PLLSAI1_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003230:	f7fe fdc8 	bl	8001dc4 <HAL_GetTick>
 8003234:	1b40      	subs	r0, r0, r5
 8003236:	2802      	cmp	r0, #2
 8003238:	d9f5      	bls.n	8003226 <RCCEx_PLLSAI1_Config+0xd2>
          status = HAL_TIMEOUT;
 800323a:	2603      	movs	r6, #3
      if(status == HAL_OK)
 800323c:	2e00      	cmp	r6, #0
 800323e:	d1b1      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003240:	4a1f      	ldr	r2, [pc, #124]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 8003242:	6913      	ldr	r3, [r2, #16]
 8003244:	69a1      	ldr	r1, [r4, #24]
 8003246:	430b      	orrs	r3, r1
 8003248:	6113      	str	r3, [r2, #16]
 800324a:	e7ab      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800324c:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003254:	d1ad      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x5e>
 8003256:	2601      	movs	r6, #1
 8003258:	e7a4      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800325a:	4a19      	ldr	r2, [pc, #100]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003262:	d1a6      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x5e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003264:	4a16      	ldr	r2, [pc, #88]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800326c:	d1a1      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x5e>
 800326e:	2601      	movs	r6, #1
 8003270:	e798      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 8003272:	2601      	movs	r6, #1
 8003274:	e7a8      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x74>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003276:	2d01      	cmp	r5, #1
 8003278:	d00f      	beq.n	800329a <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800327a:	4811      	ldr	r0, [pc, #68]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 800327c:	6902      	ldr	r2, [r0, #16]
 800327e:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003282:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8003286:	68a1      	ldr	r1, [r4, #8]
 8003288:	6963      	ldr	r3, [r4, #20]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	3b01      	subs	r3, #1
 800328e:	065b      	lsls	r3, r3, #25
 8003290:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003294:	431a      	orrs	r2, r3
 8003296:	6102      	str	r2, [r0, #16]
 8003298:	e7bd      	b.n	8003216 <RCCEx_PLLSAI1_Config+0xc2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800329a:	4809      	ldr	r0, [pc, #36]	@ (80032c0 <RCCEx_PLLSAI1_Config+0x16c>)
 800329c:	6902      	ldr	r2, [r0, #16]
 800329e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80032a2:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80032a6:	68a1      	ldr	r1, [r4, #8]
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	3b01      	subs	r3, #1
 80032ae:	055b      	lsls	r3, r3, #21
 80032b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032b4:	431a      	orrs	r2, r3
 80032b6:	6102      	str	r2, [r0, #16]
 80032b8:	e7ad      	b.n	8003216 <RCCEx_PLLSAI1_Config+0xc2>
      status = HAL_ERROR;
 80032ba:	2601      	movs	r6, #1
 80032bc:	e772      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x50>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000

080032c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	4604      	mov	r4, r0
 80032c8:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ca:	4b50      	ldr	r3, [pc, #320]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f013 0f03 	tst.w	r3, #3
 80032d2:	d017      	beq.n	8003304 <RCCEx_PLLSAI2_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032d4:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	6802      	ldr	r2, [r0, #0]
 80032de:	4293      	cmp	r3, r2
 80032e0:	d001      	beq.n	80032e6 <RCCEx_PLLSAI2_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80032e2:	2601      	movs	r6, #1
 80032e4:	e016      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
       ||
 80032e6:	2a00      	cmp	r2, #0
 80032e8:	f000 808d 	beq.w	8003406 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032ec:	4b47      	ldr	r3, [pc, #284]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80032f4:	3301      	adds	r3, #1
 80032f6:	6842      	ldr	r2, [r0, #4]
       ||
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d001      	beq.n	8003300 <RCCEx_PLLSAI2_Config+0x3c>
      status = HAL_ERROR;
 80032fc:	2601      	movs	r6, #1
 80032fe:	e009      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2600      	movs	r6, #0
 8003302:	e01b      	b.n	800333c <RCCEx_PLLSAI2_Config+0x78>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003304:	6803      	ldr	r3, [r0, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d058      	beq.n	80033bc <RCCEx_PLLSAI2_Config+0xf8>
 800330a:	2b03      	cmp	r3, #3
 800330c:	d05d      	beq.n	80033ca <RCCEx_PLLSAI2_Config+0x106>
 800330e:	2b01      	cmp	r3, #1
 8003310:	d002      	beq.n	8003318 <RCCEx_PLLSAI2_Config+0x54>
 8003312:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8003314:	4630      	mov	r0, r6
 8003316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003318:	4a3c      	ldr	r2, [pc, #240]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f012 0f02 	tst.w	r2, #2
 8003320:	d05f      	beq.n	80033e2 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003322:	483a      	ldr	r0, [pc, #232]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 8003324:	68c2      	ldr	r2, [r0, #12]
 8003326:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800332a:	6861      	ldr	r1, [r4, #4]
 800332c:	3901      	subs	r1, #1
 800332e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003332:	4313      	orrs	r3, r2
 8003334:	60c3      	str	r3, [r0, #12]
 8003336:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8003338:	2e00      	cmp	r6, #0
 800333a:	d1eb      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
    __HAL_RCC_PLLSAI2_DISABLE();
 800333c:	4a33      	ldr	r2, [pc, #204]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 800333e:	6813      	ldr	r3, [r2, #0]
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003344:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003346:	f7fe fd3d 	bl	8001dc4 <HAL_GetTick>
 800334a:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800334c:	4b2f      	ldr	r3, [pc, #188]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8003354:	d005      	beq.n	8003362 <RCCEx_PLLSAI2_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003356:	f7fe fd35 	bl	8001dc4 <HAL_GetTick>
 800335a:	1bc3      	subs	r3, r0, r7
 800335c:	2b02      	cmp	r3, #2
 800335e:	d9f5      	bls.n	800334c <RCCEx_PLLSAI2_Config+0x88>
        status = HAL_TIMEOUT;
 8003360:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8003362:	2e00      	cmp	r6, #0
 8003364:	d1d6      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
      if(Divider == DIVIDER_P_UPDATE)
 8003366:	2d00      	cmp	r5, #0
 8003368:	d13d      	bne.n	80033e6 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800336a:	4928      	ldr	r1, [pc, #160]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 800336c:	694b      	ldr	r3, [r1, #20]
 800336e:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003376:	68a0      	ldr	r0, [r4, #8]
 8003378:	68e2      	ldr	r2, [r4, #12]
 800337a:	0912      	lsrs	r2, r2, #4
 800337c:	0452      	lsls	r2, r2, #17
 800337e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003382:	4313      	orrs	r3, r2
 8003384:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003386:	4a21      	ldr	r2, [pc, #132]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 8003388:	6813      	ldr	r3, [r2, #0]
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003390:	f7fe fd18 	bl	8001dc4 <HAL_GetTick>
 8003394:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003396:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800339e:	d105      	bne.n	80033ac <RCCEx_PLLSAI2_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033a0:	f7fe fd10 	bl	8001dc4 <HAL_GetTick>
 80033a4:	1b40      	subs	r0, r0, r5
 80033a6:	2802      	cmp	r0, #2
 80033a8:	d9f5      	bls.n	8003396 <RCCEx_PLLSAI2_Config+0xd2>
          status = HAL_TIMEOUT;
 80033aa:	2603      	movs	r6, #3
      if(status == HAL_OK)
 80033ac:	2e00      	cmp	r6, #0
 80033ae:	d1b1      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033b0:	4a16      	ldr	r2, [pc, #88]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80033b2:	6953      	ldr	r3, [r2, #20]
 80033b4:	6961      	ldr	r1, [r4, #20]
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6153      	str	r3, [r2, #20]
 80033ba:	e7ab      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80033c4:	d1ad      	bne.n	8003322 <RCCEx_PLLSAI2_Config+0x5e>
 80033c6:	2601      	movs	r6, #1
 80033c8:	e7a4      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033ca:	4a10      	ldr	r2, [pc, #64]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80033d2:	d1a6      	bne.n	8003322 <RCCEx_PLLSAI2_Config+0x5e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033d4:	4a0d      	ldr	r2, [pc, #52]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80033dc:	d1a1      	bne.n	8003322 <RCCEx_PLLSAI2_Config+0x5e>
 80033de:	2601      	movs	r6, #1
 80033e0:	e798      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
        status = HAL_ERROR;
 80033e2:	2601      	movs	r6, #1
 80033e4:	e7a8      	b.n	8003338 <RCCEx_PLLSAI2_Config+0x74>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033e6:	4809      	ldr	r0, [pc, #36]	@ (800340c <RCCEx_PLLSAI2_Config+0x148>)
 80033e8:	6942      	ldr	r2, [r0, #20]
 80033ea:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80033ee:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80033f2:	68a1      	ldr	r1, [r4, #8]
 80033f4:	6923      	ldr	r3, [r4, #16]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	3b01      	subs	r3, #1
 80033fa:	065b      	lsls	r3, r3, #25
 80033fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003400:	431a      	orrs	r2, r3
 8003402:	6142      	str	r2, [r0, #20]
 8003404:	e7bf      	b.n	8003386 <RCCEx_PLLSAI2_Config+0xc2>
      status = HAL_ERROR;
 8003406:	2601      	movs	r6, #1
 8003408:	e784      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x50>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003418:	6803      	ldr	r3, [r0, #0]
 800341a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800341e:	d033      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003420:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003422:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003426:	d01f      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003428:	d80c      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800342a:	b323      	cbz	r3, 8003476 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800342c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003430:	d105      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003432:	2100      	movs	r1, #0
 8003434:	3020      	adds	r0, #32
 8003436:	f7ff ff45 	bl	80032c4 <RCCEx_PLLSAI2_Config>
 800343a:	4606      	mov	r6, r0
      break;
 800343c:	e020      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800343e:	2701      	movs	r7, #1
 8003440:	463e      	mov	r6, r7
 8003442:	e023      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003444:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003448:	d10b      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800344a:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800344c:	4a60      	ldr	r2, [pc, #384]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800344e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003452:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003456:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003458:	430b      	orrs	r3, r1
 800345a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800345e:	2700      	movs	r7, #0
 8003460:	e014      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003462:	2701      	movs	r7, #1
 8003464:	463e      	mov	r6, r7
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003468:	4a59      	ldr	r2, [pc, #356]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800346a:	68d3      	ldr	r3, [r2, #12]
 800346c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003470:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003472:	2600      	movs	r6, #0
 8003474:	e7ea      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003476:	2100      	movs	r1, #0
 8003478:	3004      	adds	r0, #4
 800347a:	f7ff fe6b 	bl	8003154 <RCCEx_PLLSAI1_Config>
 800347e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003480:	2e00      	cmp	r6, #0
 8003482:	d0e3      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003484:	4637      	mov	r7, r6
 8003486:	e001      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003488:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800348a:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003492:	d030      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003494:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8003496:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800349a:	d01f      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800349c:	d80d      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800349e:	b31b      	cbz	r3, 80034e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034a6:	2100      	movs	r1, #0
 80034a8:	f104 0020 	add.w	r0, r4, #32
 80034ac:	f7ff ff0a 	bl	80032c4 <RCCEx_PLLSAI2_Config>
 80034b0:	4606      	mov	r6, r0
      break;
 80034b2:	e005      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 80034b4:	2701      	movs	r7, #1
 80034b6:	463e      	mov	r6, r7
 80034b8:	e01d      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80034ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034be:	d10a      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 80034c0:	b9c6      	cbnz	r6, 80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034c2:	4a43      	ldr	r2, [pc, #268]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80034c8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80034cc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80034ce:	430b      	orrs	r3, r1
 80034d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80034d4:	e00f      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80034d6:	2701      	movs	r7, #1
 80034d8:	463e      	mov	r6, r7
 80034da:	e00c      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034dc:	4a3c      	ldr	r2, [pc, #240]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034de:	68d3      	ldr	r3, [r2, #12]
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e4:	60d3      	str	r3, [r2, #12]
      break;
 80034e6:	e7eb      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e8:	2100      	movs	r1, #0
 80034ea:	1d20      	adds	r0, r4, #4
 80034ec:	f7ff fe32 	bl	8003154 <RCCEx_PLLSAI1_Config>
 80034f0:	4606      	mov	r6, r0
      break;
 80034f2:	e7e5      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80034f4:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80034fc:	d071      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034fe:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003506:	d14e      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800350a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800350c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003510:	659a      	str	r2, [r3, #88]	@ 0x58
 8003512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800351c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003520:	4a2c      	ldr	r2, [pc, #176]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003528:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800352a:	f7fe fc4b 	bl	8001dc4 <HAL_GetTick>
 800352e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003530:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003538:	d105      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fe fc43 	bl	8001dc4 <HAL_GetTick>
 800353e:	1b40      	subs	r0, r0, r5
 8003540:	2802      	cmp	r0, #2
 8003542:	d9f5      	bls.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8003544:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8003546:	2e00      	cmp	r6, #0
 8003548:	d146      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800354a:	4b21      	ldr	r3, [pc, #132]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003550:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003554:	d016      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003556:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800355a:	429a      	cmp	r2, r3
 800355c:	d012      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800355e:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003560:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003568:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800356c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8003570:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003574:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8003578:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800357c:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003584:	f013 0f01 	tst.w	r3, #1
 8003588:	d110      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 800358a:	2e00      	cmp	r6, #0
 800358c:	f040 8127 	bne.w	80037de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003590:	4a0f      	ldr	r2, [pc, #60]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003592:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800359a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800359e:	430b      	orrs	r3, r1
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a4:	e019      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	f04f 0800 	mov.w	r8, #0
 80035aa:	e7b9      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 80035ac:	f7fe fc0a 	bl	8001dc4 <HAL_GetTick>
 80035b0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b2:	4b07      	ldr	r3, [pc, #28]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b8:	f013 0f02 	tst.w	r3, #2
 80035bc:	d1e5      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fc01 	bl	8001dc4 <HAL_GetTick>
 80035c2:	1b40      	subs	r0, r0, r5
 80035c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035c8:	4298      	cmp	r0, r3
 80035ca:	d9f2      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 80035cc:	2603      	movs	r6, #3
 80035ce:	e7dc      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
      status = ret;
 80035d8:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 80035da:	f1b8 0f00 	cmp.w	r8, #0
 80035de:	f040 8100 	bne.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	f013 0f01 	tst.w	r3, #1
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ea:	4a9d      	ldr	r2, [pc, #628]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80035f0:	f023 0303 	bic.w	r3, r3, #3
 80035f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80035f6:	430b      	orrs	r3, r1
 80035f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	f013 0f02 	tst.w	r3, #2
 8003602:	d008      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003604:	4a96      	ldr	r2, [pc, #600]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003606:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800360a:	f023 030c 	bic.w	r3, r3, #12
 800360e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003610:	430b      	orrs	r3, r1
 8003612:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	f013 0f04 	tst.w	r3, #4
 800361c:	d008      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800361e:	4a90      	ldr	r2, [pc, #576]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003620:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003624:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003628:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800362a:	430b      	orrs	r3, r1
 800362c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	f013 0f08 	tst.w	r3, #8
 8003636:	d008      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003638:	4a89      	ldr	r2, [pc, #548]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800363a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800363e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003642:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003644:	430b      	orrs	r3, r1
 8003646:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f013 0f10 	tst.w	r3, #16
 8003650:	d008      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003652:	4a83      	ldr	r2, [pc, #524]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003654:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800365e:	430b      	orrs	r3, r1
 8003660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	f013 0f20 	tst.w	r3, #32
 800366a:	d008      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800366c:	4a7c      	ldr	r2, [pc, #496]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800366e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003672:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003676:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003678:	430b      	orrs	r3, r1
 800367a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003684:	d008      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003686:	4a76      	ldr	r2, [pc, #472]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003688:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800368c:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003690:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003692:	430b      	orrs	r3, r1
 8003694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800369e:	d008      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a0:	4a6f      	ldr	r2, [pc, #444]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80036a6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80036aa:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80036ac:	430b      	orrs	r3, r1
 80036ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80036b8:	d008      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ba:	4a69      	ldr	r2, [pc, #420]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80036c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036c4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80036c6:	430b      	orrs	r3, r1
 80036c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80036d2:	d008      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036d4:	4a62      	ldr	r2, [pc, #392]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80036da:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80036de:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80036e0:	430b      	orrs	r3, r1
 80036e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80036ec:	d008      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80036f4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80036f8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80036fa:	430b      	orrs	r3, r1
 80036fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003706:	d00f      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003708:	4a55      	ldr	r2, [pc, #340]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800370a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800370e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003712:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8003714:	430b      	orrs	r3, r1
 8003716:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800371a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003720:	d065      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003722:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003726:	d067      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800372e:	d00f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003730:	4a4b      	ldr	r2, [pc, #300]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003732:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003736:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800373a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800373c:	430b      	orrs	r3, r1
 800373e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003742:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003748:	d05e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800374a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800374e:	d060      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003756:	d00f      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003758:	4a41      	ldr	r2, [pc, #260]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800375a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800375e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003762:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8003764:	430b      	orrs	r3, r1
 8003766:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800376a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800376c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003770:	d057      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003772:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003776:	d059      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800377e:	d00f      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003780:	4a37      	ldr	r2, [pc, #220]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003782:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003786:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800378a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800378c:	430b      	orrs	r3, r1
 800378e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003792:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003798:	d050      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800379a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800379e:	d055      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80037a6:	d008      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80037ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037b2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80037b4:	430b      	orrs	r3, r1
 80037b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80037c0:	d009      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c2:	4a27      	ldr	r2, [pc, #156]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80037c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037cc:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80037d0:	430b      	orrs	r3, r1
 80037d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80037d6:	4638      	mov	r0, r7
 80037d8:	b002      	add	sp, #8
 80037da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80037de:	4637      	mov	r7, r6
 80037e0:	e6fb      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037e4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ec:	e6f9      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ee:	68d3      	ldr	r3, [r2, #12]
 80037f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f4:	60d3      	str	r3, [r2, #12]
 80037f6:	e797      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f8:	2101      	movs	r1, #1
 80037fa:	1d20      	adds	r0, r4, #4
 80037fc:	f7ff fcaa 	bl	8003154 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003800:	2800      	cmp	r0, #0
 8003802:	d091      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8003804:	4607      	mov	r7, r0
 8003806:	e78f      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003808:	68d3      	ldr	r3, [r2, #12]
 800380a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800380e:	60d3      	str	r3, [r2, #12]
 8003810:	e79e      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003812:	2101      	movs	r1, #1
 8003814:	1d20      	adds	r0, r4, #4
 8003816:	f7ff fc9d 	bl	8003154 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800381a:	2800      	cmp	r0, #0
 800381c:	d098      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 800381e:	4607      	mov	r7, r0
 8003820:	e796      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003822:	68d3      	ldr	r3, [r2, #12]
 8003824:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003828:	60d3      	str	r3, [r2, #12]
 800382a:	e7a5      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800382c:	2101      	movs	r1, #1
 800382e:	1d20      	adds	r0, r4, #4
 8003830:	f7ff fc90 	bl	8003154 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003834:	2800      	cmp	r0, #0
 8003836:	d09f      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8003838:	4607      	mov	r7, r0
 800383a:	e79d      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800383c:	2102      	movs	r1, #2
 800383e:	1d20      	adds	r0, r4, #4
 8003840:	f7ff fc88 	bl	8003154 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003844:	2800      	cmp	r0, #0
 8003846:	d0ab      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8003848:	4607      	mov	r7, r0
 800384a:	e7a9      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800384c:	2102      	movs	r1, #2
 800384e:	f104 0020 	add.w	r0, r4, #32
 8003852:	f7ff fd37 	bl	80032c4 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8003856:	2800      	cmp	r0, #0
 8003858:	d0a2      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 800385a:	4607      	mov	r7, r0
 800385c:	e7a0      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000

08003864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	4605      	mov	r5, r0
 800386c:	4688      	mov	r8, r1
 800386e:	4617      	mov	r7, r2
 8003870:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003872:	f7fe faa7 	bl	8001dc4 <HAL_GetTick>
 8003876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003878:	1a1b      	subs	r3, r3, r0
 800387a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800387e:	f7fe faa1 	bl	8001dc4 <HAL_GetTick>
 8003882:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003884:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800388c:	fb09 f303 	mul.w	r3, r9, r3
 8003890:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003892:	682b      	ldr	r3, [r5, #0]
 8003894:	689c      	ldr	r4, [r3, #8]
 8003896:	ea38 0404 	bics.w	r4, r8, r4
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	42bb      	cmp	r3, r7
 80038a2:	d03d      	beq.n	8003920 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80038a8:	d0f3      	beq.n	8003892 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038aa:	f7fe fa8b 	bl	8001dc4 <HAL_GetTick>
 80038ae:	eba0 000a 	sub.w	r0, r0, sl
 80038b2:	4548      	cmp	r0, r9
 80038b4:	d207      	bcs.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038b6:	9a01      	ldr	r2, [sp, #4]
 80038b8:	b102      	cbz	r2, 80038bc <SPI_WaitFlagStateUntilTimeout+0x58>
 80038ba:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80038bc:	9b01      	ldr	r3, [sp, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	4691      	mov	r9, r2
 80038c4:	e7e5      	b.n	8003892 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038c6:	682a      	ldr	r2, [r5, #0]
 80038c8:	6853      	ldr	r3, [r2, #4]
 80038ca:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80038ce:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d0:	686b      	ldr	r3, [r5, #4]
 80038d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038d6:	d00b      	beq.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038d8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80038da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038de:	d014      	beq.n	800390a <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80038e6:	2300      	movs	r3, #0
 80038e8:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80038ec:	2003      	movs	r0, #3
 80038ee:	e018      	b.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f0:	68ab      	ldr	r3, [r5, #8]
 80038f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f6:	d002      	beq.n	80038fe <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fc:	d1ec      	bne.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 80038fe:	682a      	ldr	r2, [r5, #0]
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e7e6      	b.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 800390a:	682a      	ldr	r2, [r5, #0]
 800390c:	6813      	ldr	r3, [r2, #0]
 800390e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	682a      	ldr	r2, [r5, #0]
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e7df      	b.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003920:	2000      	movs	r0, #0
}
 8003922:	b002      	add	sp, #8
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	200003f0 	.word	0x200003f0

0800392c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	4607      	mov	r7, r0
 8003934:	460d      	mov	r5, r1
 8003936:	4616      	mov	r6, r2
 8003938:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800393a:	f7fe fa43 	bl	8001dc4 <HAL_GetTick>
 800393e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003940:	1a1b      	subs	r3, r3, r0
 8003942:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8003946:	f7fe fa3d 	bl	8001dc4 <HAL_GetTick>
 800394a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800394c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a00 <SPI_WaitFifoStateUntilTimeout+0xd4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003954:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003958:	0d1b      	lsrs	r3, r3, #20
 800395a:	fb09 f303 	mul.w	r3, r9, r3
 800395e:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003960:	e002      	b.n	8003968 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8003962:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003966:	d10c      	bne.n	8003982 <SPI_WaitFifoStateUntilTimeout+0x56>
  while ((hspi->Instance->SR & Fifo) != State)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689c      	ldr	r4, [r3, #8]
 800396c:	ea04 0c05 	and.w	ip, r4, r5
 8003970:	45b4      	cmp	ip, r6
 8003972:	d041      	beq.n	80039f8 <SPI_WaitFifoStateUntilTimeout+0xcc>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003974:	f5b5 6fc0 	cmp.w	r5, #1536	@ 0x600
 8003978:	d1f3      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x36>
 800397a:	2e00      	cmp	r6, #0
 800397c:	d1f1      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800397e:	7b1b      	ldrb	r3, [r3, #12]
 8003980:	e7ef      	b.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003982:	f7fe fa1f 	bl	8001dc4 <HAL_GetTick>
 8003986:	eba0 000a 	sub.w	r0, r0, sl
 800398a:	4548      	cmp	r0, r9
 800398c:	d207      	bcs.n	800399e <SPI_WaitFifoStateUntilTimeout+0x72>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800398e:	9a01      	ldr	r2, [sp, #4]
 8003990:	b102      	cbz	r2, 8003994 <SPI_WaitFifoStateUntilTimeout+0x68>
 8003992:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	4691      	mov	r9, r2
 800399c:	e7e4      	b.n	8003968 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	6853      	ldr	r3, [r2, #4]
 80039a2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80039a6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ae:	d00b      	beq.n	80039c8 <SPI_WaitFifoStateUntilTimeout+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b6:	d014      	beq.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80039c4:	2003      	movs	r0, #3
 80039c6:	e018      	b.n	80039fa <SPI_WaitFifoStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ce:	d002      	beq.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0xaa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d4:	d1ec      	bne.n	80039b0 <SPI_WaitFifoStateUntilTimeout+0x84>
          __HAL_SPI_DISABLE(hspi);
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	6813      	ldr	r3, [r2, #0]
 80039da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e7e6      	b.n	80039b0 <SPI_WaitFifoStateUntilTimeout+0x84>
          SPI_RESET_CRC(hspi);
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e7df      	b.n	80039b8 <SPI_WaitFifoStateUntilTimeout+0x8c>
    }
  }

  return HAL_OK;
 80039f8:	2000      	movs	r0, #0
}
 80039fa:	b002      	add	sp, #8
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	200003f0 	.word	0x200003f0

08003a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	4604      	mov	r4, r0
 8003a0a:	460d      	mov	r5, r1
 8003a0c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a0e:	9200      	str	r2, [sp, #0]
 8003a10:	460b      	mov	r3, r1
 8003a12:	2200      	movs	r2, #0
 8003a14:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a18:	f7ff ff88 	bl	800392c <SPI_WaitFifoStateUntilTimeout>
 8003a1c:	b9b0      	cbnz	r0, 8003a4c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1e:	9600      	str	r6, [sp, #0]
 8003a20:	462b      	mov	r3, r5
 8003a22:	2200      	movs	r2, #0
 8003a24:	2180      	movs	r1, #128	@ 0x80
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7ff ff1c 	bl	8003864 <SPI_WaitFlagStateUntilTimeout>
 8003a2c:	b9a8      	cbnz	r0, 8003a5a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a2e:	9600      	str	r6, [sp, #0]
 8003a30:	462b      	mov	r3, r5
 8003a32:	2200      	movs	r2, #0
 8003a34:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff ff77 	bl	800392c <SPI_WaitFifoStateUntilTimeout>
 8003a3e:	b150      	cbz	r0, 8003a56 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a40:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003a42:	f043 0320 	orr.w	r3, r3, #32
 8003a46:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a48:	2003      	movs	r0, #3
 8003a4a:	e004      	b.n	8003a56 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a4c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a54:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003a56:	b002      	add	sp, #8
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003a5c:	f043 0320 	orr.w	r3, r3, #32
 8003a60:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a62:	2003      	movs	r0, #3
 8003a64:	e7f7      	b.n	8003a56 <SPI_EndRxTxTransaction+0x52>

08003a66 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d06a      	beq.n	8003b40 <HAL_SPI_Init+0xda>
{
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003a70:	b933      	cbnz	r3, 8003a80 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a72:	6843      	ldr	r3, [r0, #4]
 8003a74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a78:	d005      	beq.n	8003a86 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61c3      	str	r3, [r0, #28]
 8003a7e:	e002      	b.n	8003a86 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a80:	2300      	movs	r3, #0
 8003a82:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a84:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a8a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d04d      	beq.n	8003b2e <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a92:	2302      	movs	r3, #2
 8003a94:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aa8:	d947      	bls.n	8003b3a <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aaa:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003aac:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003ab0:	d004      	beq.n	8003abc <HAL_SPI_Init+0x56>
 8003ab2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ab6:	d001      	beq.n	8003abc <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003ac2:	68a1      	ldr	r1, [r4, #8]
 8003ac4:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6921      	ldr	r1, [r4, #16]
 8003acc:	f001 0102 	and.w	r1, r1, #2
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6961      	ldr	r1, [r4, #20]
 8003ad4:	f001 0101 	and.w	r1, r1, #1
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	69a1      	ldr	r1, [r4, #24]
 8003adc:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	69e1      	ldr	r1, [r4, #28]
 8003ae4:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6a21      	ldr	r1, [r4, #32]
 8003aec:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003af4:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8003af8:	6820      	ldr	r0, [r4, #0]
 8003afa:	430b      	orrs	r3, r1
 8003afc:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003afe:	8b63      	ldrh	r3, [r4, #26]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003b06:	f001 0110 	and.w	r1, r1, #16
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b0e:	f001 0108 	and.w	r1, r1, #8
 8003b12:	430b      	orrs	r3, r1
 8003b14:	68e1      	ldr	r1, [r4, #12]
 8003b16:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	6821      	ldr	r1, [r4, #0]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b22:	2000      	movs	r0, #0
 8003b24:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8003b2c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003b2e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003b32:	4620      	mov	r0, r4
 8003b34:	f7fe f80a 	bl	8001b4c <HAL_SPI_MspInit>
 8003b38:	e7ab      	b.n	8003a92 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b3e:	e7b5      	b.n	8003aac <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
}
 8003b42:	4770      	bx	lr

08003b44 <HAL_SPI_Transmit>:
{
 8003b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003b4c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f000 80f6 	beq.w	8003d42 <HAL_SPI_Transmit+0x1fe>
 8003b56:	4604      	mov	r4, r0
 8003b58:	4688      	mov	r8, r1
 8003b5a:	4691      	mov	r9, r2
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8003b62:	f7fe f92f 	bl	8001dc4 <HAL_GetTick>
 8003b66:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b68:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 8003b6c:	b2f6      	uxtb	r6, r6
 8003b6e:	2e01      	cmp	r6, #1
 8003b70:	f040 80d4 	bne.w	8003d1c <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8003b74:	f1b8 0f00 	cmp.w	r8, #0
 8003b78:	f000 80d1 	beq.w	8003d1e <HAL_SPI_Transmit+0x1da>
 8003b7c:	f1b9 0f00 	cmp.w	r9, #0
 8003b80:	f000 80cd 	beq.w	8003d1e <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b84:	2303      	movs	r3, #3
 8003b86:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b8e:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b92:	f8a4 903c 	strh.w	r9, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b96:	f8a4 903e 	strh.w	r9, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b9a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b9c:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003ba0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ba4:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ba6:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba8:	68a3      	ldr	r3, [r4, #8]
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bae:	d01e      	beq.n	8003bee <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003bb8:	d103      	bne.n	8003bc2 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bc0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bc8:	d942      	bls.n	8003c50 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	b113      	cbz	r3, 8003bd4 <HAL_SPI_Transmit+0x90>
 8003bce:	f1b9 0f01 	cmp.w	r9, #1
 8003bd2:	d123      	bne.n	8003c1c <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003bde:	3302      	adds	r3, #2
 8003be0:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8003be2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003bec:	e016      	b.n	8003c1c <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	6813      	ldr	r3, [r2, #0]
 8003bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bf6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	6813      	ldr	r3, [r2, #0]
 8003bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e7d5      	b.n	8003bb0 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c04:	f7fe f8de 	bl	8001dc4 <HAL_GetTick>
 8003c08:	1bc0      	subs	r0, r0, r7
 8003c0a:	42a8      	cmp	r0, r5
 8003c0c:	d303      	bcc.n	8003c16 <HAL_SPI_Transmit+0xd2>
 8003c0e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c12:	f040 808e 	bne.w	8003d32 <HAL_SPI_Transmit+0x1ee>
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	f000 808d 	beq.w	8003d36 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 8003c1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d066      	beq.n	8003cf2 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	f012 0f02 	tst.w	r2, #2
 8003c2c:	d0ea      	beq.n	8003c04 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003c30:	8812      	ldrh	r2, [r2, #0]
 8003c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c36:	3302      	adds	r3, #2
 8003c38:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c3a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8003c3e:	fa1f fc8c 	uxth.w	ip, ip
 8003c42:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003c46:	fa1f fc8c 	uxth.w	ip, ip
 8003c4a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8003c4e:	e7e5      	b.n	8003c1c <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	b113      	cbz	r3, 8003c5a <HAL_SPI_Transmit+0x116>
 8003c54:	f1b9 0f01 	cmp.w	r9, #1
 8003c58:	d133      	bne.n	8003cc2 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8003c5a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d90c      	bls.n	8003c7c <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c62:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	8812      	ldrh	r2, [r2, #0]
 8003c68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c6a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c70:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b02      	subs	r3, #2
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003c7a:	e022      	b.n	8003cc2 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c7c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003c84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c86:	3301      	adds	r3, #1
 8003c88:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c8a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003c94:	e015      	b.n	8003cc2 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c96:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003c9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ca2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003cac:	e009      	b.n	8003cc2 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cae:	f7fe f889 	bl	8001dc4 <HAL_GetTick>
 8003cb2:	1bc0      	subs	r0, r0, r7
 8003cb4:	42a8      	cmp	r0, r5
 8003cb6:	d302      	bcc.n	8003cbe <HAL_SPI_Transmit+0x17a>
 8003cb8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003cbc:	d13d      	bne.n	8003d3a <HAL_SPI_Transmit+0x1f6>
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	d03d      	beq.n	8003d3e <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003cc2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b1a3      	cbz	r3, 8003cf2 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	6893      	ldr	r3, [r2, #8]
 8003ccc:	f013 0f02 	tst.w	r3, #2
 8003cd0:	d0ed      	beq.n	8003cae <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8003cd2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d9dd      	bls.n	8003c96 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cda:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ce6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b02      	subs	r3, #2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003cf0:	e7e7      	b.n	8003cc2 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf2:	463a      	mov	r2, r7
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f7ff fe84 	bl	8003a04 <SPI_EndRxTxTransaction>
 8003cfc:	b108      	cbz	r0, 8003d02 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d02:	68a3      	ldr	r3, [r4, #8]
 8003d04:	b933      	cbnz	r3, 8003d14 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	9201      	str	r2, [sp, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d14:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003d16:	b913      	cbnz	r3, 8003d1e <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d18:	2600      	movs	r6, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8003d1c:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003d24:	2300      	movs	r3, #0
 8003d26:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	b003      	add	sp, #12
 8003d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003d32:	2603      	movs	r6, #3
 8003d34:	e7f3      	b.n	8003d1e <HAL_SPI_Transmit+0x1da>
 8003d36:	2603      	movs	r6, #3
 8003d38:	e7f1      	b.n	8003d1e <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8003d3a:	2603      	movs	r6, #3
 8003d3c:	e7ef      	b.n	8003d1e <HAL_SPI_Transmit+0x1da>
 8003d3e:	2603      	movs	r6, #3
 8003d40:	e7ed      	b.n	8003d1e <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003d42:	2602      	movs	r6, #2
 8003d44:	e7f1      	b.n	8003d2a <HAL_SPI_Transmit+0x1e6>

08003d46 <HAL_SPI_TransmitReceive>:
{
 8003d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003d4e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	f000 8164 	beq.w	8004020 <HAL_SPI_TransmitReceive+0x2da>
 8003d58:	4604      	mov	r4, r0
 8003d5a:	4688      	mov	r8, r1
 8003d5c:	4691      	mov	r9, r2
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8003d64:	f7fe f82e 	bl	8001dc4 <HAL_GetTick>
 8003d68:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003d6a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003d6e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003d70:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d00a      	beq.n	8003d8c <HAL_SPI_TransmitReceive+0x46>
 8003d76:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003d7a:	f040 8138 	bne.w	8003fee <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d7e:	68a2      	ldr	r2, [r4, #8]
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	f040 813d 	bne.w	8004000 <HAL_SPI_TransmitReceive+0x2ba>
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	f040 813c 	bne.w	8004004 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d8c:	f1b8 0f00 	cmp.w	r8, #0
 8003d90:	f000 813a 	beq.w	8004008 <HAL_SPI_TransmitReceive+0x2c2>
 8003d94:	f1b9 0f00 	cmp.w	r9, #0
 8003d98:	f000 8138 	beq.w	800400c <HAL_SPI_TransmitReceive+0x2c6>
 8003d9c:	2f00      	cmp	r7, #0
 8003d9e:	f000 8137 	beq.w	8004010 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003da2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dac:	2305      	movs	r3, #5
 8003dae:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003db6:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003dba:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003dbe:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dc2:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003dc6:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003dc8:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8003dca:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003dcc:	6523      	str	r3, [r4, #80]	@ 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dd4:	d801      	bhi.n	8003dda <HAL_SPI_TransmitReceive+0x94>
 8003dd6:	2f01      	cmp	r7, #1
 8003dd8:	d923      	bls.n	8003e22 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	6853      	ldr	r3, [r2, #4]
 8003dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003de2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003dec:	d103      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003df4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dfc:	d958      	bls.n	8003eb0 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	b10b      	cbz	r3, 8003e06 <HAL_SPI_TransmitReceive+0xc0>
 8003e02:	2f01      	cmp	r7, #1
 8003e04:	d10b      	bne.n	8003e1e <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	8812      	ldrh	r2, [r2, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e10:	3302      	adds	r3, #2
 8003e12:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e14:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003e1e:	2701      	movs	r7, #1
 8003e20:	e031      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	6853      	ldr	r3, [r2, #4]
 8003e26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e2a:	6053      	str	r3, [r2, #4]
 8003e2c:	e7da      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e36:	3302      	adds	r3, #2
 8003e38:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e3a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8003e44:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	f012 0f01 	tst.w	r2, #1
 8003e4e:	d011      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x12e>
 8003e50:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8003e54:	b292      	uxth	r2, r2
 8003e56:	b16a      	cbz	r2, 8003e74 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e60:	3302      	adds	r3, #2
 8003e62:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e64:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8003e72:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e74:	f7fd ffa6 	bl	8001dc4 <HAL_GetTick>
 8003e78:	1b83      	subs	r3, r0, r6
 8003e7a:	42ab      	cmp	r3, r5
 8003e7c:	d303      	bcc.n	8003e86 <HAL_SPI_TransmitReceive+0x140>
 8003e7e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e82:	f040 80c7 	bne.w	8004014 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e86:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	b92b      	cbnz	r3, 8003e98 <HAL_SPI_TransmitReceive+0x152>
 8003e8c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a1 	beq.w	8003fda <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	f012 0f02 	tst.w	r2, #2
 8003ea0:	d0d1      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x100>
 8003ea2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003ea4:	b292      	uxth	r2, r2
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d0cd      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x100>
 8003eaa:	2f00      	cmp	r7, #0
 8003eac:	d0cb      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x100>
 8003eae:	e7be      	b.n	8003e2e <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	b10b      	cbz	r3, 8003eb8 <HAL_SPI_TransmitReceive+0x172>
 8003eb4:	2f01      	cmp	r7, #1
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8003eb8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d90d      	bls.n	8003edc <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	8812      	ldrh	r2, [r2, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003eca:	3302      	adds	r3, #2
 8003ecc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ece:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b02      	subs	r3, #2
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003ed8:	2701      	movs	r7, #1
 8003eda:	e049      	b.n	8003f70 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003edc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003ee4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003ef4:	e7f0      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003ef6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	2a01      	cmp	r2, #1
 8003efc:	d90c      	bls.n	8003f18 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f04:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f06:	3302      	adds	r3, #2
 8003f08:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f0a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b02      	subs	r3, #2
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8003f14:	2700      	movs	r7, #0
 8003f16:	e03d      	b.n	8003f94 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f18:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003f1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f20:	3301      	adds	r3, #1
 8003f22:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f24:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8003f2e:	2700      	movs	r7, #0
 8003f30:	e030      	b.n	8003f94 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	6853      	ldr	r3, [r2, #4]
 8003f36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f3a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003f3c:	2701      	movs	r7, #1
 8003f3e:	e00d      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f40:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003f42:	7b1b      	ldrb	r3, [r3, #12]
 8003f44:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f48:	3301      	adds	r3, #1
 8003f4a:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8003f4c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8003f5a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f5c:	f7fd ff32 	bl	8001dc4 <HAL_GetTick>
 8003f60:	1b80      	subs	r0, r0, r6
 8003f62:	42a8      	cmp	r0, r5
 8003f64:	d302      	bcc.n	8003f6c <HAL_SPI_TransmitReceive+0x226>
 8003f66:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f6a:	d155      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x2d2>
 8003f6c:	2d00      	cmp	r5, #0
 8003f6e:	d055      	beq.n	800401c <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f70:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b923      	cbnz	r3, 8003f80 <HAL_SPI_TransmitReceive+0x23a>
 8003f76:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02c      	beq.n	8003fda <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	f012 0f02 	tst.w	r2, #2
 8003f88:	d004      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x24e>
 8003f8a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003f8c:	b292      	uxth	r2, r2
 8003f8e:	b10a      	cbz	r2, 8003f94 <HAL_SPI_TransmitReceive+0x24e>
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	d1b0      	bne.n	8003ef6 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	f012 0f01 	tst.w	r2, #1
 8003f9c:	d0de      	beq.n	8003f5c <HAL_SPI_TransmitReceive+0x216>
 8003f9e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	d0d9      	beq.n	8003f5c <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8003fa8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8003fac:	b292      	uxth	r2, r2
 8003fae:	2a01      	cmp	r2, #1
 8003fb0:	d9c6      	bls.n	8003f40 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fba:	3302      	adds	r3, #2
 8003fbc:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003fbe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b02      	subs	r3, #2
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003fcc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d9ad      	bls.n	8003f32 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003fd6:	2701      	movs	r7, #1
 8003fd8:	e7c0      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fda:	4632      	mov	r2, r6
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7ff fd10 	bl	8003a04 <SPI_EndRxTxTransaction>
 8003fe4:	b120      	cbz	r0, 8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fe6:	2320      	movs	r3, #32
 8003fe8:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003fea:	2001      	movs	r0, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003fee:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8003ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004000:	2002      	movs	r0, #2
 8004002:	e7f5      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
 8004004:	2002      	movs	r0, #2
 8004006:	e7f3      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8004008:	2001      	movs	r0, #1
 800400a:	e7f1      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
 800400c:	2001      	movs	r0, #1
 800400e:	e7ef      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
 8004010:	2001      	movs	r0, #1
 8004012:	e7ed      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8004014:	2003      	movs	r0, #3
 8004016:	e7eb      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8004018:	2003      	movs	r0, #3
 800401a:	e7e9      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
 800401c:	2003      	movs	r0, #3
 800401e:	e7e7      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8004020:	2002      	movs	r0, #2
 8004022:	e7eb      	b.n	8003ffc <HAL_SPI_TransmitReceive+0x2b6>

08004024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004026:	6a03      	ldr	r3, [r0, #32]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004032:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004038:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	680d      	ldr	r5, [r1, #0]
 800403e:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004040:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004044:	688b      	ldr	r3, [r1, #8]
 8004046:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004048:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <TIM_OC1_SetConfig+0x98>)
 800404a:	4290      	cmp	r0, r2
 800404c:	d00f      	beq.n	800406e <TIM_OC1_SetConfig+0x4a>
 800404e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004052:	4290      	cmp	r0, r2
 8004054:	d00b      	beq.n	800406e <TIM_OC1_SetConfig+0x4a>
 8004056:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800405a:	4290      	cmp	r0, r2
 800405c:	d007      	beq.n	800406e <TIM_OC1_SetConfig+0x4a>
 800405e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004062:	4290      	cmp	r0, r2
 8004064:	d003      	beq.n	800406e <TIM_OC1_SetConfig+0x4a>
 8004066:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800406a:	4290      	cmp	r0, r2
 800406c:	d105      	bne.n	800407a <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004072:	68ca      	ldr	r2, [r1, #12]
 8004074:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004076:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	4a10      	ldr	r2, [pc, #64]	@ (80040bc <TIM_OC1_SetConfig+0x98>)
 800407c:	4290      	cmp	r0, r2
 800407e:	d00f      	beq.n	80040a0 <TIM_OC1_SetConfig+0x7c>
 8004080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004084:	4290      	cmp	r0, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_OC1_SetConfig+0x7c>
 8004088:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800408c:	4290      	cmp	r0, r2
 800408e:	d007      	beq.n	80040a0 <TIM_OC1_SetConfig+0x7c>
 8004090:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004094:	4290      	cmp	r0, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC1_SetConfig+0x7c>
 8004098:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800409c:	4290      	cmp	r0, r2
 800409e:	d105      	bne.n	80040ac <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a0:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a4:	694a      	ldr	r2, [r1, #20]
 80040a6:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a8:	698c      	ldr	r4, [r1, #24]
 80040aa:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ae:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b0:	684a      	ldr	r2, [r1, #4]
 80040b2:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b4:	6203      	str	r3, [r0, #32]
}
 80040b6:	bc30      	pop	{r4, r5}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00

080040c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c2:	6a03      	ldr	r3, [r0, #32]
 80040c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80040d4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d8:	680d      	ldr	r5, [r1, #0]
 80040da:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040e0:	688a      	ldr	r2, [r1, #8]
 80040e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <TIM_OC3_SetConfig+0x88>)
 80040e8:	4290      	cmp	r0, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_OC3_SetConfig+0x34>
 80040ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040f0:	4290      	cmp	r0, r2
 80040f2:	d106      	bne.n	8004102 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040f8:	68ca      	ldr	r2, [r1, #12]
 80040fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004102:	4a11      	ldr	r2, [pc, #68]	@ (8004148 <TIM_OC3_SetConfig+0x88>)
 8004104:	4290      	cmp	r0, r2
 8004106:	d00f      	beq.n	8004128 <TIM_OC3_SetConfig+0x68>
 8004108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800410c:	4290      	cmp	r0, r2
 800410e:	d00b      	beq.n	8004128 <TIM_OC3_SetConfig+0x68>
 8004110:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004114:	4290      	cmp	r0, r2
 8004116:	d007      	beq.n	8004128 <TIM_OC3_SetConfig+0x68>
 8004118:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800411c:	4290      	cmp	r0, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC3_SetConfig+0x68>
 8004120:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004124:	4290      	cmp	r0, r2
 8004126:	d107      	bne.n	8004138 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004128:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800412c:	694c      	ldr	r4, [r1, #20]
 800412e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004132:	698c      	ldr	r4, [r1, #24]
 8004134:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004138:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800413c:	684a      	ldr	r2, [r1, #4]
 800413e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	6203      	str	r3, [r0, #32]
}
 8004142:	bc30      	pop	{r4, r5}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00

0800414c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414e:	6a03      	ldr	r3, [r0, #32]
 8004150:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004154:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800415c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004160:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004164:	680d      	ldr	r5, [r1, #0]
 8004166:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800416a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800416e:	688d      	ldr	r5, [r1, #8]
 8004170:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004174:	4d0f      	ldr	r5, [pc, #60]	@ (80041b4 <TIM_OC4_SetConfig+0x68>)
 8004176:	42a8      	cmp	r0, r5
 8004178:	d00f      	beq.n	800419a <TIM_OC4_SetConfig+0x4e>
 800417a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800417e:	42a8      	cmp	r0, r5
 8004180:	d00b      	beq.n	800419a <TIM_OC4_SetConfig+0x4e>
 8004182:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8004186:	42a8      	cmp	r0, r5
 8004188:	d007      	beq.n	800419a <TIM_OC4_SetConfig+0x4e>
 800418a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800418e:	42a8      	cmp	r0, r5
 8004190:	d003      	beq.n	800419a <TIM_OC4_SetConfig+0x4e>
 8004192:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004196:	42a8      	cmp	r0, r5
 8004198:	d104      	bne.n	80041a4 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800419a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800419e:	694d      	ldr	r5, [r1, #20]
 80041a0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a8:	684a      	ldr	r2, [r1, #4]
 80041aa:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ac:	6203      	str	r3, [r0, #32]
}
 80041ae:	bc30      	pop	{r4, r5}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00

080041b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041ba:	6a03      	ldr	r3, [r0, #32]
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041c6:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80041cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d0:	680d      	ldr	r5, [r1, #0]
 80041d2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041d8:	688a      	ldr	r2, [r1, #8]
 80041da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	4a0f      	ldr	r2, [pc, #60]	@ (800421c <TIM_OC5_SetConfig+0x64>)
 80041e0:	4290      	cmp	r0, r2
 80041e2:	d00f      	beq.n	8004204 <TIM_OC5_SetConfig+0x4c>
 80041e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041e8:	4290      	cmp	r0, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_OC5_SetConfig+0x4c>
 80041ec:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80041f0:	4290      	cmp	r0, r2
 80041f2:	d007      	beq.n	8004204 <TIM_OC5_SetConfig+0x4c>
 80041f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80041f8:	4290      	cmp	r0, r2
 80041fa:	d003      	beq.n	8004204 <TIM_OC5_SetConfig+0x4c>
 80041fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004200:	4290      	cmp	r0, r2
 8004202:	d104      	bne.n	800420e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004204:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004208:	694a      	ldr	r2, [r1, #20]
 800420a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004210:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004212:	684a      	ldr	r2, [r1, #4]
 8004214:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004216:	6203      	str	r3, [r0, #32]
}
 8004218:	bc30      	pop	{r4, r5}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00

08004220 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004222:	6a03      	ldr	r3, [r0, #32]
 8004224:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004228:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800422e:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004230:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004234:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004238:	680d      	ldr	r5, [r1, #0]
 800423a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800423e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004242:	688d      	ldr	r5, [r1, #8]
 8004244:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004248:	4d0f      	ldr	r5, [pc, #60]	@ (8004288 <TIM_OC6_SetConfig+0x68>)
 800424a:	42a8      	cmp	r0, r5
 800424c:	d00f      	beq.n	800426e <TIM_OC6_SetConfig+0x4e>
 800424e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004252:	42a8      	cmp	r0, r5
 8004254:	d00b      	beq.n	800426e <TIM_OC6_SetConfig+0x4e>
 8004256:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800425a:	42a8      	cmp	r0, r5
 800425c:	d007      	beq.n	800426e <TIM_OC6_SetConfig+0x4e>
 800425e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004262:	42a8      	cmp	r0, r5
 8004264:	d003      	beq.n	800426e <TIM_OC6_SetConfig+0x4e>
 8004266:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800426a:	42a8      	cmp	r0, r5
 800426c:	d104      	bne.n	8004278 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800426e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004272:	694d      	ldr	r5, [r1, #20]
 8004274:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004278:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800427a:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800427c:	684a      	ldr	r2, [r1, #4]
 800427e:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004280:	6203      	str	r3, [r0, #32]
}
 8004282:	bc30      	pop	{r4, r5}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00

0800428c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800428c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d136      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800429c:	6802      	ldr	r2, [r0, #0]
 800429e:	68d3      	ldr	r3, [r2, #12]
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a6:	6803      	ldr	r3, [r0, #0]
 80042a8:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <HAL_TIM_Base_Start_IT+0x84>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01c      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x5c>
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b2:	d019      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x5c>
 80042b4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d015      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x5c>
 80042bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d011      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x5c>
 80042c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00d      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x5c>
 80042cc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x5c>
 80042d4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80042d8:	4293      	cmp	r3, r2
 80042da:	d005      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042e4:	2000      	movs	r0, #0
 80042e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	6899      	ldr	r1, [r3, #8]
 80042ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <HAL_TIM_Base_Start_IT+0x88>)
 80042ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	2a06      	cmp	r2, #6
 80042f0:	d00a      	beq.n	8004308 <HAL_TIM_Base_Start_IT+0x7c>
 80042f2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80042f6:	d009      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004300:	2000      	movs	r0, #0
 8004302:	4770      	bx	lr
    return HAL_ERROR;
 8004304:	2001      	movs	r0, #1
 8004306:	4770      	bx	lr
  return HAL_OK;
 8004308:	2000      	movs	r0, #0
 800430a:	4770      	bx	lr
 800430c:	2000      	movs	r0, #0
}
 800430e:	4770      	bx	lr
 8004310:	40012c00 	.word	0x40012c00
 8004314:	00010007 	.word	0x00010007

08004318 <HAL_TIM_PeriodElapsedCallback>:
}
 8004318:	4770      	bx	lr

0800431a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_IC_CaptureCallback>:
}
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_TriggerCallback>:
}
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_IRQHandler>:
{
 8004322:	b510      	push	{r4, lr}
 8004324:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004326:	6803      	ldr	r3, [r0, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	f012 0f02 	tst.w	r2, #2
 800432e:	d011      	beq.n	8004354 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	f012 0f02 	tst.w	r2, #2
 8004336:	d00d      	beq.n	8004354 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004338:	f06f 0202 	mvn.w	r2, #2
 800433c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433e:	2301      	movs	r3, #1
 8004340:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004342:	6803      	ldr	r3, [r0, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f013 0f03 	tst.w	r3, #3
 800434a:	d079      	beq.n	8004440 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800434c:	f7ff ffe6 	bl	800431c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004350:	2300      	movs	r3, #0
 8004352:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	f012 0f04 	tst.w	r2, #4
 800435c:	d012      	beq.n	8004384 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	f012 0f04 	tst.w	r2, #4
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004366:	f06f 0204 	mvn.w	r2, #4
 800436a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436c:	2302      	movs	r3, #2
 800436e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004378:	d068      	beq.n	800444c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	4620      	mov	r0, r4
 800437c:	f7ff ffce 	bl	800431c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004380:	2300      	movs	r3, #0
 8004382:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	f012 0f08 	tst.w	r2, #8
 800438c:	d012      	beq.n	80043b4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	f012 0f08 	tst.w	r2, #8
 8004394:	d00e      	beq.n	80043b4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004396:	f06f 0208 	mvn.w	r2, #8
 800439a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800439c:	2304      	movs	r3, #4
 800439e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f013 0f03 	tst.w	r3, #3
 80043a8:	d057      	beq.n	800445a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff ffb6 	bl	800431c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b0:	2300      	movs	r3, #0
 80043b2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	f012 0f10 	tst.w	r2, #16
 80043bc:	d012      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	f012 0f10 	tst.w	r2, #16
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c6:	f06f 0210 	mvn.w	r2, #16
 80043ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043cc:	2308      	movs	r3, #8
 80043ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80043d8:	d046      	beq.n	8004468 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	4620      	mov	r0, r4
 80043dc:	f7ff ff9e 	bl	800431c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e0:	2300      	movs	r3, #0
 80043e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	f012 0f01 	tst.w	r2, #1
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	f012 0f01 	tst.w	r2, #1
 80043f4:	d13f      	bne.n	8004476 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80043fe:	d003      	beq.n	8004408 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004406:	d13d      	bne.n	8004484 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004418:	d13b      	bne.n	8004492 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004422:	d003      	beq.n	800442c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800442a:	d139      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	f012 0f20 	tst.w	r2, #32
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	f012 0f20 	tst.w	r2, #32
 800443c:	d137      	bne.n	80044ae <HAL_TIM_IRQHandler+0x18c>
}
 800443e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004440:	f7ff ff6b 	bl	800431a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff ff6a 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
 800444a:	e781      	b.n	8004350 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff ff64 	bl	800431a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004452:	4620      	mov	r0, r4
 8004454:	f7ff ff63 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
 8004458:	e792      	b.n	8004380 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff ff5d 	bl	800431a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	4620      	mov	r0, r4
 8004462:	f7ff ff5c 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
 8004466:	e7a3      	b.n	80043b0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004468:	4620      	mov	r0, r4
 800446a:	f7ff ff56 	bl	800431a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446e:	4620      	mov	r0, r4
 8004470:	f7ff ff55 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
 8004474:	e7b4      	b.n	80043e0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004476:	f06f 0201 	mvn.w	r2, #1
 800447a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff ff4b 	bl	8004318 <HAL_TIM_PeriodElapsedCallback>
 8004482:	e7b8      	b.n	80043f6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004484:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004488:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800448a:	4620      	mov	r0, r4
 800448c:	f000 fb0d 	bl	8004aaa <HAL_TIMEx_BreakCallback>
 8004490:	e7ba      	b.n	8004408 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004492:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004496:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004498:	4620      	mov	r0, r4
 800449a:	f000 fb07 	bl	8004aac <HAL_TIMEx_Break2Callback>
 800449e:	e7bc      	b.n	800441a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044a6:	4620      	mov	r0, r4
 80044a8:	f7ff ff3a 	bl	8004320 <HAL_TIM_TriggerCallback>
 80044ac:	e7be      	b.n	800442c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ae:	f06f 0220 	mvn.w	r2, #32
 80044b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80044b4:	4620      	mov	r0, r4
 80044b6:	f000 faf7 	bl	8004aa8 <HAL_TIMEx_CommutCallback>
}
 80044ba:	e7c0      	b.n	800443e <HAL_TIM_IRQHandler+0x11c>

080044bc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80044bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044be:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <TIM_Base_SetConfig+0xc4>)
 80044c0:	4290      	cmp	r0, r2
 80044c2:	d012      	beq.n	80044ea <TIM_Base_SetConfig+0x2e>
 80044c4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0x2e>
 80044ca:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80044ce:	4290      	cmp	r0, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x2e>
 80044d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044d6:	4290      	cmp	r0, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x2e>
 80044da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044de:	4290      	cmp	r0, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x2e>
 80044e2:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80044e6:	4290      	cmp	r0, r2
 80044e8:	d103      	bne.n	80044f2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80044ee:	684a      	ldr	r2, [r1, #4]
 80044f0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f2:	4a23      	ldr	r2, [pc, #140]	@ (8004580 <TIM_Base_SetConfig+0xc4>)
 80044f4:	4290      	cmp	r0, r2
 80044f6:	d01e      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 80044f8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80044fc:	d01b      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 80044fe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004502:	4290      	cmp	r0, r2
 8004504:	d017      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 8004506:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800450a:	4290      	cmp	r0, r2
 800450c:	d013      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 800450e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004512:	4290      	cmp	r0, r2
 8004514:	d00f      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 8004516:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800451a:	4290      	cmp	r0, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 800451e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004522:	4290      	cmp	r0, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 8004526:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800452a:	4290      	cmp	r0, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0x7a>
 800452e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004532:	4290      	cmp	r0, r2
 8004534:	d103      	bne.n	800453e <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	68ca      	ldr	r2, [r1, #12]
 800453c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004542:	694a      	ldr	r2, [r1, #20]
 8004544:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004546:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004548:	688b      	ldr	r3, [r1, #8]
 800454a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800454c:	680b      	ldr	r3, [r1, #0]
 800454e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <TIM_Base_SetConfig+0xc4>)
 8004552:	4298      	cmp	r0, r3
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0xba>
 8004556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455a:	4298      	cmp	r0, r3
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0xba>
 800455e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004562:	4298      	cmp	r0, r3
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0xba>
 8004566:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800456a:	4298      	cmp	r0, r3
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0xba>
 800456e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004572:	4298      	cmp	r0, r3
 8004574:	d101      	bne.n	800457a <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8004576:	690b      	ldr	r3, [r1, #16]
 8004578:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800457a:	2301      	movs	r3, #1
 800457c:	6143      	str	r3, [r0, #20]
}
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00

08004584 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004584:	b360      	cbz	r0, 80045e0 <HAL_TIM_Base_Init+0x5c>
{
 8004586:	b510      	push	{r4, lr}
 8004588:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800458a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800458e:	b313      	cbz	r3, 80045d6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004596:	4621      	mov	r1, r4
 8004598:	f851 0b04 	ldr.w	r0, [r1], #4
 800459c:	f7ff ff8e 	bl	80044bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80045aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80045ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80045b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80045b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80045c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80045c6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80045ca:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80045ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80045d2:	2000      	movs	r0, #0
}
 80045d4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80045d6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045da:	f7fd faed 	bl	8001bb8 <HAL_TIM_Base_MspInit>
 80045de:	e7d7      	b.n	8004590 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80045e0:	2001      	movs	r0, #1
}
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80045e4:	b360      	cbz	r0, 8004640 <HAL_TIM_PWM_Init+0x5c>
{
 80045e6:	b510      	push	{r4, lr}
 80045e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80045ea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80045ee:	b313      	cbz	r3, 8004636 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	2302      	movs	r3, #2
 80045f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f6:	4621      	mov	r1, r4
 80045f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80045fc:	f7ff ff5e 	bl	80044bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	2301      	movs	r3, #1
 8004602:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800460a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800460e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004612:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004616:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800461a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004622:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004626:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800462a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800462e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004632:	2000      	movs	r0, #0
}
 8004634:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004636:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800463a:	f7fd fadd 	bl	8001bf8 <HAL_TIM_PWM_MspInit>
 800463e:	e7d7      	b.n	80045f0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004640:	2001      	movs	r0, #1
}
 8004642:	4770      	bx	lr

08004644 <TIM_OC2_SetConfig>:
{
 8004644:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004646:	6a03      	ldr	r3, [r0, #32]
 8004648:	f023 0310 	bic.w	r3, r3, #16
 800464c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800464e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004650:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004652:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004654:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004658:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800465c:	680d      	ldr	r5, [r1, #0]
 800465e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004662:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004666:	688d      	ldr	r5, [r1, #8]
 8004668:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800466c:	4d17      	ldr	r5, [pc, #92]	@ (80046cc <TIM_OC2_SetConfig+0x88>)
 800466e:	42a8      	cmp	r0, r5
 8004670:	d003      	beq.n	800467a <TIM_OC2_SetConfig+0x36>
 8004672:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004676:	42a8      	cmp	r0, r5
 8004678:	d106      	bne.n	8004688 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800467a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800467e:	68cd      	ldr	r5, [r1, #12]
 8004680:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	4d10      	ldr	r5, [pc, #64]	@ (80046cc <TIM_OC2_SetConfig+0x88>)
 800468a:	42a8      	cmp	r0, r5
 800468c:	d00f      	beq.n	80046ae <TIM_OC2_SetConfig+0x6a>
 800468e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004692:	42a8      	cmp	r0, r5
 8004694:	d00b      	beq.n	80046ae <TIM_OC2_SetConfig+0x6a>
 8004696:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800469a:	42a8      	cmp	r0, r5
 800469c:	d007      	beq.n	80046ae <TIM_OC2_SetConfig+0x6a>
 800469e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80046a2:	42a8      	cmp	r0, r5
 80046a4:	d003      	beq.n	80046ae <TIM_OC2_SetConfig+0x6a>
 80046a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80046aa:	42a8      	cmp	r0, r5
 80046ac:	d107      	bne.n	80046be <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ae:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b2:	694c      	ldr	r4, [r1, #20]
 80046b4:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b8:	698c      	ldr	r4, [r1, #24]
 80046ba:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80046be:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046c0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80046c2:	684a      	ldr	r2, [r1, #4]
 80046c4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80046c6:	6203      	str	r3, [r0, #32]
}
 80046c8:	bc30      	pop	{r4, r5}
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00

080046d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80046d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80046d2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f000 808c 	beq.w	80047f4 <HAL_TIM_PWM_ConfigChannel+0x124>
 80046dc:	4604      	mov	r4, r0
 80046de:	460d      	mov	r5, r1
 80046e0:	2301      	movs	r3, #1
 80046e2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80046e6:	2a14      	cmp	r2, #20
 80046e8:	d81e      	bhi.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x58>
 80046ea:	e8df f002 	tbb	[pc, r2]
 80046ee:	1d0b      	.short	0x1d0b
 80046f0:	1d211d1d 	.word	0x1d211d1d
 80046f4:	1d351d1d 	.word	0x1d351d1d
 80046f8:	1d481d1d 	.word	0x1d481d1d
 80046fc:	1d5c1d1d 	.word	0x1d5c1d1d
 8004700:	1d1d      	.short	0x1d1d
 8004702:	6f          	.byte	0x6f
 8004703:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004704:	6800      	ldr	r0, [r0, #0]
 8004706:	f7ff fc8d 	bl	8004024 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	6993      	ldr	r3, [r2, #24]
 800470e:	f043 0308 	orr.w	r3, r3, #8
 8004712:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	6993      	ldr	r3, [r2, #24]
 8004718:	f023 0304 	bic.w	r3, r3, #4
 800471c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	6993      	ldr	r3, [r2, #24]
 8004722:	6929      	ldr	r1, [r5, #16]
 8004724:	430b      	orrs	r3, r1
 8004726:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8004728:	2000      	movs	r0, #0
 800472a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 800472e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004730:	6800      	ldr	r0, [r0, #0]
 8004732:	f7ff ff87 	bl	8004644 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	6993      	ldr	r3, [r2, #24]
 800473a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800473e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	6993      	ldr	r3, [r2, #24]
 8004744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004748:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	6993      	ldr	r3, [r2, #24]
 800474e:	6929      	ldr	r1, [r5, #16]
 8004750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004754:	6193      	str	r3, [r2, #24]
      break;
 8004756:	e7e7      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	f7ff fcb1 	bl	80040c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	69d3      	ldr	r3, [r2, #28]
 8004762:	f043 0308 	orr.w	r3, r3, #8
 8004766:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	69d3      	ldr	r3, [r2, #28]
 800476c:	f023 0304 	bic.w	r3, r3, #4
 8004770:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	69d3      	ldr	r3, [r2, #28]
 8004776:	6929      	ldr	r1, [r5, #16]
 8004778:	430b      	orrs	r3, r1
 800477a:	61d3      	str	r3, [r2, #28]
      break;
 800477c:	e7d4      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	6800      	ldr	r0, [r0, #0]
 8004780:	f7ff fce4 	bl	800414c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004784:	6822      	ldr	r2, [r4, #0]
 8004786:	69d3      	ldr	r3, [r2, #28]
 8004788:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800478c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	69d3      	ldr	r3, [r2, #28]
 8004792:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004796:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004798:	6822      	ldr	r2, [r4, #0]
 800479a:	69d3      	ldr	r3, [r2, #28]
 800479c:	6929      	ldr	r1, [r5, #16]
 800479e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047a2:	61d3      	str	r3, [r2, #28]
      break;
 80047a4:	e7c0      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a6:	6800      	ldr	r0, [r0, #0]
 80047a8:	f7ff fd06 	bl	80041b8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80047ba:	f023 0304 	bic.w	r3, r3, #4
 80047be:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80047c4:	6929      	ldr	r1, [r5, #16]
 80047c6:	430b      	orrs	r3, r1
 80047c8:	6553      	str	r3, [r2, #84]	@ 0x54
      break;
 80047ca:	e7ad      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f7ff fd27 	bl	8004220 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047d2:	6822      	ldr	r2, [r4, #0]
 80047d4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80047d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80047da:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80047e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047e4:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80047ea:	6929      	ldr	r1, [r5, #16]
 80047ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047f0:	6553      	str	r3, [r2, #84]	@ 0x54
      break;
 80047f2:	e799      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 80047f4:	2002      	movs	r0, #2
 80047f6:	e79a      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x5e>

080047f8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047f8:	f001 011f 	and.w	r1, r1, #31
 80047fc:	f04f 0c01 	mov.w	ip, #1
 8004800:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004804:	6a03      	ldr	r3, [r0, #32]
 8004806:	ea23 030c 	bic.w	r3, r3, ip
 800480a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800480c:	6a03      	ldr	r3, [r0, #32]
 800480e:	408a      	lsls	r2, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	6203      	str	r3, [r0, #32]
}
 8004814:	4770      	bx	lr
	...

08004818 <HAL_TIM_PWM_Start>:
{
 8004818:	b510      	push	{r4, lr}
 800481a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800481c:	2910      	cmp	r1, #16
 800481e:	d83c      	bhi.n	800489a <HAL_TIM_PWM_Start+0x82>
 8004820:	e8df f001 	tbb	[pc, r1]
 8004824:	3b3b3b09 	.word	0x3b3b3b09
 8004828:	3b3b3b1f 	.word	0x3b3b3b1f
 800482c:	3b3b3b26 	.word	0x3b3b3b26
 8004830:	3b3b3b2d 	.word	0x3b3b3b2d
 8004834:	34          	.byte	0x34
 8004835:	00          	.byte	0x00
 8004836:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800483a:	b2db      	uxtb	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	bf18      	it	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 8092 	bne.w	800496c <HAL_TIM_PWM_Start+0x154>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004848:	2910      	cmp	r1, #16
 800484a:	d87d      	bhi.n	8004948 <HAL_TIM_PWM_Start+0x130>
 800484c:	e8df f001 	tbb	[pc, r1]
 8004850:	7c7c7c2c 	.word	0x7c7c7c2c
 8004854:	7c7c7c6c 	.word	0x7c7c7c6c
 8004858:	7c7c7c70 	.word	0x7c7c7c70
 800485c:	7c7c7c74 	.word	0x7c7c7c74
 8004860:	78          	.byte	0x78
 8004861:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004862:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8004866:	b2db      	uxtb	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	bf18      	it	ne
 800486c:	2301      	movne	r3, #1
 800486e:	e7e8      	b.n	8004842 <HAL_TIM_PWM_Start+0x2a>
 8004870:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8004874:	b2db      	uxtb	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	bf18      	it	ne
 800487a:	2301      	movne	r3, #1
 800487c:	e7e1      	b.n	8004842 <HAL_TIM_PWM_Start+0x2a>
 800487e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004882:	b2db      	uxtb	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	bf18      	it	ne
 8004888:	2301      	movne	r3, #1
 800488a:	e7da      	b.n	8004842 <HAL_TIM_PWM_Start+0x2a>
 800488c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	bf18      	it	ne
 8004896:	2301      	movne	r3, #1
 8004898:	e7d3      	b.n	8004842 <HAL_TIM_PWM_Start+0x2a>
 800489a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	bf18      	it	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	e7cc      	b.n	8004842 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a8:	2302      	movs	r3, #2
 80048aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ae:	2201      	movs	r2, #1
 80048b0:	6820      	ldr	r0, [r4, #0]
 80048b2:	f7ff ffa1 	bl	80047f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004978 <HAL_TIM_PWM_Start+0x160>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <HAL_TIM_PWM_Start+0xc6>
 80048be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <HAL_TIM_PWM_Start+0xc6>
 80048c6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_TIM_PWM_Start+0xc6>
 80048ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <HAL_TIM_PWM_Start+0xc6>
 80048d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048da:	4293      	cmp	r3, r2
 80048dc:	d103      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 80048de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <HAL_TIM_PWM_Start+0x160>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d030      	beq.n	8004950 <HAL_TIM_PWM_Start+0x138>
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f2:	d02d      	beq.n	8004950 <HAL_TIM_PWM_Start+0x138>
 80048f4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d029      	beq.n	8004950 <HAL_TIM_PWM_Start+0x138>
 80048fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004900:	4293      	cmp	r3, r2
 8004902:	d025      	beq.n	8004950 <HAL_TIM_PWM_Start+0x138>
 8004904:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004908:	4293      	cmp	r3, r2
 800490a:	d021      	beq.n	8004950 <HAL_TIM_PWM_Start+0x138>
 800490c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8004910:	4293      	cmp	r3, r2
 8004912:	d01d      	beq.n	8004950 <HAL_TIM_PWM_Start+0x138>
 8004914:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004918:	4293      	cmp	r3, r2
 800491a:	d019      	beq.n	8004950 <HAL_TIM_PWM_Start+0x138>
    __HAL_TIM_ENABLE(htim);
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004924:	2000      	movs	r0, #0
 8004926:	e022      	b.n	800496e <HAL_TIM_PWM_Start+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004928:	2302      	movs	r3, #2
 800492a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800492e:	e7be      	b.n	80048ae <HAL_TIM_PWM_Start+0x96>
 8004930:	2302      	movs	r3, #2
 8004932:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004936:	e7ba      	b.n	80048ae <HAL_TIM_PWM_Start+0x96>
 8004938:	2302      	movs	r3, #2
 800493a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800493e:	e7b6      	b.n	80048ae <HAL_TIM_PWM_Start+0x96>
 8004940:	2302      	movs	r3, #2
 8004942:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004946:	e7b2      	b.n	80048ae <HAL_TIM_PWM_Start+0x96>
 8004948:	2302      	movs	r3, #2
 800494a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800494e:	e7ae      	b.n	80048ae <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004950:	6899      	ldr	r1, [r3, #8]
 8004952:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <HAL_TIM_PWM_Start+0x164>)
 8004954:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004956:	2a06      	cmp	r2, #6
 8004958:	d00a      	beq.n	8004970 <HAL_TIM_PWM_Start+0x158>
 800495a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800495e:	d009      	beq.n	8004974 <HAL_TIM_PWM_Start+0x15c>
      __HAL_TIM_ENABLE(htim);
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004968:	2000      	movs	r0, #0
 800496a:	e000      	b.n	800496e <HAL_TIM_PWM_Start+0x156>
    return HAL_ERROR;
 800496c:	2001      	movs	r0, #1
}
 800496e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004970:	2000      	movs	r0, #0
 8004972:	e7fc      	b.n	800496e <HAL_TIM_PWM_Start+0x156>
 8004974:	2000      	movs	r0, #0
 8004976:	e7fa      	b.n	800496e <HAL_TIM_PWM_Start+0x156>
 8004978:	40012c00 	.word	0x40012c00
 800497c:	00010007 	.word	0x00010007

08004980 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004980:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004984:	2a01      	cmp	r2, #1
 8004986:	d042      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8004988:	b430      	push	{r4, r5}
 800498a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800498c:	2201      	movs	r2, #1
 800498e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004992:	2202      	movs	r2, #2
 8004994:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004998:	6800      	ldr	r0, [r0, #0]
 800499a:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800499e:	4d1d      	ldr	r5, [pc, #116]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80049a0:	42a8      	cmp	r0, r5
 80049a2:	d003      	beq.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80049a4:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80049a8:	42a8      	cmp	r0, r5
 80049aa:	d103      	bne.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049ac:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049b0:	684d      	ldr	r5, [r1, #4]
 80049b2:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b8:	680d      	ldr	r5, [r1, #0]
 80049ba:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049bc:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4814      	ldr	r0, [pc, #80]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80049c2:	4282      	cmp	r2, r0
 80049c4:	d016      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049c6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80049ca:	d013      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049cc:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80049d0:	4282      	cmp	r2, r0
 80049d2:	d00f      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049d4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80049d8:	4282      	cmp	r2, r0
 80049da:	d00b      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049dc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80049e0:	4282      	cmp	r2, r0
 80049e2:	d007      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049e4:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 80049e8:	4282      	cmp	r2, r0
 80049ea:	d003      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049ec:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 80049f0:	4282      	cmp	r2, r0
 80049f2:	d104      	bne.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f8:	6889      	ldr	r1, [r1, #8]
 80049fa:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049fc:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	2000      	movs	r0, #0
 8004a06:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004a0a:	bc30      	pop	{r4, r5}
 8004a0c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a0e:	2002      	movs	r0, #2
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00

08004a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a18:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d03e      	beq.n	8004a9e <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8004a20:	b410      	push	{r4}
 8004a22:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8004a24:	2301      	movs	r3, #1
 8004a26:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a2a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a30:	6888      	ldr	r0, [r1, #8]
 8004a32:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a38:	6848      	ldr	r0, [r1, #4]
 8004a3a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a40:	6808      	ldr	r0, [r1, #0]
 8004a42:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a48:	6908      	ldr	r0, [r1, #16]
 8004a4a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a50:	6948      	ldr	r0, [r1, #20]
 8004a52:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a58:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8004a5a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a5c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8004a60:	6988      	ldr	r0, [r1, #24]
 8004a62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a66:	6810      	ldr	r0, [r2, #0]
 8004a68:	4c0e      	ldr	r4, [pc, #56]	@ (8004aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004a6a:	42a0      	cmp	r0, r4
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8004a6e:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8004a72:	42a0      	cmp	r0, r4
 8004a74:	d10c      	bne.n	8004a90 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a7a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8004a7c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a84:	69cc      	ldr	r4, [r1, #28]
 8004a86:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a88:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004a8c:	6a09      	ldr	r1, [r1, #32]
 8004a8e:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a90:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004a92:	2000      	movs	r0, #0
 8004a94:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8004a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a9c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a9e:	2002      	movs	r0, #2
}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00

08004aa8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aac:	4770      	bx	lr
	...

08004ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ab4:	f7fd f920 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ab8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004aba:	e003      	b.n	8004ac4 <LoopCopyDataInit>

08004abc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004abc:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004abe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ac0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ac2:	3104      	adds	r1, #4

08004ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ac4:	480a      	ldr	r0, [pc, #40]	@ (8004af0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ac8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004aca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004acc:	d3f6      	bcc.n	8004abc <CopyDataInit>
	ldr	r2, =_sbss
 8004ace:	4a0a      	ldr	r2, [pc, #40]	@ (8004af8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ad0:	e002      	b.n	8004ad8 <LoopFillZerobss>

08004ad2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ad2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ad4:	f842 3b04 	str.w	r3, [r2], #4

08004ad8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ad8:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <LoopForever+0x16>)
	cmp	r2, r3
 8004ada:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004adc:	d3f9      	bcc.n	8004ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ade:	f000 f8ed 	bl	8004cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ae2:	f7fc fab3 	bl	800104c <main>

08004ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8004ae6:	e7fe      	b.n	8004ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ae8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004aec:	08004e38 	.word	0x08004e38
	ldr	r0, =_sdata
 8004af0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004af4:	20000450 	.word	0x20000450
	ldr	r2, =_sbss
 8004af8:	20000450 	.word	0x20000450
	ldr	r3, = _ebss
 8004afc:	200008a0 	.word	0x200008a0

08004b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b00:	e7fe      	b.n	8004b00 <ADC1_2_IRQHandler>
	...

08004b04 <malloc>:
 8004b04:	4b02      	ldr	r3, [pc, #8]	@ (8004b10 <malloc+0xc>)
 8004b06:	4601      	mov	r1, r0
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f000 b82d 	b.w	8004b68 <_malloc_r>
 8004b0e:	bf00      	nop
 8004b10:	200003fc 	.word	0x200003fc

08004b14 <free>:
 8004b14:	4b02      	ldr	r3, [pc, #8]	@ (8004b20 <free+0xc>)
 8004b16:	4601      	mov	r1, r0
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	f000 b903 	b.w	8004d24 <_free_r>
 8004b1e:	bf00      	nop
 8004b20:	200003fc 	.word	0x200003fc

08004b24 <sbrk_aligned>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4e0f      	ldr	r6, [pc, #60]	@ (8004b64 <sbrk_aligned+0x40>)
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6831      	ldr	r1, [r6, #0]
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	b911      	cbnz	r1, 8004b36 <sbrk_aligned+0x12>
 8004b30:	f000 f8ae 	bl	8004c90 <_sbrk_r>
 8004b34:	6030      	str	r0, [r6, #0]
 8004b36:	4621      	mov	r1, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 f8a9 	bl	8004c90 <_sbrk_r>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	d103      	bne.n	8004b4a <sbrk_aligned+0x26>
 8004b42:	f04f 34ff 	mov.w	r4, #4294967295
 8004b46:	4620      	mov	r0, r4
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
 8004b4a:	1cc4      	adds	r4, r0, #3
 8004b4c:	f024 0403 	bic.w	r4, r4, #3
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d0f8      	beq.n	8004b46 <sbrk_aligned+0x22>
 8004b54:	1a21      	subs	r1, r4, r0
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 f89a 	bl	8004c90 <_sbrk_r>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d1f2      	bne.n	8004b46 <sbrk_aligned+0x22>
 8004b60:	e7ef      	b.n	8004b42 <sbrk_aligned+0x1e>
 8004b62:	bf00      	nop
 8004b64:	20000758 	.word	0x20000758

08004b68 <_malloc_r>:
 8004b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b6c:	1ccd      	adds	r5, r1, #3
 8004b6e:	f025 0503 	bic.w	r5, r5, #3
 8004b72:	3508      	adds	r5, #8
 8004b74:	2d0c      	cmp	r5, #12
 8004b76:	bf38      	it	cc
 8004b78:	250c      	movcc	r5, #12
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	db01      	blt.n	8004b84 <_malloc_r+0x1c>
 8004b80:	42a9      	cmp	r1, r5
 8004b82:	d904      	bls.n	8004b8e <_malloc_r+0x26>
 8004b84:	230c      	movs	r3, #12
 8004b86:	6033      	str	r3, [r6, #0]
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c64 <_malloc_r+0xfc>
 8004b92:	f000 f869 	bl	8004c68 <__malloc_lock>
 8004b96:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9a:	461c      	mov	r4, r3
 8004b9c:	bb44      	cbnz	r4, 8004bf0 <_malloc_r+0x88>
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f7ff ffbf 	bl	8004b24 <sbrk_aligned>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	4604      	mov	r4, r0
 8004baa:	d158      	bne.n	8004c5e <_malloc_r+0xf6>
 8004bac:	f8d8 4000 	ldr.w	r4, [r8]
 8004bb0:	4627      	mov	r7, r4
 8004bb2:	2f00      	cmp	r7, #0
 8004bb4:	d143      	bne.n	8004c3e <_malloc_r+0xd6>
 8004bb6:	2c00      	cmp	r4, #0
 8004bb8:	d04b      	beq.n	8004c52 <_malloc_r+0xea>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	4639      	mov	r1, r7
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	eb04 0903 	add.w	r9, r4, r3
 8004bc4:	f000 f864 	bl	8004c90 <_sbrk_r>
 8004bc8:	4581      	cmp	r9, r0
 8004bca:	d142      	bne.n	8004c52 <_malloc_r+0xea>
 8004bcc:	6821      	ldr	r1, [r4, #0]
 8004bce:	1a6d      	subs	r5, r5, r1
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f7ff ffa6 	bl	8004b24 <sbrk_aligned>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d03a      	beq.n	8004c52 <_malloc_r+0xea>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	442b      	add	r3, r5
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	f8d8 3000 	ldr.w	r3, [r8]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	bb62      	cbnz	r2, 8004c44 <_malloc_r+0xdc>
 8004bea:	f8c8 7000 	str.w	r7, [r8]
 8004bee:	e00f      	b.n	8004c10 <_malloc_r+0xa8>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	1b52      	subs	r2, r2, r5
 8004bf4:	d420      	bmi.n	8004c38 <_malloc_r+0xd0>
 8004bf6:	2a0b      	cmp	r2, #11
 8004bf8:	d917      	bls.n	8004c2a <_malloc_r+0xc2>
 8004bfa:	1961      	adds	r1, r4, r5
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	6025      	str	r5, [r4, #0]
 8004c00:	bf18      	it	ne
 8004c02:	6059      	strne	r1, [r3, #4]
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	bf08      	it	eq
 8004c08:	f8c8 1000 	streq.w	r1, [r8]
 8004c0c:	5162      	str	r2, [r4, r5]
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f82f 	bl	8004c74 <__malloc_unlock>
 8004c16:	f104 000b 	add.w	r0, r4, #11
 8004c1a:	1d23      	adds	r3, r4, #4
 8004c1c:	f020 0007 	bic.w	r0, r0, #7
 8004c20:	1ac2      	subs	r2, r0, r3
 8004c22:	bf1c      	itt	ne
 8004c24:	1a1b      	subne	r3, r3, r0
 8004c26:	50a3      	strne	r3, [r4, r2]
 8004c28:	e7af      	b.n	8004b8a <_malloc_r+0x22>
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	bf0c      	ite	eq
 8004c30:	f8c8 2000 	streq.w	r2, [r8]
 8004c34:	605a      	strne	r2, [r3, #4]
 8004c36:	e7eb      	b.n	8004c10 <_malloc_r+0xa8>
 8004c38:	4623      	mov	r3, r4
 8004c3a:	6864      	ldr	r4, [r4, #4]
 8004c3c:	e7ae      	b.n	8004b9c <_malloc_r+0x34>
 8004c3e:	463c      	mov	r4, r7
 8004c40:	687f      	ldr	r7, [r7, #4]
 8004c42:	e7b6      	b.n	8004bb2 <_malloc_r+0x4a>
 8004c44:	461a      	mov	r2, r3
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	42a3      	cmp	r3, r4
 8004c4a:	d1fb      	bne.n	8004c44 <_malloc_r+0xdc>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6053      	str	r3, [r2, #4]
 8004c50:	e7de      	b.n	8004c10 <_malloc_r+0xa8>
 8004c52:	230c      	movs	r3, #12
 8004c54:	6033      	str	r3, [r6, #0]
 8004c56:	4630      	mov	r0, r6
 8004c58:	f000 f80c 	bl	8004c74 <__malloc_unlock>
 8004c5c:	e794      	b.n	8004b88 <_malloc_r+0x20>
 8004c5e:	6005      	str	r5, [r0, #0]
 8004c60:	e7d6      	b.n	8004c10 <_malloc_r+0xa8>
 8004c62:	bf00      	nop
 8004c64:	2000075c 	.word	0x2000075c

08004c68 <__malloc_lock>:
 8004c68:	4801      	ldr	r0, [pc, #4]	@ (8004c70 <__malloc_lock+0x8>)
 8004c6a:	f000 b84b 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 8004c6e:	bf00      	nop
 8004c70:	2000089c 	.word	0x2000089c

08004c74 <__malloc_unlock>:
 8004c74:	4801      	ldr	r0, [pc, #4]	@ (8004c7c <__malloc_unlock+0x8>)
 8004c76:	f000 b846 	b.w	8004d06 <__retarget_lock_release_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	2000089c 	.word	0x2000089c

08004c80 <memset>:
 8004c80:	4402      	add	r2, r0
 8004c82:	4603      	mov	r3, r0
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d100      	bne.n	8004c8a <memset+0xa>
 8004c88:	4770      	bx	lr
 8004c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8e:	e7f9      	b.n	8004c84 <memset+0x4>

08004c90 <_sbrk_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d06      	ldr	r5, [pc, #24]	@ (8004cac <_sbrk_r+0x1c>)
 8004c94:	2300      	movs	r3, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	f7fd f80e 	bl	8001cbc <_sbrk>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d102      	bne.n	8004caa <_sbrk_r+0x1a>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b103      	cbz	r3, 8004caa <_sbrk_r+0x1a>
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	20000898 	.word	0x20000898

08004cb0 <__errno>:
 8004cb0:	4b01      	ldr	r3, [pc, #4]	@ (8004cb8 <__errno+0x8>)
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	200003fc 	.word	0x200003fc

08004cbc <__libc_init_array>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004cf4 <__libc_init_array+0x38>)
 8004cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8004cf8 <__libc_init_array+0x3c>)
 8004cc2:	1b64      	subs	r4, r4, r5
 8004cc4:	10a4      	asrs	r4, r4, #2
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	42a6      	cmp	r6, r4
 8004cca:	d109      	bne.n	8004ce0 <__libc_init_array+0x24>
 8004ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8004cfc <__libc_init_array+0x40>)
 8004cce:	4c0c      	ldr	r4, [pc, #48]	@ (8004d00 <__libc_init_array+0x44>)
 8004cd0:	f000 f872 	bl	8004db8 <_init>
 8004cd4:	1b64      	subs	r4, r4, r5
 8004cd6:	10a4      	asrs	r4, r4, #2
 8004cd8:	2600      	movs	r6, #0
 8004cda:	42a6      	cmp	r6, r4
 8004cdc:	d105      	bne.n	8004cea <__libc_init_array+0x2e>
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce4:	4798      	blx	r3
 8004ce6:	3601      	adds	r6, #1
 8004ce8:	e7ee      	b.n	8004cc8 <__libc_init_array+0xc>
 8004cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cee:	4798      	blx	r3
 8004cf0:	3601      	adds	r6, #1
 8004cf2:	e7f2      	b.n	8004cda <__libc_init_array+0x1e>
 8004cf4:	08004e28 	.word	0x08004e28
 8004cf8:	08004e28 	.word	0x08004e28
 8004cfc:	08004e28 	.word	0x08004e28
 8004d00:	08004e2c 	.word	0x08004e2c

08004d04 <__retarget_lock_acquire_recursive>:
 8004d04:	4770      	bx	lr

08004d06 <__retarget_lock_release_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <memcpy>:
 8004d08:	440a      	add	r2, r1
 8004d0a:	4291      	cmp	r1, r2
 8004d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d10:	d100      	bne.n	8004d14 <memcpy+0xc>
 8004d12:	4770      	bx	lr
 8004d14:	b510      	push	{r4, lr}
 8004d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	d1f9      	bne.n	8004d16 <memcpy+0xe>
 8004d22:	bd10      	pop	{r4, pc}

08004d24 <_free_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4605      	mov	r5, r0
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d041      	beq.n	8004db0 <_free_r+0x8c>
 8004d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d30:	1f0c      	subs	r4, r1, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bfb8      	it	lt
 8004d36:	18e4      	addlt	r4, r4, r3
 8004d38:	f7ff ff96 	bl	8004c68 <__malloc_lock>
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004db4 <_free_r+0x90>)
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	b933      	cbnz	r3, 8004d50 <_free_r+0x2c>
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	6014      	str	r4, [r2, #0]
 8004d46:	4628      	mov	r0, r5
 8004d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d4c:	f7ff bf92 	b.w	8004c74 <__malloc_unlock>
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d908      	bls.n	8004d66 <_free_r+0x42>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	1821      	adds	r1, r4, r0
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf01      	itttt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	1809      	addeq	r1, r1, r0
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	e7ed      	b.n	8004d42 <_free_r+0x1e>
 8004d66:	461a      	mov	r2, r3
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b10b      	cbz	r3, 8004d70 <_free_r+0x4c>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d9fa      	bls.n	8004d66 <_free_r+0x42>
 8004d70:	6811      	ldr	r1, [r2, #0]
 8004d72:	1850      	adds	r0, r2, r1
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d10b      	bne.n	8004d90 <_free_r+0x6c>
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	4401      	add	r1, r0
 8004d7c:	1850      	adds	r0, r2, r1
 8004d7e:	4283      	cmp	r3, r0
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	d1e0      	bne.n	8004d46 <_free_r+0x22>
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	6053      	str	r3, [r2, #4]
 8004d8a:	4408      	add	r0, r1
 8004d8c:	6010      	str	r0, [r2, #0]
 8004d8e:	e7da      	b.n	8004d46 <_free_r+0x22>
 8004d90:	d902      	bls.n	8004d98 <_free_r+0x74>
 8004d92:	230c      	movs	r3, #12
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	e7d6      	b.n	8004d46 <_free_r+0x22>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	1821      	adds	r1, r4, r0
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	bf04      	itt	eq
 8004da0:	6819      	ldreq	r1, [r3, #0]
 8004da2:	685b      	ldreq	r3, [r3, #4]
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	bf04      	itt	eq
 8004da8:	1809      	addeq	r1, r1, r0
 8004daa:	6021      	streq	r1, [r4, #0]
 8004dac:	6054      	str	r4, [r2, #4]
 8004dae:	e7ca      	b.n	8004d46 <_free_r+0x22>
 8004db0:	bd38      	pop	{r3, r4, r5, pc}
 8004db2:	bf00      	nop
 8004db4:	2000075c 	.word	0x2000075c

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
