
ST7789_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d6a0  08007178  08007178  00008178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014818  08014818  0001601c  2**0
                  CONTENTS
  4 .ARM          00000000  08014818  08014818  0001601c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014818  08014818  0001601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014818  08014818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801481c  0801481c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08014820  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000001c  0801483c  0001601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  0801483c  000161c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c41b  00000000  00000000  0001604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002150  00000000  00000000  00022467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  000245b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000976  00000000  00000000  00025248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a93  00000000  00000000  00025bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f51d  00000000  00000000  0004c651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e77f7  00000000  00000000  0005bb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d8  00000000  00000000  001433a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00146a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007160 	.word	0x08007160

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08007160 	.word	0x08007160

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_DMA_Init+0x48>)
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <MX_DMA_Init+0x48>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_DMA_Init+0x48>)
 8000b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	200c      	movs	r0, #12
 8000b88:	f001 fa73 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b8c:	200c      	movs	r0, #12
 8000b8e:	f001 fa8c 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200d      	movs	r0, #13
 8000b98:	f001 fa6b 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b9c:	200d      	movs	r0, #13
 8000b9e:	f001 fa84 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <MX_GPIO_Init>:
     PB7   ------> USART1_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4bbc      	ldr	r3, [pc, #752]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	4abb      	ldr	r2, [pc, #748]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd2:	4bb9      	ldr	r3, [pc, #740]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4bb6      	ldr	r3, [pc, #728]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4ab5      	ldr	r2, [pc, #724]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4bb3      	ldr	r3, [pc, #716]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4bb0      	ldr	r3, [pc, #704]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4aaf      	ldr	r2, [pc, #700]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4bad      	ldr	r3, [pc, #692]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4baa      	ldr	r3, [pc, #680]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4aa9      	ldr	r2, [pc, #676]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4ba7      	ldr	r3, [pc, #668]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4ba4      	ldr	r3, [pc, #656]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	4aa3      	ldr	r2, [pc, #652]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c32:	4ba1      	ldr	r3, [pc, #644]	@ (8000eb8 <MX_GPIO_Init+0x308>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000c44:	489d      	ldr	r0, [pc, #628]	@ (8000ebc <MX_GPIO_Init+0x30c>)
 8000c46:	f001 fdfb 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D9_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f248 0104 	movw	r1, #32772	@ 0x8004
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c54:	f001 fdf4 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2124      	movs	r1, #36	@ 0x24
 8000c5c:	4898      	ldr	r0, [pc, #608]	@ (8000ec0 <MX_GPIO_Init+0x310>)
 8000c5e:	f001 fdef 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000c62:	2200      	movs	r2, #0
 8000c64:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c68:	4895      	ldr	r0, [pc, #596]	@ (8000ec0 <MX_GPIO_Init+0x310>)
 8000c6a:	f001 fde9 	bl	8002840 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000c74:	4893      	ldr	r0, [pc, #588]	@ (8000ec4 <MX_GPIO_Init+0x314>)
 8000c76:	f001 fde3 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c80:	4890      	ldr	r0, [pc, #576]	@ (8000ec4 <MX_GPIO_Init+0x314>)
 8000c82:	f001 fddd 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000c8c:	488e      	ldr	r0, [pc, #568]	@ (8000ec8 <MX_GPIO_Init+0x318>)
 8000c8e:	f001 fdd7 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9c:	f001 fdd0 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4885      	ldr	r0, [pc, #532]	@ (8000ebc <MX_GPIO_Init+0x30c>)
 8000ca6:	f001 fdcb 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000caa:	f240 1315 	movw	r3, #277	@ 0x115
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	487e      	ldr	r0, [pc, #504]	@ (8000ebc <MX_GPIO_Init+0x30c>)
 8000cc4:	f001 fc12 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000cc8:	236a      	movs	r3, #106	@ 0x6a
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ccc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4877      	ldr	r0, [pc, #476]	@ (8000ebc <MX_GPIO_Init+0x30c>)
 8000cde:	f001 fc05 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4873      	ldr	r0, [pc, #460]	@ (8000ec8 <MX_GPIO_Init+0x318>)
 8000cfa:	f001 fbf7 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000cfe:	233f      	movs	r3, #63	@ 0x3f
 8000d00:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d02:	230b      	movs	r3, #11
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	486d      	ldr	r0, [pc, #436]	@ (8000ec8 <MX_GPIO_Init+0x318>)
 8000d12:	f001 fbeb 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d16:	2303      	movs	r3, #3
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d26:	2308      	movs	r3, #8
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d34:	f001 fbda 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D9_Pin;
 8000d38:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d46:	2302      	movs	r3, #2
 8000d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d54:	f001 fbca 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d76:	f001 fbb9 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d90:	f001 fbac 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d94:	2301      	movs	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4845      	ldr	r0, [pc, #276]	@ (8000ec0 <MX_GPIO_Init+0x310>)
 8000daa:	f001 fb9f 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000dae:	2302      	movs	r3, #2
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000db2:	230b      	movs	r3, #11
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	483f      	ldr	r0, [pc, #252]	@ (8000ec0 <MX_GPIO_Init+0x310>)
 8000dc2:	f001 fb93 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4838      	ldr	r0, [pc, #224]	@ (8000ec0 <MX_GPIO_Init+0x310>)
 8000dde:	f001 fb85 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000de2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000df4:	2306      	movs	r3, #6
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482f      	ldr	r0, [pc, #188]	@ (8000ebc <MX_GPIO_Init+0x30c>)
 8000e00:	f001 fb74 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e04:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000e08:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e16:	230a      	movs	r3, #10
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4826      	ldr	r0, [pc, #152]	@ (8000ebc <MX_GPIO_Init+0x30c>)
 8000e22:	f001 fb63 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	481f      	ldr	r0, [pc, #124]	@ (8000ec0 <MX_GPIO_Init+0x310>)
 8000e44:	f001 fb52 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000e48:	f24f 0330 	movw	r3, #61488	@ 0xf030
 8000e4c:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4817      	ldr	r0, [pc, #92]	@ (8000ec0 <MX_GPIO_Init+0x310>)
 8000e62:	f001 fb43 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000e66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4810      	ldr	r0, [pc, #64]	@ (8000ec4 <MX_GPIO_Init+0x314>)
 8000e84:	f001 fb32 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e88:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000e8c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <MX_GPIO_Init+0x314>)
 8000ea0:	f001 fb24 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ea4:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
 8000eb6:	e009      	b.n	8000ecc <MX_GPIO_Init+0x31c>
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48001000 	.word	0x48001000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000c00 	.word	0x48000c00
 8000ec8:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	485b      	ldr	r0, [pc, #364]	@ (8001040 <MX_GPIO_Init+0x490>)
 8000ed4:	f001 fb0a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ed8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4854      	ldr	r0, [pc, #336]	@ (8001044 <MX_GPIO_Init+0x494>)
 8000ef2:	f001 fafb 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ef6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	484d      	ldr	r0, [pc, #308]	@ (8001044 <MX_GPIO_Init+0x494>)
 8000f0e:	f001 faed 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 8000f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2e:	f001 fadd 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4a:	f001 facf 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f60:	230a      	movs	r3, #10
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f001 fabd 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f72:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f84:	2306      	movs	r3, #6
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482d      	ldr	r0, [pc, #180]	@ (8001044 <MX_GPIO_Init+0x494>)
 8000f90:	f001 faac 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f94:	2302      	movs	r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4824      	ldr	r0, [pc, #144]	@ (8001040 <MX_GPIO_Init+0x490>)
 8000fb0:	f001 fa9c 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000fb4:	2378      	movs	r3, #120	@ 0x78
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481c      	ldr	r0, [pc, #112]	@ (8001040 <MX_GPIO_Init+0x490>)
 8000fd0:	f001 fa8c 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000fd4:	23c0      	movs	r3, #192	@ 0xc0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4816      	ldr	r0, [pc, #88]	@ (8001048 <MX_GPIO_Init+0x498>)
 8000ff0:	f001 fa7c 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ff4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001006:	2304      	movs	r3, #4
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_GPIO_Init+0x498>)
 8001012:	f001 fa6b 	bl	80024ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2017      	movs	r0, #23
 800101c:	f001 f829 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001020:	2017      	movs	r0, #23
 8001022:	f001 f842 	bl	80020aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2028      	movs	r0, #40	@ 0x28
 800102c:	f001 f821 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001030:	2028      	movs	r0, #40	@ 0x28
 8001032:	f001 f83a 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	48000c00 	.word	0x48000c00
 8001044:	48000800 	.word	0x48000800
 8001048:	48000400 	.word	0x48000400

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f000 fe9b 	bl	8001d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f8ad 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f7ff fda9 	bl	8000bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 800105e:	f7ff fd81 	bl	8000b64 <MX_DMA_Init>
  MX_SPI1_Init();
 8001062:	f000 f8ff 	bl	8001264 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8001066:	f000 fe2d 	bl	8001cc4 <LCD_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UG_FillScreen(C_BLACK);
 800106a:	2000      	movs	r0, #0
 800106c:	f003 f81e 	bl	80040ac <UG_FillScreen>
	  UG_FillFrame(70, 150, 170, 210, C_BLACK);
 8001070:	2300      	movs	r3, #0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	23d2      	movs	r3, #210	@ 0xd2
 8001076:	22aa      	movs	r2, #170	@ 0xaa
 8001078:	2196      	movs	r1, #150	@ 0x96
 800107a:	2046      	movs	r0, #70	@ 0x46
 800107c:	f003 f83a 	bl	80040f4 <UG_FillFrame>
	  LCD_PutStr(120-32, 150, "80", DEFAULT_FONT, C_WHITE, C_BLACK);
 8001080:	2300      	movs	r3, #0
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <main+0x144>)
 800108c:	4a41      	ldr	r2, [pc, #260]	@ (8001194 <main+0x148>)
 800108e:	2196      	movs	r1, #150	@ 0x96
 8001090:	2058      	movs	r0, #88	@ 0x58
 8001092:	f000 fdd9 	bl	8001c48 <LCD_PutStr>
	  UG_DrawDashboard(120, 150, 100, 90, 0, 80, C_YELLOW);
 8001096:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8001198 <main+0x14c>
 80010a0:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800119c <main+0x150>
 80010a4:	235a      	movs	r3, #90	@ 0x5a
 80010a6:	2264      	movs	r2, #100	@ 0x64
 80010a8:	2196      	movs	r1, #150	@ 0x96
 80010aa:	2078      	movs	r0, #120	@ 0x78
 80010ac:	f004 f84c 	bl	8005148 <UG_DrawDashboard>
	  HAL_Delay(1000);
 80010b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b4:	f000 fede 	bl	8001e74 <HAL_Delay>
	  UG_FillFrame(70, 150, 170, 210, C_BLACK);
 80010b8:	2300      	movs	r3, #0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	23d2      	movs	r3, #210	@ 0xd2
 80010be:	22aa      	movs	r2, #170	@ 0xaa
 80010c0:	2196      	movs	r1, #150	@ 0x96
 80010c2:	2046      	movs	r0, #70	@ 0x46
 80010c4:	f003 f816 	bl	80040f4 <UG_FillFrame>
	  LCD_PutStr(120-32, 150, "60", DEFAULT_FONT, C_WHITE, C_BLACK);
 80010c8:	2300      	movs	r3, #0
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <main+0x144>)
 80010d4:	4a32      	ldr	r2, [pc, #200]	@ (80011a0 <main+0x154>)
 80010d6:	2196      	movs	r1, #150	@ 0x96
 80010d8:	2058      	movs	r0, #88	@ 0x58
 80010da:	f000 fdb5 	bl	8001c48 <LCD_PutStr>
	  UG_DrawDashboard(120, 150, 100, 90, 80, 60, C_BLACK);
 80010de:	2300      	movs	r3, #0
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80011a4 <main+0x158>
 80010e6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001198 <main+0x14c>
 80010ea:	235a      	movs	r3, #90	@ 0x5a
 80010ec:	2264      	movs	r2, #100	@ 0x64
 80010ee:	2196      	movs	r1, #150	@ 0x96
 80010f0:	2078      	movs	r0, #120	@ 0x78
 80010f2:	f004 f829 	bl	8005148 <UG_DrawDashboard>
	  HAL_Delay(1000);
 80010f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010fa:	f000 febb 	bl	8001e74 <HAL_Delay>
	  UG_FillFrame(70, 150, 170, 210, C_BLACK);
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	23d2      	movs	r3, #210	@ 0xd2
 8001104:	22aa      	movs	r2, #170	@ 0xaa
 8001106:	2196      	movs	r1, #150	@ 0x96
 8001108:	2046      	movs	r0, #70	@ 0x46
 800110a:	f002 fff3 	bl	80040f4 <UG_FillFrame>
	  LCD_PutStr(120-48, 150, "100", DEFAULT_FONT, C_WHITE, C_BLACK);
 800110e:	2300      	movs	r3, #0
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <main+0x144>)
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <main+0x15c>)
 800111c:	2196      	movs	r1, #150	@ 0x96
 800111e:	2048      	movs	r0, #72	@ 0x48
 8001120:	f000 fd92 	bl	8001c48 <LCD_PutStr>
	  UG_DrawDashboard(120, 150, 100, 90, 60, 100, C_YELLOW);
 8001124:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80011ac <main+0x160>
 800112e:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80011a4 <main+0x158>
 8001132:	235a      	movs	r3, #90	@ 0x5a
 8001134:	2264      	movs	r2, #100	@ 0x64
 8001136:	2196      	movs	r1, #150	@ 0x96
 8001138:	2078      	movs	r0, #120	@ 0x78
 800113a:	f004 f805 	bl	8005148 <UG_DrawDashboard>
	  HAL_Delay(1000);
 800113e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001142:	f000 fe97 	bl	8001e74 <HAL_Delay>
	  UG_FillFrame(70, 150, 170, 210, C_BLACK);
 8001146:	2300      	movs	r3, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	23d2      	movs	r3, #210	@ 0xd2
 800114c:	22aa      	movs	r2, #170	@ 0xaa
 800114e:	2196      	movs	r1, #150	@ 0x96
 8001150:	2046      	movs	r0, #70	@ 0x46
 8001152:	f002 ffcf 	bl	80040f4 <UG_FillFrame>
	  LCD_PutStr(120-32, 150, "20", DEFAULT_FONT, C_WHITE, C_BLACK);
 8001156:	2300      	movs	r3, #0
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <main+0x144>)
 8001162:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <main+0x164>)
 8001164:	2196      	movs	r1, #150	@ 0x96
 8001166:	2058      	movs	r0, #88	@ 0x58
 8001168:	f000 fd6e 	bl	8001c48 <LCD_PutStr>
	  UG_DrawDashboard(120, 150, 100, 90, 100, 20, C_BLACK);
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001174:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80011ac <main+0x160>
 8001178:	235a      	movs	r3, #90	@ 0x5a
 800117a:	2264      	movs	r2, #100	@ 0x64
 800117c:	2196      	movs	r1, #150	@ 0x96
 800117e:	2078      	movs	r0, #120	@ 0x78
 8001180:	f003 ffe2 	bl	8005148 <UG_DrawDashboard>
	  HAL_Delay(1000);
 8001184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001188:	f000 fe74 	bl	8001e74 <HAL_Delay>
	  UG_FillScreen(C_BLACK);
 800118c:	bf00      	nop
 800118e:	e76c      	b.n	800106a <main+0x1e>
 8001190:	08007214 	.word	0x08007214
 8001194:	08007178 	.word	0x08007178
 8001198:	42a00000 	.word	0x42a00000
 800119c:	00000000 	.word	0x00000000
 80011a0:	0800717c 	.word	0x0800717c
 80011a4:	42700000 	.word	0x42700000
 80011a8:	08007180 	.word	0x08007180
 80011ac:	42c80000 	.word	0x42c80000
 80011b0:	08007184 	.word	0x08007184

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b096      	sub	sp, #88	@ 0x58
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2244      	movs	r2, #68	@ 0x44
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 ff1a 	bl	8005ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	463b      	mov	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011da:	f001 fb7b 	bl	80028d4 <HAL_PWREx_ControlVoltageScaling>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011e4:	f000 f838 	bl	8001258 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011e8:	2310      	movs	r3, #16
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f4:	2360      	movs	r3, #96	@ 0x60
 80011f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011fc:	2301      	movs	r3, #1
 80011fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001204:	2314      	movs	r3, #20
 8001206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001208:	2307      	movs	r3, #7
 800120a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fbb1 	bl	8002980 <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001224:	f000 f818 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2303      	movs	r3, #3
 800122e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f001 ff79 	bl	8003138 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800124c:	f000 f804 	bl	8001258 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3758      	adds	r7, #88	@ 0x58
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <MX_SPI1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001270:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800127e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001282:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001286:	2202      	movs	r2, #2
 8001288:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_SPI1_Init+0x74>)
 8001292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001296:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_SPI1_Init+0x74>)
 800129a:	2208      	movs	r2, #8
 800129c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012b2:	2207      	movs	r2, #7
 80012b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012be:	2208      	movs	r2, #8
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_SPI1_Init+0x74>)
 80012c4:	f002 f924 	bl	8003510 <HAL_SPI_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f7ff ffc3 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000038 	.word	0x20000038
 80012dc:	40013000 	.word	0x40013000

080012e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a41      	ldr	r2, [pc, #260]	@ (8001404 <HAL_SPI_MspInit+0x124>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d17b      	bne.n	80013fa <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	4b41      	ldr	r3, [pc, #260]	@ (8001408 <HAL_SPI_MspInit+0x128>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	4a40      	ldr	r2, [pc, #256]	@ (8001408 <HAL_SPI_MspInit+0x128>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130c:	6613      	str	r3, [r2, #96]	@ 0x60
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <HAL_SPI_MspInit+0x128>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <HAL_SPI_MspInit+0x128>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a3a      	ldr	r2, [pc, #232]	@ (8001408 <HAL_SPI_MspInit+0x128>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b38      	ldr	r3, [pc, #224]	@ (8001408 <HAL_SPI_MspInit+0x128>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001332:	23e0      	movs	r3, #224	@ 0xe0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001350:	f001 f8cc 	bl	80024ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 8001356:	4a2e      	ldr	r2, [pc, #184]	@ (8001410 <HAL_SPI_MspInit+0x130>)
 8001358:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800135a:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 800135c:	2201      	movs	r2, #1
 800135e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 800136e:	2280      	movs	r2, #128	@ 0x80
 8001370:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800137e:	4b23      	ldr	r3, [pc, #140]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 8001386:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800138a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800138c:	481f      	ldr	r0, [pc, #124]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 800138e:	f000 fea7 	bl	80020e0 <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8001398:	f7ff ff5e 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a1b      	ldr	r2, [pc, #108]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 80013a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80013a2:	4a1a      	ldr	r2, [pc, #104]	@ (800140c <HAL_SPI_MspInit+0x12c>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <HAL_SPI_MspInit+0x138>)
 80013ac:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013b6:	2210      	movs	r2, #16
 80013b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013de:	480d      	ldr	r0, [pc, #52]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013e0:	f000 fe7e 	bl	80020e0 <HAL_DMA_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80013ea:	f7ff ff35 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80013f4:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <HAL_SPI_MspInit+0x134>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40013000 	.word	0x40013000
 8001408:	40021000 	.word	0x40021000
 800140c:	2000009c 	.word	0x2000009c
 8001410:	4002001c 	.word	0x4002001c
 8001414:	200000e4 	.word	0x200000e4
 8001418:	40020030 	.word	0x40020030

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_MspInit+0x44>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <HAL_MspInit+0x44>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6613      	str	r3, [r2, #96]	@ 0x60
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_MspInit+0x44>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_MspInit+0x44>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <HAL_MspInit+0x44>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	6593      	str	r3, [r2, #88]	@ 0x58
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_MspInit+0x44>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <NMI_Handler+0x4>

0800146c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <MemManage_Handler+0x4>

0800147c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <UsageFault_Handler+0x4>

0800148c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 fcbb 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <DMA1_Channel2_IRQHandler+0x10>)
 80014ca:	f000 ff21 	bl	8002310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000009c 	.word	0x2000009c

080014d8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <DMA1_Channel3_IRQHandler+0x10>)
 80014de:	f000 ff17 	bl	8002310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000e4 	.word	0x200000e4

080014ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80014f0:	2020      	movs	r0, #32
 80014f2:	f001 f9bd 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80014f6:	2040      	movs	r0, #64	@ 0x40
 80014f8:	f001 f9ba 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80014fc:	2080      	movs	r0, #128	@ 0x80
 80014fe:	f001 f9b7 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001502:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001506:	f001 f9b3 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}

0800150e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001512:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001516:	f001 f9ab 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800151a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800151e:	f001 f9a7 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001522:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001526:	f001 f9a3 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800152a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800152e:	f001 f99f 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001532:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001536:	f001 f99b 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800159c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001568:	f7ff ffea 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <LoopForever+0xe>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	@ (80015b0 <LoopForever+0x16>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f004 fd3b 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001596:	f7ff fd59 	bl	800104c <main>

0800159a <LoopForever>:

LoopForever:
    b LoopForever
 800159a:	e7fe      	b.n	800159a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800159c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80015a8:	08014820 	.word	0x08014820
  ldr r2, =_sbss
 80015ac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80015b0:	200001c0 	.word	0x200001c0

080015b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_2_IRQHandler>
	...

080015b8 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

void setSPI_Size(int8_t size) {
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
    if (config.spi_sz != size) {
 80015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <setSPI_Size+0x88>)
 80015c4:	f993 3000 	ldrsb.w	r3, [r3]
 80015c8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d031      	beq.n	8001634 <setSPI_Size+0x7c>
        __HAL_SPI_DISABLE(&LCD_HANDLE);
 80015d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <setSPI_Size+0x8c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <setSPI_Size+0x8c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015de:	601a      	str	r2, [r3, #0]
        config.spi_sz = size;
 80015e0:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <setSPI_Size+0x88>)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	7013      	strb	r3, [r2, #0]
        if (size == mode_16bit) {
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10c      	bne.n	8001608 <setSPI_Size+0x50>
            LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <setSPI_Size+0x8c>)
 80015f0:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80015f4:	60da      	str	r2, [r3, #12]
            MODIFY_REG(LCD_HANDLE.Instance->CR2, SPI_CR2_DS, SPI_DATASIZE_16BIT);
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <setSPI_Size+0x8c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <setSPI_Size+0x8c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 6270 	orr.w	r2, r2, #3840	@ 0xf00
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	e00d      	b.n	8001624 <setSPI_Size+0x6c>
        } else {
            LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <setSPI_Size+0x8c>)
 800160a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800160e:	60da      	str	r2, [r3, #12]
            MODIFY_REG(LCD_HANDLE.Instance->CR2, SPI_CR2_DS, SPI_DATASIZE_8BIT);
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <setSPI_Size+0x8c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <setSPI_Size+0x8c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001622:	605a      	str	r2, [r3, #4]
        }
        __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <setSPI_Size+0x8c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <setSPI_Size+0x8c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001632:	601a      	str	r2, [r3, #0]
    }
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20000004 	.word	0x20000004
 8001644:	20000038 	.word	0x20000038

08001648 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8001658:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ffab 	bl	80015b8 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8001662:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <setDMAMemMode+0x10c>)
 8001664:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001668:	461a      	mov	r2, r3
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	429a      	cmp	r2, r3
 800166e:	d106      	bne.n	800167e <setDMAMemMode+0x36>
 8001670:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <setDMAMemMode+0x10c>)
 8001672:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001676:	461a      	mov	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	429a      	cmp	r2, r3
 800167c:	d066      	beq.n	800174c <setDMAMemMode+0x104>
    config.dma_sz =size;
 800167e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001682:	4b34      	ldr	r3, [pc, #208]	@ (8001754 <setDMAMemMode+0x10c>)
 8001684:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8001686:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800168a:	4b32      	ldr	r3, [pc, #200]	@ (8001754 <setDMAMemMode+0x10c>)
 800168c:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 800168e:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <setDMAMemMode+0x110>)
 8001690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <setDMAMemMode+0x110>)
 8001698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 80016a2:	bf00      	nop
 80016a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <setDMAMemMode+0x110>)
 80016a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f7      	bne.n	80016a4 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d10e      	bne.n	80016d8 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <setDMAMemMode+0x110>)
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80016c2:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <setDMAMemMode+0x110>)
 80016c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <setDMAMemMode+0x110>)
 80016cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e00d      	b.n	80016f4 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <setDMAMemMode+0x110>)
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <setDMAMemMode+0x110>)
 80016e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <setDMAMemMode+0x110>)
 80016ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016f2:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d116      	bne.n	8001728 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <setDMAMemMode+0x110>)
 80016fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001702:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <setDMAMemMode+0x110>)
 8001706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001708:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <setDMAMemMode+0x110>)
 8001710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <setDMAMemMode+0x110>)
 800171c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 62a0 	orr.w	r2, r2, #1280	@ 0x500
 8001724:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8001726:	e011      	b.n	800174c <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <setDMAMemMode+0x110>)
 800172a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <setDMAMemMode+0x110>)
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <setDMAMemMode+0x110>)
 800173a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <setDMAMemMode+0x110>)
 8001742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000004 	.word	0x20000004
 8001758:	20000038 	.word	0x20000038

0800175c <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff ff25 	bl	80015b8 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 800176e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001772:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001776:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001778:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800177c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001780:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	2201      	movs	r2, #1
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <LCD_WriteCommand+0x68>)
 800178c:	f001 ff63 	bl	8003656 <HAL_SPI_Transmit>
  if(argc){
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00d      	beq.n	80017b2 <LCD_WriteCommand+0x56>
    LCD_PIN(LCD_DC,SET);
 8001796:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800179a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800179e:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <LCD_WriteCommand+0x68>)
 80017ae:	f001 ff52 	bl	8003656 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80017b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80017b6:	2204      	movs	r2, #4
 80017b8:	619a      	str	r2, [r3, #24]
#endif
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000038 	.word	0x20000038

080017c8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 80017d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80017d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017da:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80017dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80017e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017e4:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80017e6:	e049      	b.n	800187c <LCD_WriteData+0xb4>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ee:	4293      	cmp	r3, r2
 80017f0:	bf28      	it	cs
 80017f2:	4613      	movcs	r3, r2
 80017f4:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d924      	bls.n	8001846 <LCD_WriteData+0x7e>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	461a      	mov	r2, r3
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4824      	ldr	r0, [pc, #144]	@ (8001894 <LCD_WriteData+0xcc>)
 8001804:	f002 f89c 	bl	8003940 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8001808:	bf00      	nop
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <LCD_WriteData+0xcc>)
 800180c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fe2d 	bl	800246e <HAL_DMA_GetState>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d1f7      	bne.n	800180a <LCD_WriteData+0x42>
      if(config.dma_mem_inc==mem_increase){
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <LCD_WriteData+0xd0>)
 800181c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d127      	bne.n	8001874 <LCD_WriteData+0xac>
        if(config.dma_sz==mode_16bit)
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <LCD_WriteData+0xd0>)
 8001826:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d104      	bne.n	8001838 <LCD_WriteData+0x70>
          buff += chunk_size;
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	e01d      	b.n	8001874 <LCD_WriteData+0xac>
        else
          buff += chunk_size*2;
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	e016      	b.n	8001874 <LCD_WriteData+0xac>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001846:	89fa      	ldrh	r2, [r7, #14]
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4811      	ldr	r0, [pc, #68]	@ (8001894 <LCD_WriteData+0xcc>)
 8001850:	f001 ff01 	bl	8003656 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <LCD_WriteData+0xd0>)
 8001856:	f993 3000 	ldrsb.w	r3, [r3]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d104      	bne.n	8001868 <LCD_WriteData+0xa0>
        buff += chunk_size;
 800185e:	89fb      	ldrh	r3, [r7, #14]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e005      	b.n	8001874 <LCD_WriteData+0xac>
      else
        buff += chunk_size*2;
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	461a      	mov	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1b2      	bne.n	80017e8 <LCD_WriteData+0x20>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001882:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001886:	2204      	movs	r2, #4
 8001888:	619a      	str	r2, [r3, #24]
#endif
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000038 	.word	0x20000038
 8001898:	20000004 	.word	0x20000004

0800189c <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b08b      	sub	sp, #44	@ 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80018c6:	883b      	ldrh	r3, [r7, #0]
 80018c8:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80018ca:	232a      	movs	r3, #42	@ 0x2a
 80018cc:	763b      	strb	r3, [r7, #24]
 80018ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80018d2:	121b      	asrs	r3, r3, #8
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	767b      	strb	r3, [r7, #25]
 80018da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	76bb      	strb	r3, [r7, #26]
 80018e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018e4:	121b      	asrs	r3, r3, #8
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	76fb      	strb	r3, [r7, #27]
 80018ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80018f2:	f107 0318 	add.w	r3, r7, #24
 80018f6:	2104      	movs	r1, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff2f 	bl	800175c <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80018fe:	232b      	movs	r3, #43	@ 0x2b
 8001900:	743b      	strb	r3, [r7, #16]
 8001902:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001906:	121b      	asrs	r3, r3, #8
 8001908:	b21b      	sxth	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	747b      	strb	r3, [r7, #17]
 800190e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001910:	b2db      	uxtb	r3, r3
 8001912:	74bb      	strb	r3, [r7, #18]
 8001914:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001918:	121b      	asrs	r3, r3, #8
 800191a:	b21b      	sxth	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	74fb      	strb	r3, [r7, #19]
 8001920:	8c3b      	ldrh	r3, [r7, #32]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	2104      	movs	r1, #4
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff15 	bl	800175c <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001932:	232c      	movs	r3, #44	@ 0x2c
 8001934:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff0d 	bl	800175c <LCD_WriteCommand>
  }
}
 8001942:	bf00      	nop
 8001944:	372c      	adds	r7, #44	@ 0x2c
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}
	...

0800194c <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
 8001956:	460b      	mov	r3, r1
 8001958:	80bb      	strh	r3, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 800195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db34      	blt.n	80019d0 <LCD_DrawPixel+0x84>
 8001966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196a:	2bef      	cmp	r3, #239	@ 0xef
 800196c:	dc30      	bgt.n	80019d0 <LCD_DrawPixel+0x84>
 800196e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db2c      	blt.n	80019d0 <LCD_DrawPixel+0x84>
     (y < 0) || (y > LCD_HEIGHT-1))
 8001976:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800197a:	2bef      	cmp	r3, #239	@ 0xef
 800197c:	dc28      	bgt.n	80019d0 <LCD_DrawPixel+0x84>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b29b      	uxth	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	733b      	strb	r3, [r7, #12]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 800198e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001992:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001996:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800199a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800199e:	f7ff ff7d 	bl	800189c <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 80019a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019aa:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80019ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019b4:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80019b6:	f107 010c 	add.w	r1, r7, #12
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	2202      	movs	r2, #2
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <LCD_DrawPixel+0x8c>)
 80019c2:	f001 fe48 	bl	8003656 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80019c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019ca:	2204      	movs	r2, #4
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	e000      	b.n	80019d2 <LCD_DrawPixel+0x86>
    return;
 80019d0:	bf00      	nop
#endif
}
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000038 	.word	0x20000038

080019dc <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b094      	sub	sp, #80	@ 0x50
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d905      	bls.n	80019fa <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 80019ee:	1cbb      	adds	r3, r7, #2
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fee8 	bl	80017c8 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80019f8:	e026      	b.n	8001a48 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80019fa:	2300      	movs	r3, #0
 80019fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019fe:	e009      	b.n	8001a14 <LCD_FillPixels+0x38>
      fill[t]=color;
 8001a00:	887a      	ldrh	r2, [r7, #2]
 8001a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	3350      	adds	r3, #80	@ 0x50
 8001a08:	443b      	add	r3, r7
 8001a0a:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a10:	3301      	adds	r3, #1
 8001a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	bf28      	it	cs
 8001a1a:	2320      	movcs	r3, #32
 8001a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3ee      	bcc.n	8001a00 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8001a22:	e00e      	b.n	8001a42 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	bf28      	it	cs
 8001a2a:	2320      	movcs	r3, #32
 8001a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fec7 	bl	80017c8 <LCD_WriteData>
      pixels-=sz;
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ed      	bne.n	8001a24 <LCD_FillPixels+0x48>
}
 8001a48:	bf00      	nop
 8001a4a:	3750      	adds	r7, #80	@ 0x50
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4604      	mov	r4, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	80fb      	strh	r3, [r7, #6]
 8001a62:	4603      	mov	r3, r0
 8001a64:	80bb      	strh	r3, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a76:	d105      	bne.n	8001a84 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f7ff fde4 	bl	8001648 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e013      	b.n	8001aac <LCD_FillArea+0x5c>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8001a84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a88:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a8c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a94:	f7ff ff02 	bl	800189c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fdd4 	bl	8001648 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 8001aa0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001aa4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001aa8:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 8001aaa:	4b02      	ldr	r3, [pc, #8]	@ (8001ab4 <LCD_FillArea+0x64>)
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	080019dd 	.word	0x080019dd

08001ab8 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4604      	mov	r4, r0
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	80fb      	strh	r3, [r7, #6]
 8001aca:	4603      	mov	r3, r0
 8001acc:	80bb      	strh	r3, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	807b      	strh	r3, [r7, #2]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	883a      	ldrh	r2, [r7, #0]
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001aee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001af2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001af6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001afa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001afe:	f7ff fecd 	bl	800189c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8001b02:	2101      	movs	r1, #1
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fd9f 	bl	8001648 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8001b0a:	8c3b      	ldrh	r3, [r7, #32]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff64 	bl	80019dc <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8001b14:	2100      	movs	r1, #0
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff fd96 	bl	8001648 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}

08001b26 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001b26:	b590      	push	{r4, r7, lr}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	603a      	str	r2, [r7, #0]
 8001b30:	80fb      	strh	r3, [r7, #6]
 8001b32:	460b      	mov	r3, r1
 8001b34:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	88db      	ldrh	r3, [r3, #6]
 8001b40:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	2bef      	cmp	r3, #239	@ 0xef
 8001b46:	d837      	bhi.n	8001bb8 <LCD_DrawImage+0x92>
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	2bef      	cmp	r3, #239	@ 0xef
 8001b4c:	d834      	bhi.n	8001bb8 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	4413      	add	r3, r2
 8001b54:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b56:	dc31      	bgt.n	8001bbc <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001b58:	88ba      	ldrh	r2, [r7, #4]
 8001b5a:	89bb      	ldrh	r3, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b60:	dc2e      	bgt.n	8001bc0 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	7a1b      	ldrb	r3, [r3, #8]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d12c      	bne.n	8001bc4 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001b6a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b72:	88fa      	ldrh	r2, [r7, #6]
 8001b74:	89fb      	ldrh	r3, [r7, #14]
 8001b76:	4413      	add	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b21c      	sxth	r4, r3
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	89bb      	ldrh	r3, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	4622      	mov	r2, r4
 8001b90:	f7ff fe84 	bl	800189c <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001b94:	2101      	movs	r1, #1
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff fd56 	bl	8001648 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	89ba      	ldrh	r2, [r7, #12]
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7ff fe0d 	bl	80017c8 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fd49 	bl	8001648 <setDMAMemMode>
 8001bb6:	e006      	b.n	8001bc6 <LCD_DrawImage+0xa0>
    return;
 8001bb8:	bf00      	nop
 8001bba:	e004      	b.n	8001bc6 <LCD_DrawImage+0xa0>
    return;
 8001bbc:	bf00      	nop
 8001bbe:	e002      	b.n	8001bc6 <LCD_DrawImage+0xa0>
    return;
 8001bc0:	bf00      	nop
 8001bc2:	e000      	b.n	8001bc6 <LCD_DrawImage+0xa0>
    return;
 8001bc4:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}

08001bcc <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	80fb      	strh	r3, [r7, #6]
 8001bde:	4603      	mov	r3, r0
 8001be0:	80bb      	strh	r3, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	807b      	strh	r3, [r7, #2]
 8001be6:	4613      	mov	r3, r2
 8001be8:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d10a      	bne.n	8001c08 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001bf2:	88ba      	ldrh	r2, [r7, #4]
 8001bf4:	883b      	ldrh	r3, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d918      	bls.n	8001c2c <LCD_DrawLine+0x60>
 8001bfa:	88bb      	ldrh	r3, [r7, #4]
 8001bfc:	81bb      	strh	r3, [r7, #12]
 8001bfe:	883b      	ldrh	r3, [r7, #0]
 8001c00:	80bb      	strh	r3, [r7, #4]
 8001c02:	89bb      	ldrh	r3, [r7, #12]
 8001c04:	803b      	strh	r3, [r7, #0]
 8001c06:	e011      	b.n	8001c2c <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001c08:	88ba      	ldrh	r2, [r7, #4]
 8001c0a:	883b      	ldrh	r3, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10a      	bne.n	8001c26 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001c10:	88fa      	ldrh	r2, [r7, #6]
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d909      	bls.n	8001c2c <LCD_DrawLine+0x60>
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	81fb      	strh	r3, [r7, #14]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	80fb      	strh	r3, [r7, #6]
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	e002      	b.n	8001c2c <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001c2c:	883c      	ldrh	r4, [r7, #0]
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	88b9      	ldrh	r1, [r7, #4]
 8001c32:	88f8      	ldrh	r0, [r7, #6]
 8001c34:	8c3b      	ldrh	r3, [r7, #32]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4623      	mov	r3, r4
 8001c3a:	f7ff ff3d 	bl	8001ab8 <LCD_Fill>
  return UG_RESULT_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}

08001c48 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60ba      	str	r2, [r7, #8]
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4603      	mov	r3, r0
 8001c54:	81fb      	strh	r3, [r7, #14]
 8001c56:	460b      	mov	r3, r1
 8001c58:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f002 fa16 	bl	800408c <UG_FontSelect>
  UG_SetForecolor(color);
 8001c60:	8b3b      	ldrh	r3, [r7, #24]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fc30 	bl	80044c8 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001c68:	8bbb      	ldrh	r3, [r7, #28]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fc3e 	bl	80044ec <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c74:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fb8c 	bl	8004398 <UG_PutString>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <LCD_setPower+0x14>
 8001c98:	2329      	movs	r3, #41	@ 0x29
 8001c9a:	e000      	b.n	8001c9e <LCD_setPower+0x16>
 8001c9c:	2328      	movs	r3, #40	@ 0x28
 8001c9e:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fd58 	bl	800175c <LCD_WriteCommand>
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <LCD_Update>:

static void LCD_Update(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fcc4 	bl	8001648 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001cca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001cce:	2204      	movs	r2, #4
 8001cd0:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <LCD_init+0xa8>)
 8001cd4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001cd8:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 f8ca 	bl	8001e74 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <LCD_init+0xa8>)
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001ce6:	20c8      	movs	r0, #200	@ 0xc8
 8001ce8:	f000 f8c4 	bl	8001e74 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001cec:	4920      	ldr	r1, [pc, #128]	@ (8001d70 <LCD_init+0xac>)
 8001cee:	4821      	ldr	r0, [pc, #132]	@ (8001d74 <LCD_init+0xb0>)
 8001cf0:	f002 f932 	bl	8003f58 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001cf4:	4920      	ldr	r1, [pc, #128]	@ (8001d78 <LCD_init+0xb4>)
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f003 ff36 	bl	8005b68 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001cfc:	491f      	ldr	r1, [pc, #124]	@ (8001d7c <LCD_init+0xb8>)
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f003 ff32 	bl	8005b68 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001d04:	491e      	ldr	r1, [pc, #120]	@ (8001d80 <LCD_init+0xbc>)
 8001d06:	2002      	movs	r0, #2
 8001d08:	f003 ff2e 	bl	8005b68 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001d0c:	491d      	ldr	r1, [pc, #116]	@ (8001d84 <LCD_init+0xc0>)
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f003 ff2a 	bl	8005b68 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f002 fbfb 	bl	8004510 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f002 fc0c 	bl	8004538 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001d20:	2300      	movs	r3, #0
 8001d22:	80fb      	strh	r3, [r7, #6]
 8001d24:	e013      	b.n	8001d4e <LCD_init+0x8a>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a17      	ldr	r2, [pc, #92]	@ (8001d88 <LCD_init+0xc4>)
 8001d2c:	441a      	add	r2, r3
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	4915      	ldr	r1, [pc, #84]	@ (8001d88 <LCD_init+0xc4>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f7ff fd10 	bl	800175c <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <LCD_init+0xc4>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	461a      	mov	r2, r3
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	4413      	add	r3, r2
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b4b      	cmp	r3, #75	@ 0x4b
 8001d52:	d9e8      	bls.n	8001d26 <LCD_init+0x62>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001d54:	2000      	movs	r0, #0
 8001d56:	f002 f9a9 	bl	80040ac <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff ff94 	bl	8001c88 <LCD_setPower>
  UG_Update();
 8001d60:	f003 ff24 	bl	8005bac <UG_Update>
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	20000008 	.word	0x20000008
 8001d74:	2000012c 	.word	0x2000012c
 8001d78:	08001bcd 	.word	0x08001bcd
 8001d7c:	08001ab9 	.word	0x08001ab9
 8001d80:	08001a51 	.word	0x08001a51
 8001d84:	08001b27 	.word	0x08001b27
 8001d88:	080071c8 	.word	0x080071c8

08001d8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d96:	2003      	movs	r0, #3
 8001d98:	f000 f960 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f000 f80d 	bl	8001dbc <HAL_InitTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	e001      	b.n	8001db2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dae:	f7ff fb35 	bl	800141c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db2:	79fb      	ldrb	r3, [r7, #7]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_InitTick+0x6c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d023      	beq.n	8001e18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_InitTick+0x70>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <HAL_InitTick+0x6c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f96d 	bl	80020c6 <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d809      	bhi.n	8001e0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f937 	bl	8002072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e04:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <HAL_InitTick+0x74>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e007      	b.n	8001e1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e004      	b.n	8001e1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e001      	b.n	8001e1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000018 	.word	0x20000018
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000014 	.word	0x20000014

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000018 	.word	0x20000018
 8001e58:	200001a0 	.word	0x200001a0

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200001a0 	.word	0x200001a0

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff ffee 	bl	8001e5c <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffde 	bl	8001e5c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000018 	.word	0x20000018

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	@ (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	@ (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	@ (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	@ 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e098      	b.n	8002224 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002230 <HAL_DMA_Init+0x150>)
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d80f      	bhi.n	800211e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	4b4b      	ldr	r3, [pc, #300]	@ (8002234 <HAL_DMA_Init+0x154>)
 8002106:	4413      	add	r3, r2
 8002108:	4a4b      	ldr	r2, [pc, #300]	@ (8002238 <HAL_DMA_Init+0x158>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a48      	ldr	r2, [pc, #288]	@ (800223c <HAL_DMA_Init+0x15c>)
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40
 800211c:	e00e      	b.n	800213c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b46      	ldr	r3, [pc, #280]	@ (8002240 <HAL_DMA_Init+0x160>)
 8002126:	4413      	add	r3, r2
 8002128:	4a43      	ldr	r2, [pc, #268]	@ (8002238 <HAL_DMA_Init+0x158>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	009a      	lsls	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a42      	ldr	r2, [pc, #264]	@ (8002244 <HAL_DMA_Init+0x164>)
 800213a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002156:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002196:	d039      	beq.n	800220c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	4a27      	ldr	r2, [pc, #156]	@ (800223c <HAL_DMA_Init+0x15c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d11a      	bne.n	80021d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021a2:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <HAL_DMA_Init+0x168>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f003 031c 	and.w	r3, r3, #28
 80021ae:	210f      	movs	r1, #15
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4924      	ldr	r1, [pc, #144]	@ (8002248 <HAL_DMA_Init+0x168>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <HAL_DMA_Init+0x168>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	f003 031c 	and.w	r3, r3, #28
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	491d      	ldr	r1, [pc, #116]	@ (8002248 <HAL_DMA_Init+0x168>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
 80021d6:	e019      	b.n	800220c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021d8:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <HAL_DMA_Init+0x16c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e0:	f003 031c 	and.w	r3, r3, #28
 80021e4:	210f      	movs	r1, #15
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	4917      	ldr	r1, [pc, #92]	@ (800224c <HAL_DMA_Init+0x16c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_DMA_Init+0x16c>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6859      	ldr	r1, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f003 031c 	and.w	r3, r3, #28
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	4911      	ldr	r1, [pc, #68]	@ (800224c <HAL_DMA_Init+0x16c>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40020407 	.word	0x40020407
 8002234:	bffdfff8 	.word	0xbffdfff8
 8002238:	cccccccd 	.word	0xcccccccd
 800223c:	40020000 	.word	0x40020000
 8002240:	bffdfbf8 	.word	0xbffdfbf8
 8002244:	40020400 	.word	0x40020400
 8002248:	400200a8 	.word	0x400200a8
 800224c:	400204a8 	.word	0x400204a8

08002250 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Start_IT+0x20>
 800226c:	2302      	movs	r3, #2
 800226e:	e04b      	b.n	8002308 <HAL_DMA_Start_IT+0xb8>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d13a      	bne.n	80022fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f8ee 	bl	800248a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 020e 	orr.w	r2, r2, #14
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e00f      	b.n	80022e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 020a 	orr.w	r2, r2, #10
 80022e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e005      	b.n	8002306 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232c:	f003 031c 	and.w	r3, r3, #28
 8002330:	2204      	movs	r2, #4
 8002332:	409a      	lsls	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d026      	beq.n	800238a <HAL_DMA_IRQHandler+0x7a>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d021      	beq.n	800238a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d107      	bne.n	8002364 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0204 	bic.w	r2, r2, #4
 8002362:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002368:	f003 021c 	and.w	r2, r3, #28
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	2104      	movs	r1, #4
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d071      	beq.n	8002464 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002388:	e06c      	b.n	8002464 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f003 031c 	and.w	r3, r3, #28
 8002392:	2202      	movs	r2, #2
 8002394:	409a      	lsls	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d02e      	beq.n	80023fc <HAL_DMA_IRQHandler+0xec>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d029      	beq.n	80023fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10b      	bne.n	80023ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 020a 	bic.w	r2, r2, #10
 80023c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f003 021c 	and.w	r2, r3, #28
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	2102      	movs	r1, #2
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d038      	beq.n	8002464 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023fa:	e033      	b.n	8002464 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	f003 031c 	and.w	r3, r3, #28
 8002404:	2208      	movs	r2, #8
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02a      	beq.n	8002466 <HAL_DMA_IRQHandler+0x156>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d025      	beq.n	8002466 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 020e 	bic.w	r2, r2, #14
 8002428:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	f003 021c 	and.w	r2, r3, #28
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002464:	bf00      	nop
 8002466:	bf00      	nop
}
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800247c:	b2db      	uxtb	r3, r3
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	f003 021c 	and.w	r2, r3, #28
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d108      	bne.n	80024ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024cc:	e007      	b.n	80024de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	60da      	str	r2, [r3, #12]
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e17f      	b.n	80027fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8171 	beq.w	80027f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <HAL_GPIO_Init+0x40>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d130      	bne.n	800258e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002562:	2201      	movs	r2, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0201 	and.w	r2, r3, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b03      	cmp	r3, #3
 8002598:	d118      	bne.n	80025cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	6939      	ldr	r1, [r7, #16]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80ac 	beq.w	80027f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	4b5f      	ldr	r3, [pc, #380]	@ (800281c <HAL_GPIO_Init+0x330>)
 80026a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a2:	4a5e      	ldr	r2, [pc, #376]	@ (800281c <HAL_GPIO_Init+0x330>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80026aa:	4b5c      	ldr	r3, [pc, #368]	@ (800281c <HAL_GPIO_Init+0x330>)
 80026ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002820 <HAL_GPIO_Init+0x334>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026e0:	d025      	beq.n	800272e <HAL_GPIO_Init+0x242>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002824 <HAL_GPIO_Init+0x338>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01f      	beq.n	800272a <HAL_GPIO_Init+0x23e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002828 <HAL_GPIO_Init+0x33c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d019      	beq.n	8002726 <HAL_GPIO_Init+0x23a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4d      	ldr	r2, [pc, #308]	@ (800282c <HAL_GPIO_Init+0x340>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x236>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002830 <HAL_GPIO_Init+0x344>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00d      	beq.n	800271e <HAL_GPIO_Init+0x232>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4b      	ldr	r2, [pc, #300]	@ (8002834 <HAL_GPIO_Init+0x348>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <HAL_GPIO_Init+0x22e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4a      	ldr	r2, [pc, #296]	@ (8002838 <HAL_GPIO_Init+0x34c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d101      	bne.n	8002716 <HAL_GPIO_Init+0x22a>
 8002712:	2306      	movs	r3, #6
 8002714:	e00c      	b.n	8002730 <HAL_GPIO_Init+0x244>
 8002716:	2307      	movs	r3, #7
 8002718:	e00a      	b.n	8002730 <HAL_GPIO_Init+0x244>
 800271a:	2305      	movs	r3, #5
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x244>
 800271e:	2304      	movs	r3, #4
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x244>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x244>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x244>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x244>
 800272e:	2300      	movs	r3, #0
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002740:	4937      	ldr	r1, [pc, #220]	@ (8002820 <HAL_GPIO_Init+0x334>)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_GPIO_Init+0x350>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002772:	4a32      	ldr	r2, [pc, #200]	@ (800283c <HAL_GPIO_Init+0x350>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <HAL_GPIO_Init+0x350>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	43db      	mvns	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <HAL_GPIO_Init+0x350>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027a2:	4b26      	ldr	r3, [pc, #152]	@ (800283c <HAL_GPIO_Init+0x350>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027c6:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <HAL_GPIO_Init+0x350>)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_GPIO_Init+0x350>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027f0:	4a12      	ldr	r2, [pc, #72]	@ (800283c <HAL_GPIO_Init+0x350>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa22 f303 	lsr.w	r3, r2, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	f47f ae78 	bne.w	80024fc <HAL_GPIO_Init+0x10>
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	40010000 	.word	0x40010000
 8002824:	48000400 	.word	0x48000400
 8002828:	48000800 	.word	0x48000800
 800282c:	48000c00 	.word	0x48000c00
 8002830:	48001000 	.word	0x48001000
 8002834:	48001400 	.word	0x48001400
 8002838:	48001800 	.word	0x48001800
 800283c:	40010400 	.word	0x40010400

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800285c:	e002      	b.n	8002864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002886:	4a05      	ldr	r2, [pc, #20]	@ (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f806 	bl	80028a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028e2:	d130      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e4:	4b23      	ldr	r3, [pc, #140]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028f0:	d038      	beq.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f2:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002900:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2232      	movs	r2, #50	@ 0x32
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	4a1b      	ldr	r2, [pc, #108]	@ (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0c9b      	lsrs	r3, r3, #18
 8002914:	3301      	adds	r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002918:	e002      	b.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3b01      	subs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002920:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800292c:	d102      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x60>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f2      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002934:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002940:	d110      	bne.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00f      	b.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002952:	d007      	beq.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002954:	4b07      	ldr	r3, [pc, #28]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800295c:	4a05      	ldr	r2, [pc, #20]	@ (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002962:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40007000 	.word	0x40007000
 8002978:	20000000 	.word	0x20000000
 800297c:	431bde83 	.word	0x431bde83

08002980 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e3ca      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002992:	4b97      	ldr	r3, [pc, #604]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299c:	4b94      	ldr	r3, [pc, #592]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80e4 	beq.w	8002b7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_RCC_OscConfig+0x4a>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	f040 808b 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f040 8087 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ca:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x62>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e3a2      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	4b82      	ldr	r3, [pc, #520]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_RCC_OscConfig+0x7c>
 80029f2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029fa:	e005      	b.n	8002a08 <HAL_RCC_OscConfig+0x88>
 80029fc:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 80029fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d223      	bcs.n	8002a54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fd1d 	bl	8003450 <RCC_SetFlashLatencyFromMSIRange>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e383      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a20:	4b73      	ldr	r3, [pc, #460]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a72      	ldr	r2, [pc, #456]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b70      	ldr	r3, [pc, #448]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	496d      	ldr	r1, [pc, #436]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	4968      	ldr	r1, [pc, #416]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
 8002a52:	e025      	b.n	8002aa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a54:	4b66      	ldr	r3, [pc, #408]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a65      	ldr	r2, [pc, #404]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b63      	ldr	r3, [pc, #396]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4960      	ldr	r1, [pc, #384]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a72:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	495b      	ldr	r1, [pc, #364]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fcdd 	bl	8003450 <RCC_SetFlashLatencyFromMSIRange>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e343      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa0:	f000 fc4a 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	4950      	ldr	r1, [pc, #320]	@ (8002bf4 <HAL_RCC_OscConfig+0x274>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	4a4e      	ldr	r2, [pc, #312]	@ (8002bf8 <HAL_RCC_OscConfig+0x278>)
 8002abe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	@ (8002bfc <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f979 	bl	8001dbc <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d052      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	e327      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d032      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ae0:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a42      	ldr	r2, [pc, #264]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f9b6 	bl	8001e5c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af4:	f7ff f9b2 	bl	8001e5c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e310      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b06:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b12:	4b37      	ldr	r3, [pc, #220]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a36      	ldr	r2, [pc, #216]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4931      	ldr	r1, [pc, #196]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b30:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	492c      	ldr	r1, [pc, #176]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e01a      	b.n	8002b7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b46:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a29      	ldr	r2, [pc, #164]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b52:	f7ff f983 	bl	8001e5c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5a:	f7ff f97f 	bl	8001e5c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e2dd      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b6c:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x1da>
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d074      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x21a>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d10e      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d064      	beq.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d160      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e2ba      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x24a>
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e026      	b.n	8002c18 <HAL_RCC_OscConfig+0x298>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd2:	d115      	bne.n	8002c00 <HAL_RCC_OscConfig+0x280>
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a05      	ldr	r2, [pc, #20]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002bda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a02      	ldr	r2, [pc, #8]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e014      	b.n	8002c18 <HAL_RCC_OscConfig+0x298>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08007188 	.word	0x08007188
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000014 	.word	0x20000014
 8002c00:	4ba0      	ldr	r3, [pc, #640]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a9f      	ldr	r2, [pc, #636]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b9d      	ldr	r3, [pc, #628]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a9c      	ldr	r2, [pc, #624]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7ff f91c 	bl	8001e5c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff f918 	bl	8001e5c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e276      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3a:	4b92      	ldr	r3, [pc, #584]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x2a8>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff f908 	bl	8001e5c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff f904 	bl	8001e5c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e262      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c62:	4b88      	ldr	r3, [pc, #544]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x2d0>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d060      	beq.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_OscConfig+0x310>
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d119      	bne.n	8002cbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d116      	bne.n	8002cbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	4b7c      	ldr	r3, [pc, #496]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x328>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e23f      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	4973      	ldr	r1, [pc, #460]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbc:	e040      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d023      	beq.n	8002d0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6e      	ldr	r2, [pc, #440]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7ff f8c3 	bl	8001e5c <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7ff f8bf 	bl	8001e5c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e21d      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cec:	4b65      	ldr	r3, [pc, #404]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b62      	ldr	r3, [pc, #392]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	495f      	ldr	r1, [pc, #380]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
 8002d0c:	e018      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5c      	ldr	r2, [pc, #368]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7ff f89f 	bl	8001e5c <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d22:	f7ff f89b 	bl	8001e5c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1f9      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d34:	4b53      	ldr	r3, [pc, #332]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f0      	bne.n	8002d22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d54:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7ff f87a 	bl	8001e5c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7ff f876 	bl	8001e5c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1d4      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d7e:	4b41      	ldr	r3, [pc, #260]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCC_OscConfig+0x3ec>
 8002d8c:	e01b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d94:	4a3b      	ldr	r2, [pc, #236]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7ff f85d 	bl	8001e5c <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da6:	f7ff f859 	bl	8001e5c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1b7      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db8:	4b32      	ldr	r3, [pc, #200]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ef      	bne.n	8002da6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80a6 	beq.w	8002f20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	4a26      	ldr	r2, [pc, #152]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df0:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e00:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <HAL_RCC_OscConfig+0x508>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d118      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <HAL_RCC_OscConfig+0x508>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_RCC_OscConfig+0x508>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e18:	f7ff f820 	bl	8001e5c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7ff f81c 	bl	8001e5c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e17a      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_RCC_OscConfig+0x508>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4d8>
 8002e46:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e56:	e029      	b.n	8002eac <HAL_RCC_OscConfig+0x52c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d115      	bne.n	8002e8c <HAL_RCC_OscConfig+0x50c>
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e76:	4a03      	ldr	r2, [pc, #12]	@ (8002e84 <HAL_RCC_OscConfig+0x504>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e80:	e014      	b.n	8002eac <HAL_RCC_OscConfig+0x52c>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	4a9b      	ldr	r2, [pc, #620]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e9c:	4b98      	ldr	r3, [pc, #608]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	4a97      	ldr	r2, [pc, #604]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d016      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe ffd2 	bl	8001e5c <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe ffce 	bl	8001e5c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e12a      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed2:	4b8b      	ldr	r3, [pc, #556]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ed      	beq.n	8002ebc <HAL_RCC_OscConfig+0x53c>
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7fe ffbb 	bl	8001e5c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe ffb7 	bl	8001e5c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e113      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f00:	4b7f      	ldr	r3, [pc, #508]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ed      	bne.n	8002eea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	4b7a      	ldr	r3, [pc, #488]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	4a79      	ldr	r2, [pc, #484]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80fe 	beq.w	8003126 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	f040 80d0 	bne.w	80030d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f34:	4b72      	ldr	r3, [pc, #456]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d130      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	3b01      	subs	r3, #1
 8002f54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d127      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d11f      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f74:	2a07      	cmp	r2, #7
 8002f76:	bf14      	ite	ne
 8002f78:	2201      	movne	r2, #1
 8002f7a:	2200      	moveq	r2, #0
 8002f7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d113      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d06e      	beq.n	8003088 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d069      	beq.n	8003084 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fb0:	4b53      	ldr	r3, [pc, #332]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fbc:	4b50      	ldr	r3, [pc, #320]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0ad      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd8:	f7fe ff40 	bl	8001e5c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe ff3c 	bl	8001e5c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e09a      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff2:	4b43      	ldr	r3, [pc, #268]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffe:	4b40      	ldr	r3, [pc, #256]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4b40      	ldr	r3, [pc, #256]	@ (8003104 <HAL_RCC_OscConfig+0x784>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800300e:	3a01      	subs	r2, #1
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003018:	0212      	lsls	r2, r2, #8
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003020:	0852      	lsrs	r2, r2, #1
 8003022:	3a01      	subs	r2, #1
 8003024:	0552      	lsls	r2, r2, #21
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800302c:	0852      	lsrs	r2, r2, #1
 800302e:	3a01      	subs	r2, #1
 8003030:	0652      	lsls	r2, r2, #25
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003038:	0912      	lsrs	r2, r2, #4
 800303a:	0452      	lsls	r2, r2, #17
 800303c:	430a      	orrs	r2, r1
 800303e:	4930      	ldr	r1, [pc, #192]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8003040:	4313      	orrs	r3, r2
 8003042:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003044:	4b2e      	ldr	r3, [pc, #184]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2d      	ldr	r2, [pc, #180]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003050:	4b2b      	ldr	r3, [pc, #172]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a2a      	ldr	r2, [pc, #168]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800305c:	f7fe fefe 	bl	8001e5c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe fefa 	bl	8001e5c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e058      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003076:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003082:	e050      	b.n	8003126 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e04f      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003088:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d148      	bne.n	8003126 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003094:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a19      	ldr	r2, [pc, #100]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a0:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ac:	f7fe fed6 	bl	8001e5c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fed2 	bl	8001e5c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e030      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x734>
 80030d2:	e028      	b.n	8003126 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d023      	beq.n	8003122 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a08      	ldr	r2, [pc, #32]	@ (8003100 <HAL_RCC_OscConfig+0x780>)
 80030e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe feb9 	bl	8001e5c <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ec:	e00c      	b.n	8003108 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe feb5 	bl	8001e5c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d905      	bls.n	8003108 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e013      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
 8003100:	40021000 	.word	0x40021000
 8003104:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_RCC_OscConfig+0x7b0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ec      	bne.n	80030ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003114:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_OscConfig+0x7b0>)
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	4905      	ldr	r1, [pc, #20]	@ (8003130 <HAL_RCC_OscConfig+0x7b0>)
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_RCC_OscConfig+0x7b4>)
 800311c:	4013      	ands	r3, r2
 800311e:	60cb      	str	r3, [r1, #12]
 8003120:	e001      	b.n	8003126 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	feeefffc 	.word	0xfeeefffc

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0e7      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b75      	ldr	r3, [pc, #468]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d910      	bls.n	800317c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b72      	ldr	r3, [pc, #456]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 0207 	bic.w	r2, r3, #7
 8003162:	4970      	ldr	r1, [pc, #448]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b6e      	ldr	r3, [pc, #440]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0cf      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b66      	ldr	r3, [pc, #408]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003194:	429a      	cmp	r2, r3
 8003196:	d908      	bls.n	80031aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4960      	ldr	r1, [pc, #384]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04c      	beq.n	8003250 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031be:	4b5a      	ldr	r3, [pc, #360]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d121      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0a6      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d6:	4b54      	ldr	r3, [pc, #336]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d115      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e09a      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e08e      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e086      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b46      	ldr	r3, [pc, #280]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4943      	ldr	r1, [pc, #268]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe fe1c 	bl	8001e5c <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe fe18 	bl	8001e5c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e06e      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b3a      	ldr	r3, [pc, #232]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003268:	429a      	cmp	r2, r3
 800326a:	d208      	bcs.n	800327e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b2e      	ldr	r3, [pc, #184]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	492b      	ldr	r1, [pc, #172]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327e:	4b29      	ldr	r3, [pc, #164]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d210      	bcs.n	80032ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328c:	4b25      	ldr	r3, [pc, #148]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 0207 	bic.w	r2, r3, #7
 8003294:	4923      	ldr	r1, [pc, #140]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <HAL_RCC_ClockConfig+0x1ec>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e036      	b.n	800331c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4918      	ldr	r1, [pc, #96]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d8:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4910      	ldr	r1, [pc, #64]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ec:	f000 f824 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	490b      	ldr	r1, [pc, #44]	@ (800332c <HAL_RCC_ClockConfig+0x1f4>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCC_ClockConfig+0x1f8>)
 800330a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_ClockConfig+0x1fc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fd53 	bl	8001dbc <HAL_InitTick>
 8003316:	4603      	mov	r3, r0
 8003318:	72fb      	strb	r3, [r7, #11]

  return status;
 800331a:	7afb      	ldrb	r3, [r7, #11]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
 800332c:	08007188 	.word	0x08007188
 8003330:	20000000 	.word	0x20000000
 8003334:	20000014 	.word	0x20000014

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	@ 0x24
 800333c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003346:	4b3e      	ldr	r3, [pc, #248]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003350:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x34>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d121      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d11e      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800336c:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003378:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e005      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003388:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003394:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d102      	bne.n	80033b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x110>)
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e004      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033bc:	4b23      	ldr	r3, [pc, #140]	@ (800344c <HAL_RCC_GetSysClockFreq+0x114>)
 80033be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d134      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0xa6>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d003      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xac>
 80033dc:	e005      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x110>)
 80033e0:	617b      	str	r3, [r7, #20]
      break;
 80033e2:	e005      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e4:	4b19      	ldr	r3, [pc, #100]	@ (800344c <HAL_RCC_GetSysClockFreq+0x114>)
 80033e6:	617b      	str	r3, [r7, #20]
      break;
 80033e8:	e002      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	617b      	str	r3, [r7, #20]
      break;
 80033ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f0:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	fb03 f202 	mul.w	r2, r3, r2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	0e5b      	lsrs	r3, r3, #25
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	3301      	adds	r3, #1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003430:	69bb      	ldr	r3, [r7, #24]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	@ 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	08007198 	.word	0x08007198
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200

08003450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800345c:	4b2a      	ldr	r3, [pc, #168]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003468:	f7ff fa26 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 800346c:	6178      	str	r0, [r7, #20]
 800346e:	e014      	b.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003470:	4b25      	ldr	r3, [pc, #148]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	4a24      	ldr	r2, [pc, #144]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347a:	6593      	str	r3, [r2, #88]	@ 0x58
 800347c:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003488:	f7ff fa16 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 800348c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4b1e      	ldr	r3, [pc, #120]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003498:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a0:	d10b      	bne.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b80      	cmp	r3, #128	@ 0x80
 80034a6:	d919      	bls.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80034ac:	d902      	bls.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ae:	2302      	movs	r3, #2
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e013      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b4:	2301      	movs	r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e010      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b80      	cmp	r3, #128	@ 0x80
 80034be:	d902      	bls.n	80034c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034c0:	2303      	movs	r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	e00a      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b80      	cmp	r3, #128	@ 0x80
 80034ca:	d102      	bne.n	80034d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034cc:	2302      	movs	r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	e004      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b70      	cmp	r3, #112	@ 0x70
 80034d6:	d101      	bne.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d8:	2301      	movs	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 0207 	bic.w	r2, r3, #7
 80034e4:	4909      	ldr	r1, [pc, #36]	@ (800350c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034ec:	4b07      	ldr	r3, [pc, #28]	@ (800350c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	40022000 	.word	0x40022000

08003510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e095      	b.n	800364e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d108      	bne.n	800353c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003532:	d009      	beq.n	8003548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
 800353a:	e005      	b.n	8003548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd febc 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800357e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003588:	d902      	bls.n	8003590 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e002      	b.n	8003596 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003594:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800359e:	d007      	beq.n	80035b0 <HAL_SPI_Init+0xa0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f2:	ea42 0103 	orr.w	r1, r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	f003 0204 	and.w	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800362c:	ea42 0103 	orr.w	r1, r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b088      	sub	sp, #32
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_SPI_Transmit+0x22>
 8003674:	2302      	movs	r3, #2
 8003676:	e15f      	b.n	8003938 <HAL_SPI_Transmit+0x2e2>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003680:	f7fe fbec 	bl	8001e5c <HAL_GetTick>
 8003684:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d002      	beq.n	800369c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003696:	2302      	movs	r3, #2
 8003698:	77fb      	strb	r3, [r7, #31]
    goto error;
 800369a:	e148      	b.n	800392e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Transmit+0x52>
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036ac:	e13f      	b.n	800392e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2203      	movs	r2, #3
 80036b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f8:	d10f      	bne.n	800371a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003718:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	d007      	beq.n	8003738 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003740:	d94f      	bls.n	80037e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Transmit+0xfa>
 800374a:	8afb      	ldrh	r3, [r7, #22]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d142      	bne.n	80037d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003760:	1c9a      	adds	r2, r3, #2
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003774:	e02f      	b.n	80037d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d112      	bne.n	80037aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	881a      	ldrh	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	1c9a      	adds	r2, r3, #2
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037a8:	e015      	b.n	80037d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037aa:	f7fe fb57 	bl	8001e5c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d803      	bhi.n	80037c2 <HAL_SPI_Transmit+0x16c>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d102      	bne.n	80037c8 <HAL_SPI_Transmit+0x172>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80037d4:	e0ab      	b.n	800392e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ca      	bne.n	8003776 <HAL_SPI_Transmit+0x120>
 80037e0:	e080      	b.n	80038e4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_Transmit+0x19a>
 80037ea:	8afb      	ldrh	r3, [r7, #22]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d174      	bne.n	80038da <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d912      	bls.n	8003820 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b02      	subs	r3, #2
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800381e:	e05c      	b.n	80038da <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003846:	e048      	b.n	80038da <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b02      	cmp	r3, #2
 8003854:	d12b      	bne.n	80038ae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d912      	bls.n	8003886 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b02      	subs	r3, #2
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003884:	e029      	b.n	80038da <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038ac:	e015      	b.n	80038da <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ae:	f7fe fad5 	bl	8001e5c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d803      	bhi.n	80038c6 <HAL_SPI_Transmit+0x270>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d102      	bne.n	80038cc <HAL_SPI_Transmit+0x276>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80038d8:	e029      	b.n	800392e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1b1      	bne.n	8003848 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fad7 	bl	8003e9c <SPI_EndRxTxTransaction>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e003      	b.n	800392e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003936:	7ffb      	ldrb	r3, [r7, #31]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	4613      	mov	r3, r2
 800394c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_SPI_Transmit_DMA+0x20>
 800395c:	2302      	movs	r3, #2
 800395e:	e0d4      	b.n	8003b0a <HAL_SPI_Transmit_DMA+0x1ca>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d002      	beq.n	800397a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003974:	2302      	movs	r3, #2
 8003976:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003978:	e0c2      	b.n	8003b00 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Transmit_DMA+0x46>
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
    goto error;
 800398a:	e0b9      	b.n	8003b00 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2203      	movs	r2, #3
 8003990:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d6:	d10f      	bne.n	80039f8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fc:	4a45      	ldr	r2, [pc, #276]	@ (8003b14 <HAL_SPI_Transmit_DMA+0x1d4>)
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	4a44      	ldr	r2, [pc, #272]	@ (8003b18 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	4a43      	ldr	r2, [pc, #268]	@ (8003b1c <HAL_SPI_Transmit_DMA+0x1dc>)
 8003a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	2200      	movs	r2, #0
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a26:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a30:	d82d      	bhi.n	8003a8e <HAL_SPI_Transmit_DMA+0x14e>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3c:	d127      	bne.n	8003a8e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a5a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a6a:	e010      	b.n	8003a8e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a7a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	4619      	mov	r1, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003aa6:	f7fe fbd3 	bl	8002250 <HAL_DMA_Start_IT>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab4:	f043 0210 	orr.w	r2, r3, #16
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003ac0:	e01e      	b.n	8003b00 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0202 	orr.w	r2, r2, #2
 8003afe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	08003c03 	.word	0x08003c03
 8003b18:	08003b5d 	.word	0x08003b5d
 8003b1c:	08003c1f 	.word	0x08003c1f

08003b20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6a:	f7fe f977 	bl	8001e5c <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d03b      	beq.n	8003bf6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0220 	bic.w	r2, r2, #32
 8003b8c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0202 	bic.w	r2, r2, #2
 8003b9c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	2164      	movs	r1, #100	@ 0x64
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f000 f97a 	bl	8003e9c <SPI_EndRxTxTransaction>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7ff ffaa 	bl	8003b48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003bf4:	e002      	b.n	8003bfc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7ff ff92 	bl	8003b20 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ff8f 	bl	8003b34 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0203 	bic.w	r2, r2, #3
 8003c3a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c40:	f043 0210 	orr.w	r2, r3, #16
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff ff79 	bl	8003b48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c70:	f7fe f8f4 	bl	8001e5c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c80:	f7fe f8ec 	bl	8001e5c <HAL_GetTick>
 8003c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c86:	4b39      	ldr	r3, [pc, #228]	@ (8003d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	0d1b      	lsrs	r3, r3, #20
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c96:	e054      	b.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d050      	beq.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ca0:	f7fe f8dc 	bl	8001e5c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d902      	bls.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d13d      	bne.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cce:	d111      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd8:	d004      	beq.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d107      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfc:	d10f      	bne.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e017      	b.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d19b      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000000 	.word	0x20000000

08003d70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	@ 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d82:	f7fe f86b 	bl	8001e5c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d92:	f7fe f863 	bl	8001e5c <HAL_GetTick>
 8003d96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003da0:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00da      	lsls	r2, r3, #3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	0d1b      	lsrs	r3, r3, #20
 8003db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003db8:	e060      	b.n	8003e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dc0:	d107      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d050      	beq.n	8003e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dda:	f7fe f83f 	bl	8001e5c <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d902      	bls.n	8003df0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d13d      	bne.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e08:	d111      	bne.n	8003e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e12:	d004      	beq.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1c:	d107      	bne.n	8003e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e36:	d10f      	bne.n	8003e58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e010      	b.n	8003e8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d196      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3728      	adds	r7, #40	@ 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000

08003e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ff5b 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e027      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2180      	movs	r1, #128	@ 0x80
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fec0 	bl	8003c60 <SPI_WaitFlagStateUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e014      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ff34 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e000      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	b21a      	sxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b21b      	sxth	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b21b      	sxth	r3, r3
 8003f4a:	b29b      	uxth	r3, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2204      	movs	r2, #4
 8003f72:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	b21a      	sxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	b21a      	sxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 800401e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004028:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e010      	b.n	800406e <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	330a      	adds	r3, #10
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	2200      	movs	r2, #0
 8004058:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	330a      	adds	r3, #10
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	2200      	movs	r2, #0
 8004066:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	3301      	adds	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d9eb      	bls.n	800404c <UG_Init+0xf4>
   }

   gui = g;
 8004074:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <UG_Init+0x130>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6013      	str	r3, [r2, #0]
   return 1;
 800407a:	2301      	movs	r3, #1
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	200001a4 	.word	0x200001a4

0800408c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <UG_FontSelect+0x1c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	200001a4 	.word	0x200001a4

080040ac <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80040b6:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <UG_FillScreen+0x44>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b21a      	sxth	r2, r3
 80040c8:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <UG_FillScreen+0x44>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	b219      	sxth	r1, r3
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	460b      	mov	r3, r1
 80040e0:	2100      	movs	r1, #0
 80040e2:	2000      	movs	r0, #0
 80040e4:	f000 f806 	bl	80040f4 <UG_FillFrame>
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200001a4 	.word	0x200001a4

080040f4 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80040f4:	b5b0      	push	{r4, r5, r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	4604      	mov	r4, r0
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	80fb      	strh	r3, [r7, #6]
 8004106:	4603      	mov	r3, r0
 8004108:	80bb      	strh	r3, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]
 800410e:	4613      	mov	r3, r2
 8004110:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8004112:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411a:	429a      	cmp	r2, r3
 800411c:	da05      	bge.n	800412a <UG_FillFrame+0x36>
     swap(x1,x2);
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	80fb      	strh	r3, [r7, #6]
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800412a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800412e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	da05      	bge.n	8004142 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8004136:	88bb      	ldrh	r3, [r7, #4]
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	883b      	ldrh	r3, [r7, #0]
 800413c:	80bb      	strh	r3, [r7, #4]
 800413e:	893b      	ldrh	r3, [r7, #8]
 8004140:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8004142:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <UG_FillFrame+0xe0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004152:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <UG_FillFrame+0xe0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	461d      	mov	r5, r3
 800415a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800415e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004162:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004166:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800416a:	8c3b      	ldrh	r3, [r7, #32]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4623      	mov	r3, r4
 8004170:	47a8      	blx	r5
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d028      	beq.n	80041ca <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8004178:	88bb      	ldrh	r3, [r7, #4]
 800417a:	81bb      	strh	r3, [r7, #12]
 800417c:	e01e      	b.n	80041bc <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	81fb      	strh	r3, [r7, #14]
 8004182:	e00f      	b.n	80041a4 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8004184:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <UG_FillFrame+0xe0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	8c3a      	ldrh	r2, [r7, #32]
 800418e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004192:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004196:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8004198:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800419c:	b29b      	uxth	r3, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	81fb      	strh	r3, [r7, #14]
 80041a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80041a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	dde9      	ble.n	8004184 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80041b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	81bb      	strh	r3, [r7, #12]
 80041bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	ddda      	ble.n	800417e <UG_FillFrame+0x8a>
 80041c8:	e000      	b.n	80041cc <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80041ca:	bf00      	nop
      }
   }
}
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bdb0      	pop	{r4, r5, r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200001a4 	.word	0x200001a4

080041d8 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80041d8:	b5b0      	push	{r4, r5, r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	80fb      	strh	r3, [r7, #6]
 80041ea:	4603      	mov	r3, r0
 80041ec:	80bb      	strh	r3, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	807b      	strh	r3, [r7, #2]
 80041f2:	4613      	mov	r3, r2
 80041f4:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80041f6:	4b67      	ldr	r3, [pc, #412]	@ (8004394 <UG_DrawLine+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d013      	beq.n	800422e <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004206:	4b63      	ldr	r3, [pc, #396]	@ (8004394 <UG_DrawLine+0x1bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420c:	461d      	mov	r5, r3
 800420e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004212:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004216:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800421a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800421e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4623      	mov	r3, r4
 8004224:	47a8      	blx	r5
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80ae 	beq.w	800438a <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8004238:	883a      	ldrh	r2, [r7, #0]
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	b29b      	uxth	r3, r3
 8004240:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8004242:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	bfb8      	it	lt
 800424a:	425b      	neglt	r3, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8004250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004254:	2b00      	cmp	r3, #0
 8004256:	bfb8      	it	lt
 8004258:	425b      	neglt	r3, r3
 800425a:	b29b      	uxth	r3, r3
 800425c:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800425e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	dd01      	ble.n	800426a <UG_DrawLine+0x92>
 8004266:	2301      	movs	r3, #1
 8004268:	e001      	b.n	800426e <UG_DrawLine+0x96>
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8004270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004274:	2b00      	cmp	r3, #0
 8004276:	dd01      	ble.n	800427c <UG_DrawLine+0xa4>
 8004278:	2301      	movs	r3, #1
 800427a:	e001      	b.n	8004280 <UG_DrawLine+0xa8>
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8004282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004286:	105b      	asrs	r3, r3, #1
 8004288:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800428a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800428e:	105b      	asrs	r3, r3, #1
 8004290:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8004296:	88bb      	ldrh	r3, [r7, #4]
 8004298:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800429a:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <UG_DrawLine+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80042a4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80042a8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80042ac:	4798      	blx	r3

   if( dxabs >= dyabs )
 80042ae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80042b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	db33      	blt.n	8004322 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80042ba:	2300      	movs	r3, #0
 80042bc:	83fb      	strh	r3, [r7, #30]
 80042be:	e029      	b.n	8004314 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80042c0:	8b7a      	ldrh	r2, [r7, #26]
 80042c2:	89fb      	ldrh	r3, [r7, #14]
 80042c4:	4413      	add	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80042ca:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80042ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	db09      	blt.n	80042ea <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80042d6:	8b7a      	ldrh	r2, [r7, #26]
 80042d8:	8a3b      	ldrh	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	b29b      	uxth	r3, r3
 80042de:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80042e0:	8afa      	ldrh	r2, [r7, #22]
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	4413      	add	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80042ea:	8b3a      	ldrh	r2, [r7, #24]
 80042ec:	89bb      	ldrh	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80042f4:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <UG_DrawLine+0x1bc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80042fe:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004302:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004306:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8004308:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800430c:	b29b      	uxth	r3, r3
 800430e:	3301      	adds	r3, #1
 8004310:	b29b      	uxth	r3, r3
 8004312:	83fb      	strh	r3, [r7, #30]
 8004314:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800431c:	429a      	cmp	r2, r3
 800431e:	dbcf      	blt.n	80042c0 <UG_DrawLine+0xe8>
 8004320:	e034      	b.n	800438c <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8004322:	2300      	movs	r3, #0
 8004324:	83fb      	strh	r3, [r7, #30]
 8004326:	e029      	b.n	800437c <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8004328:	8bba      	ldrh	r2, [r7, #28]
 800432a:	8a3b      	ldrh	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8004332:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800433a:	429a      	cmp	r2, r3
 800433c:	db09      	blt.n	8004352 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800433e:	8bba      	ldrh	r2, [r7, #28]
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	b29b      	uxth	r3, r3
 8004346:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8004348:	8b3a      	ldrh	r2, [r7, #24]
 800434a:	89bb      	ldrh	r3, [r7, #12]
 800434c:	4413      	add	r3, r2
 800434e:	b29b      	uxth	r3, r3
 8004350:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8004352:	8afa      	ldrh	r2, [r7, #22]
 8004354:	897b      	ldrh	r3, [r7, #10]
 8004356:	4413      	add	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800435c:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <UG_DrawLine+0x1bc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004366:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800436a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800436e:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8004370:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004374:	b29b      	uxth	r3, r3
 8004376:	3301      	adds	r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	83fb      	strh	r3, [r7, #30]
 800437c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004384:	429a      	cmp	r2, r3
 8004386:	dbcf      	blt.n	8004328 <UG_DrawLine+0x150>
 8004388:	e000      	b.n	800438c <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800438a:	bf00      	nop
      }
   }  
}
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bdb0      	pop	{r4, r5, r7, pc}
 8004392:	bf00      	nop
 8004394:	200001a4 	.word	0x200001a4

08004398 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b087      	sub	sp, #28
 800439c:	af02      	add	r7, sp, #8
 800439e:	4603      	mov	r3, r0
 80043a0:	603a      	str	r2, [r7, #0]
 80043a2:	80fb      	strh	r3, [r7, #6]
 80043a4:	460b      	mov	r3, r1
 80043a6:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80043ac:	88bb      	ldrh	r3, [r7, #4]
 80043ae:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80043b0:	4b44      	ldr	r3, [pc, #272]	@ (80044c4 <UG_PutString+0x12c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fa96 	bl	80048e8 <_UG_FontSelect>
   while ( *str != 0 )
 80043bc:	e064      	b.n	8004488 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80043be:	4b41      	ldr	r3, [pc, #260]	@ (80044c4 <UG_PutString+0x12c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80043ca:	463b      	mov	r3, r7
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f8c7 	bl	8004560 <_UG_DecodeUTF8>
 80043d2:	4603      	mov	r3, r0
 80043d4:	817b      	strh	r3, [r7, #10]
 80043d6:	e004      	b.n	80043e2 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	603a      	str	r2, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	2b0a      	cmp	r3, #10
 80043e6:	d105      	bne.n	80043f4 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80043e8:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <UG_PutString+0x12c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	81fb      	strh	r3, [r7, #14]
         continue;
 80043f2:	e049      	b.n	8004488 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80043f4:	897b      	ldrh	r3, [r7, #10]
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f929 	bl	8004650 <_UG_GetCharData>
 80043fe:	4603      	mov	r3, r0
 8004400:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8004402:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d03c      	beq.n	8004486 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 800440c:	4b2d      	ldr	r3, [pc, #180]	@ (80044c4 <UG_PutString+0x12c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004416:	4619      	mov	r1, r3
 8004418:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800441c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004420:	4413      	add	r3, r2
 8004422:	4299      	cmp	r1, r3
 8004424:	dc11      	bgt.n	800444a <UG_PutString+0xb2>
      {
         xp = x;
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800442a:	4b26      	ldr	r3, [pc, #152]	@ (80044c4 <UG_PutString+0x12c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004432:	b21b      	sxth	r3, r3
 8004434:	4a23      	ldr	r2, [pc, #140]	@ (80044c4 <UG_PutString+0x12c>)
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 800443c:	4413      	add	r3, r2
 800443e:	b21b      	sxth	r3, r3
 8004440:	b29a      	uxth	r2, r3
 8004442:	89bb      	ldrh	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800444a:	4b1e      	ldr	r3, [pc, #120]	@ (80044c4 <UG_PutString+0x12c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 8004452:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <UG_PutString+0x12c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800445a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800445e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8004462:	8978      	ldrh	r0, [r7, #10]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	4623      	mov	r3, r4
 8004468:	f000 fac0 	bl	80049ec <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800446c:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <UG_PutString+0x12c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8004474:	b29a      	uxth	r2, r3
 8004476:	893b      	ldrh	r3, [r7, #8]
 8004478:	4413      	add	r3, r2
 800447a:	b29a      	uxth	r2, r3
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	4413      	add	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	81fb      	strh	r3, [r7, #14]
 8004484:	e000      	b.n	8004488 <UG_PutString+0xf0>
      if(cw==-1) continue;
 8004486:	bf00      	nop
   while ( *str != 0 )
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d196      	bne.n	80043be <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004490:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <UG_PutString+0x12c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80044a0:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <UG_PutString+0x12c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044a6:	461c      	mov	r4, r3
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	f04f 32ff 	mov.w	r2, #4294967295
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295
 80044b8:	47a0      	blx	r4
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200001a4 	.word	0x200001a4

080044c8 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80044d2:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <UG_SetForecolor+0x20>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	200001a4 	.word	0x200001a4

080044ec <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80044f6:	4b05      	ldr	r3, [pc, #20]	@ (800450c <UG_SetBackcolor+0x20>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	200001a4 	.word	0x200001a4

08004510 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800451a:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <UG_FontSetHSpace+0x24>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	b252      	sxtb	r2, r2
 8004522:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	200001a4 	.word	0x200001a4

08004538 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <UG_FontSetVSpace+0x24>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	b252      	sxtb	r2, r2
 800454a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	200001a4 	.word	0x200001a4

08004560 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  char c=**str;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8004570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	db07      	blt.n	8004588 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	601a      	str	r2, [r3, #0]
    return c;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	b29b      	uxth	r3, r3
 8004586:	e05c      	b.n	8004642 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8004588:	2300      	movs	r3, #0
 800458a:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 800458c:	2300      	movs	r3, #0
 800458e:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8004590:	e04f      	b.n	8004632 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d130      	bne.n	800460c <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2bdf      	cmp	r3, #223	@ 0xdf
 80045ae:	d806      	bhi.n	80045be <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	e023      	b.n	8004606 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2bef      	cmp	r3, #239	@ 0xef
 80045c2:	d806      	bhi.n	80045d2 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 80045c4:	2302      	movs	r3, #2
 80045c6:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	73fb      	strb	r3, [r7, #15]
 80045d0:	e019      	b.n	8004606 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2bf7      	cmp	r3, #247	@ 0xf7
 80045d6:	d806      	bhi.n	80045e6 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80045d8:	2303      	movs	r3, #3
 80045da:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e00f      	b.n	8004606 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2bfb      	cmp	r3, #251	@ 0xfb
 80045ea:	d806      	bhi.n	80045fa <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80045ec:	2304      	movs	r3, #4
 80045ee:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e005      	b.n	8004606 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80045fa:	2305      	movs	r3, #5
 80045fc:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	81bb      	strh	r3, [r7, #12]
 800460a:	e012      	b.n	8004632 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800460c:	89bb      	ldrh	r3, [r7, #12]
 800460e:	019b      	lsls	r3, r3, #6
 8004610:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	b21b      	sxth	r3, r3
 8004616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800461a:	b21a      	sxth	r2, r3
 800461c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	b21b      	sxth	r3, r3
 8004624:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8004626:	7bbb      	ldrb	r3, [r7, #14]
 8004628:	3b01      	subs	r3, #1
 800462a:	73bb      	strb	r3, [r7, #14]
 800462c:	7bbb      	ldrb	r3, [r7, #14]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <_UG_DecodeUTF8+0xde>
  while(**str)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1aa      	bne.n	8004592 <_UG_DecodeUTF8+0x32>
 800463c:	e000      	b.n	8004640 <_UG_DecodeUTF8+0xe0>
        break;
 800463e:	bf00      	nop
    }
  }
  return encoding;
 8004640:	89bb      	ldrh	r3, [r7, #12]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 800465c:	2300      	movs	r3, #0
 800465e:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8004660:	2300      	movs	r3, #0
 8004662:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8004664:	2300      	movs	r3, #0
 8004666:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8004668:	2300      	movs	r3, #0
 800466a:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 800466c:	2300      	movs	r3, #0
 800466e:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8004670:	4b98      	ldr	r3, [pc, #608]	@ (80048d4 <_UG_GetCharData+0x284>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004676:	4b98      	ldr	r3, [pc, #608]	@ (80048d8 <_UG_GetCharData+0x288>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d10f      	bne.n	800469e <_UG_GetCharData+0x4e>
 800467e:	4b97      	ldr	r3, [pc, #604]	@ (80048dc <_UG_GetCharData+0x28c>)
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	429a      	cmp	r2, r3
 8004686:	d10a      	bne.n	800469e <_UG_GetCharData+0x4e>
    if(p){
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800468e:	4b94      	ldr	r3, [pc, #592]	@ (80048e0 <_UG_GetCharData+0x290>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8004696:	4b93      	ldr	r3, [pc, #588]	@ (80048e4 <_UG_GetCharData+0x294>)
 8004698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800469c:	e116      	b.n	80048cc <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800469e:	4b8d      	ldr	r3, [pc, #564]	@ (80048d4 <_UG_GetCharData+0x284>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80cc 	beq.w	8004844 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	2bfc      	cmp	r3, #252	@ 0xfc
 80046b0:	f300 80c8 	bgt.w	8004844 <_UG_GetCharData+0x1f4>
 80046b4:	2bd6      	cmp	r3, #214	@ 0xd6
 80046b6:	da09      	bge.n	80046cc <_UG_GetCharData+0x7c>
 80046b8:	2bc4      	cmp	r3, #196	@ 0xc4
 80046ba:	d06c      	beq.n	8004796 <_UG_GetCharData+0x146>
 80046bc:	2bc4      	cmp	r3, #196	@ 0xc4
 80046be:	f300 80c1 	bgt.w	8004844 <_UG_GetCharData+0x1f4>
 80046c2:	2bb0      	cmp	r3, #176	@ 0xb0
 80046c4:	d06d      	beq.n	80047a2 <_UG_GetCharData+0x152>
 80046c6:	2bb5      	cmp	r3, #181	@ 0xb5
 80046c8:	d068      	beq.n	800479c <_UG_GetCharData+0x14c>
 80046ca:	e06e      	b.n	80047aa <_UG_GetCharData+0x15a>
 80046cc:	3bd6      	subs	r3, #214	@ 0xd6
 80046ce:	2b26      	cmp	r3, #38	@ 0x26
 80046d0:	f200 80b8 	bhi.w	8004844 <_UG_GetCharData+0x1f4>
 80046d4:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <_UG_GetCharData+0x8c>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	0800477f 	.word	0x0800477f
 80046e0:	08004845 	.word	0x08004845
 80046e4:	08004845 	.word	0x08004845
 80046e8:	08004845 	.word	0x08004845
 80046ec:	08004845 	.word	0x08004845
 80046f0:	08004845 	.word	0x08004845
 80046f4:	0800478b 	.word	0x0800478b
 80046f8:	08004845 	.word	0x08004845
 80046fc:	08004845 	.word	0x08004845
 8004700:	08004845 	.word	0x08004845
 8004704:	08004845 	.word	0x08004845
 8004708:	08004845 	.word	0x08004845
 800470c:	08004845 	.word	0x08004845
 8004710:	08004845 	.word	0x08004845
 8004714:	08004791 	.word	0x08004791
 8004718:	08004845 	.word	0x08004845
 800471c:	08004845 	.word	0x08004845
 8004720:	08004845 	.word	0x08004845
 8004724:	08004845 	.word	0x08004845
 8004728:	08004845 	.word	0x08004845
 800472c:	08004845 	.word	0x08004845
 8004730:	08004845 	.word	0x08004845
 8004734:	08004845 	.word	0x08004845
 8004738:	08004845 	.word	0x08004845
 800473c:	08004845 	.word	0x08004845
 8004740:	08004845 	.word	0x08004845
 8004744:	08004845 	.word	0x08004845
 8004748:	08004845 	.word	0x08004845
 800474c:	08004845 	.word	0x08004845
 8004750:	08004845 	.word	0x08004845
 8004754:	08004845 	.word	0x08004845
 8004758:	08004845 	.word	0x08004845
 800475c:	08004779 	.word	0x08004779
 8004760:	08004845 	.word	0x08004845
 8004764:	08004845 	.word	0x08004845
 8004768:	08004845 	.word	0x08004845
 800476c:	08004845 	.word	0x08004845
 8004770:	08004845 	.word	0x08004845
 8004774:	08004785 	.word	0x08004785
    {
       case 0xF6: encoding = 0x94; break; // ö
 8004778:	2394      	movs	r3, #148	@ 0x94
 800477a:	80fb      	strh	r3, [r7, #6]
 800477c:	e015      	b.n	80047aa <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 800477e:	2399      	movs	r3, #153	@ 0x99
 8004780:	80fb      	strh	r3, [r7, #6]
 8004782:	e012      	b.n	80047aa <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8004784:	2381      	movs	r3, #129	@ 0x81
 8004786:	80fb      	strh	r3, [r7, #6]
 8004788:	e00f      	b.n	80047aa <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 800478a:	239a      	movs	r3, #154	@ 0x9a
 800478c:	80fb      	strh	r3, [r7, #6]
 800478e:	e00c      	b.n	80047aa <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8004790:	2384      	movs	r3, #132	@ 0x84
 8004792:	80fb      	strh	r3, [r7, #6]
 8004794:	e009      	b.n	80047aa <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8004796:	238e      	movs	r3, #142	@ 0x8e
 8004798:	80fb      	strh	r3, [r7, #6]
 800479a:	e006      	b.n	80047aa <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 800479c:	23e6      	movs	r3, #230	@ 0xe6
 800479e:	80fb      	strh	r3, [r7, #6]
 80047a0:	e003      	b.n	80047aa <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80047a2:	23f8      	movs	r3, #248	@ 0xf8
 80047a4:	80fb      	strh	r3, [r7, #6]
 80047a6:	bf00      	nop
 80047a8:	e04c      	b.n	8004844 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80047aa:	e04b      	b.n	8004844 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80047ac:	4b49      	ldr	r3, [pc, #292]	@ (80048d4 <_UG_GetCharData+0x284>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b2:	8a7a      	ldrh	r2, [r7, #18]
 80047b4:	0052      	lsls	r2, r2, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fbb5 	bl	8003f28 <ptr_8to16>
 80047be:	4603      	mov	r3, r0
 80047c0:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80047c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da06      	bge.n	80047d8 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80047ca:	89fb      	ldrh	r3, [r7, #14]
 80047cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80047d0:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80047d2:	2301      	movs	r3, #1
 80047d4:	747b      	strb	r3, [r7, #17]
 80047d6:	e032      	b.n	800483e <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80047d8:	7c7b      	ldrb	r3, [r7, #17]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d021      	beq.n	8004822 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	8afb      	ldrh	r3, [r7, #22]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d30d      	bcc.n	8004802 <_UG_GetCharData+0x1b2>
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	89fb      	ldrh	r3, [r7, #14]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d809      	bhi.n	8004802 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	8afb      	ldrh	r3, [r7, #22]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	8abb      	ldrh	r3, [r7, #20]
 80047f8:	4413      	add	r3, r2
 80047fa:	82bb      	strh	r3, [r7, #20]
        found=1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	743b      	strb	r3, [r7, #16]
        break;
 8004800:	e02a      	b.n	8004858 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	8afb      	ldrh	r3, [r7, #22]
 8004806:	429a      	cmp	r2, r3
 8004808:	d323      	bcc.n	8004852 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800480a:	89fa      	ldrh	r2, [r7, #14]
 800480c:	8afb      	ldrh	r3, [r7, #22]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	b29a      	uxth	r2, r3
 8004812:	8abb      	ldrh	r3, [r7, #20]
 8004814:	4413      	add	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	82bb      	strh	r3, [r7, #20]
      range=0;
 800481c:	2300      	movs	r3, #0
 800481e:	747b      	strb	r3, [r7, #17]
 8004820:	e00d      	b.n	800483e <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	429a      	cmp	r2, r3
 8004828:	d102      	bne.n	8004830 <_UG_GetCharData+0x1e0>
      {
        found=1;
 800482a:	2301      	movs	r3, #1
 800482c:	743b      	strb	r3, [r7, #16]
        break;
 800482e:	e013      	b.n	8004858 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	89fb      	ldrh	r3, [r7, #14]
 8004834:	429a      	cmp	r2, r3
 8004836:	d30e      	bcc.n	8004856 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8004838:	8abb      	ldrh	r3, [r7, #20]
 800483a:	3301      	adds	r3, #1
 800483c:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800483e:	8a7b      	ldrh	r3, [r7, #18]
 8004840:	3301      	adds	r3, #1
 8004842:	827b      	strh	r3, [r7, #18]
 8004844:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <_UG_GetCharData+0x284>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800484a:	8a7a      	ldrh	r2, [r7, #18]
 800484c:	429a      	cmp	r2, r3
 800484e:	d3ad      	bcc.n	80047ac <_UG_GetCharData+0x15c>
 8004850:	e002      	b.n	8004858 <_UG_GetCharData+0x208>
        break;
 8004852:	bf00      	nop
 8004854:	e000      	b.n	8004858 <_UG_GetCharData+0x208>
        break;
 8004856:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8004858:	7c3b      	ldrb	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d034      	beq.n	80048c8 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800485e:	4b1d      	ldr	r3, [pc, #116]	@ (80048d4 <_UG_GetCharData+0x284>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004864:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <_UG_GetCharData+0x288>)
 8004866:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8004868:	4a1c      	ldr	r2, [pc, #112]	@ (80048dc <_UG_GetCharData+0x28c>)
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 800486e:	4b19      	ldr	r3, [pc, #100]	@ (80048d4 <_UG_GetCharData+0x284>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	8aba      	ldrh	r2, [r7, #20]
 8004876:	4917      	ldr	r1, [pc, #92]	@ (80048d4 <_UG_GetCharData+0x284>)
 8004878:	6809      	ldr	r1, [r1, #0]
 800487a:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 800487c:	fb01 f202 	mul.w	r2, r1, r2
 8004880:	4413      	add	r3, r2
 8004882:	4a17      	ldr	r2, [pc, #92]	@ (80048e0 <_UG_GetCharData+0x290>)
 8004884:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8004886:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <_UG_GetCharData+0x284>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8004890:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <_UG_GetCharData+0x284>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004896:	8abb      	ldrh	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b21a      	sxth	r2, r3
 800489e:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <_UG_GetCharData+0x294>)
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e006      	b.n	80048b2 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <_UG_GetCharData+0x284>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80048ac:	b21a      	sxth	r2, r3
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <_UG_GetCharData+0x294>)
 80048b0:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 80048b8:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <_UG_GetCharData+0x290>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80048c0:	4b08      	ldr	r3, [pc, #32]	@ (80048e4 <_UG_GetCharData+0x294>)
 80048c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c6:	e001      	b.n	80048cc <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	200001a4 	.word	0x200001a4
 80048d8:	200001a8 	.word	0x200001a8
 80048dc:	200001ac 	.word	0x200001ac
 80048e0:	200001b0 	.word	0x200001b0
 80048e4:	200001b4 	.word	0x200001b4

080048e8 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80048e8:	b590      	push	{r4, r7, lr}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80048f0:	4b3d      	ldr	r3, [pc, #244]	@ (80049e8 <_UG_FontSelect+0x100>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d070      	beq.n	80049de <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80048fc:	4b3a      	ldr	r3, [pc, #232]	@ (80049e8 <_UG_FontSelect+0x100>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <_UG_FontSelect+0x100>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b25b      	sxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	da01      	bge.n	8004928 <_UG_FontSelect+0x40>
 8004924:	2201      	movs	r2, #1
 8004926:	e000      	b.n	800492a <_UG_FontSelect+0x42>
 8004928:	2200      	movs	r2, #0
 800492a:	4b2f      	ldr	r3, [pc, #188]	@ (80049e8 <_UG_FontSelect+0x100>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	4a2b      	ldr	r2, [pc, #172]	@ (80049e8 <_UG_FontSelect+0x100>)
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	4a27      	ldr	r2, [pc, #156]	@ (80049e8 <_UG_FontSelect+0x100>)
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8004954:	4b24      	ldr	r3, [pc, #144]	@ (80049e8 <_UG_FontSelect+0x100>)
 8004956:	681c      	ldr	r4, [r3, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff fae5 	bl	8003f28 <ptr_8to16>
 800495e:	4603      	mov	r3, r0
 8004960:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3302      	adds	r3, #2
 8004966:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8004968:	4b1f      	ldr	r3, [pc, #124]	@ (80049e8 <_UG_FontSelect+0x100>)
 800496a:	681c      	ldr	r4, [r3, #0]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff fadb 	bl	8003f28 <ptr_8to16>
 8004972:	4603      	mov	r3, r0
 8004974:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3302      	adds	r3, #2
 800497a:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 800497c:	4b1a      	ldr	r3, [pc, #104]	@ (80049e8 <_UG_FontSelect+0x100>)
 800497e:	681c      	ldr	r4, [r3, #0]
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fad1 	bl	8003f28 <ptr_8to16>
 8004986:	4603      	mov	r3, r0
 8004988:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3302      	adds	r3, #2
 800498e:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 800499c:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <_UG_FontSelect+0x100>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80049a4:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <_UG_FontSelect+0x100>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049aa:	461a      	mov	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	e003      	b.n	80049bc <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <_UG_FontSelect+0x100>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80049bc:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <_UG_FontSelect+0x100>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80049c4:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <_UG_FontSelect+0x100>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80049d4:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <_UG_FontSelect+0x100>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40
 80049dc:	e000      	b.n	80049e0 <_UG_FontSelect+0xf8>
    return;
 80049de:	bf00      	nop
}
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd90      	pop	{r4, r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200001a4 	.word	0x200001a4

080049ec <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80049ec:	b5b0      	push	{r4, r5, r7, lr}
 80049ee:	b08c      	sub	sp, #48	@ 0x30
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	80fb      	strh	r3, [r7, #6]
 80049fe:	4603      	mov	r3, r0
 8004a00:	80bb      	strh	r3, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	807b      	strh	r3, [r7, #2]
 8004a06:	4613      	mov	r3, r2
 8004a08:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004a0e:	2300      	movs	r3, #0
 8004a10:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004a12:	2300      	movs	r3, #0
 8004a14:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a16:	2300      	movs	r3, #0
 8004a18:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8004a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8004a22:	75fb      	strb	r3, [r7, #23]
 8004a24:	4b88      	ldr	r3, [pc, #544]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8004a36:	f107 0208 	add.w	r2, r7, #8
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fe06 	bl	8004650 <_UG_GetCharData>
 8004a44:	4603      	mov	r3, r0
 8004a46:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8004a48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d102      	bne.n	8004a58 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	e224      	b.n	8004ea2 <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 8004a58:	4b7b      	ldr	r3, [pc, #492]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004a60:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 8004a62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <_UG_PutChar+0x80>
     return 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e21a      	b.n	8004ea2 <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 8004a6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a6e:	08db      	lsrs	r3, r3, #3
 8004a70:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8004a72:	4b75      	ldr	r3, [pc, #468]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <_UG_PutChar+0x9e>
 8004a84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a86:	3301      	adds	r3, #1
 8004a88:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8004a8a:	7dbb      	ldrb	r3, [r7, #22]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01c      	beq.n	8004aca <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8004a90:	4b6d      	ldr	r3, [pc, #436]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a96:	461c      	mov	r4, r3
 8004a98:	88ba      	ldrh	r2, [r7, #4]
 8004a9a:	8abb      	ldrh	r3, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	b21a      	sxth	r2, r3
 8004aa6:	4b68      	ldr	r3, [pc, #416]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004aae:	4619      	mov	r1, r3
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	440b      	add	r3, r1
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	b21b      	sxth	r3, r3
 8004abc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004ac0:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8004ac4:	47a0      	blx	r4
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8004aca:	4b5f      	ldr	r3, [pc, #380]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 8171 	bne.w	8004dba <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004ad8:	2300      	movs	r3, #0
 8004ada:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004adc:	e0eb      	b.n	8004cb6 <_UG_PutChar+0x2ca>
     {
       c=0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004ae6:	e0de      	b.n	8004ca6 <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	60ba      	str	r2, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8004af2:	2300      	movs	r3, #0
 8004af4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004af6:	e0c9      	b.n	8004c8c <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8004af8:	7f7b      	ldrb	r3, [r7, #29]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d033      	beq.n	8004b6a <_UG_PutChar+0x17e>
           {
             if(driver)
 8004b02:	7dbb      	ldrb	r3, [r7, #22]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01f      	beq.n	8004b48 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8004b08:	8c3b      	ldrh	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <_UG_PutChar+0x138>
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d107      	bne.n	8004b24 <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8004b14:	8c3a      	ldrh	r2, [r7, #32]
 8004b16:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4798      	blx	r3
                 bpixels=0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8004b24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <_UG_PutChar+0x154>
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 8004b30:	88ba      	ldrh	r2, [r7, #4]
 8004b32:	8bfb      	ldrh	r3, [r7, #30]
 8004b34:	4413      	add	r3, r2
 8004b36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 8004b38:	887a      	ldrh	r2, [r7, #2]
 8004b3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b3c:	4413      	add	r3, r2
 8004b3e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8004b40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b42:	3301      	adds	r3, #1
 8004b44:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b46:	e095      	b.n	8004c74 <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8004b48:	4b3f      	ldr	r3, [pc, #252]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	88b9      	ldrh	r1, [r7, #4]
 8004b52:	8bfa      	ldrh	r2, [r7, #30]
 8004b54:	440a      	add	r2, r1
 8004b56:	b292      	uxth	r2, r2
 8004b58:	b210      	sxth	r0, r2
 8004b5a:	8879      	ldrh	r1, [r7, #2]
 8004b5c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004b5e:	440a      	add	r2, r1
 8004b60:	b292      	uxth	r2, r2
 8004b62:	b211      	sxth	r1, r2
 8004b64:	883a      	ldrh	r2, [r7, #0]
 8004b66:	4798      	blx	r3
 8004b68:	e084      	b.n	8004c74 <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8004b6a:	7dbb      	ldrb	r3, [r7, #22]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d06d      	beq.n	8004c4c <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8004b70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d064      	beq.n	8004c40 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d15e      	bne.n	8004c3a <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 8004b7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004b7e:	8839      	ldrh	r1, [r7, #0]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	4610      	mov	r0, r2
 8004b84:	4798      	blx	r3
                   fpixels=0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b8a:	e059      	b.n	8004c40 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8004b8c:	88ba      	ldrh	r2, [r7, #4]
 8004b8e:	8abb      	ldrh	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8004b9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004b9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d003      	beq.n	8004bac <_UG_PutChar+0x1c0>
 8004ba4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d224      	bcs.n	8004bf6 <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8004bac:	4b26      	ldr	r3, [pc, #152]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb2:	461d      	mov	r5, r3
 8004bb4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004bb8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8004bbc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004bbe:	89fb      	ldrh	r3, [r7, #14]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	b21c      	sxth	r4, r3
 8004bca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004bd8:	4413      	add	r3, r2
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	b21b      	sxth	r3, r3
 8004bde:	4622      	mov	r2, r4
 8004be0:	47a8      	blx	r5
 8004be2:	4603      	mov	r3, r0
 8004be4:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8004be6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004be8:	8839      	ldrh	r1, [r7, #0]
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4610      	mov	r0, r2
 8004bee:	4798      	blx	r3
                       fpixels=0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004bf4:	e021      	b.n	8004c3a <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8004bf6:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <_UG_PutChar+0x25c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bfc:	461c      	mov	r4, r3
 8004bfe:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004c02:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8004c06:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	b21a      	sxth	r2, r3
 8004c14:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004c18:	47a0      	blx	r4
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8004c1e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004c20:	8839      	ldrh	r1, [r7, #0]
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
                       fpixels -= width;
 8004c28:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8004c30:	88bb      	ldrh	r3, [r7, #4]
 8004c32:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 8004c34:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c36:	3301      	adds	r3, #1
 8004c38:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8004c3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1a5      	bne.n	8004b8c <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8004c40:	8c3b      	ldrh	r3, [r7, #32]
 8004c42:	3301      	adds	r3, #1
 8004c44:	843b      	strh	r3, [r7, #32]
 8004c46:	e015      	b.n	8004c74 <_UG_PutChar+0x288>
 8004c48:	200001a4 	.word	0x200001a4
             }
             else if(!trans)                           // Not accelerated output
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d110      	bne.n	8004c74 <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 8004c52:	4b96      	ldr	r3, [pc, #600]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	88b9      	ldrh	r1, [r7, #4]
 8004c5c:	8bfa      	ldrh	r2, [r7, #30]
 8004c5e:	440a      	add	r2, r1
 8004c60:	b292      	uxth	r2, r2
 8004c62:	b210      	sxth	r0, r2
 8004c64:	8879      	ldrh	r1, [r7, #2]
 8004c66:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004c68:	440a      	add	r2, r1
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	b211      	sxth	r1, r2
 8004c6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004c72:	4798      	blx	r3
             }
           }
           b >>= 1;
 8004c74:	7f7b      	ldrb	r3, [r7, #29]
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	777b      	strb	r3, [r7, #29]
           c++;
 8004c7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8004c86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c88:	3301      	adds	r3, #1
 8004c8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c8e:	2b07      	cmp	r3, #7
 8004c90:	d806      	bhi.n	8004ca0 <_UG_PutChar+0x2b4>
 8004c92:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004c96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	f6ff af2c 	blt.w	8004af8 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 8004ca0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004ca6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004caa:	429a      	cmp	r2, r3
 8004cac:	f4ff af1c 	bcc.w	8004ae8 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004cb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f4ff af0b 	bcc.w	8004ade <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8004cc8:	7dbb      	ldrb	r3, [r7, #22]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80e7 	beq.w	8004e9e <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 8004cd0:	8c3b      	ldrh	r3, [r7, #32]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <_UG_PutChar+0x2fe>
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8004cdc:	8c3a      	ldrh	r2, [r7, #32]
 8004cde:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
 8004ce8:	e0d9      	b.n	8004e9e <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8004cea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80d6 	beq.w	8004e9e <_UG_PutChar+0x4b2>
       {
         if(!trans)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d15c      	bne.n	8004db2 <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8004cf8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004cfa:	8839      	ldrh	r1, [r7, #0]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4798      	blx	r3
 8004d02:	e0cc      	b.n	8004e9e <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8004d04:	88ba      	ldrh	r2, [r7, #4]
 8004d06:	8abb      	ldrh	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8004d12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d003      	beq.n	8004d24 <_UG_PutChar+0x338>
 8004d1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004d1e:	8a3b      	ldrh	r3, [r7, #16]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d224      	bcs.n	8004d6e <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8004d24:	4b61      	ldr	r3, [pc, #388]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004d30:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8004d34:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d36:	8a3b      	ldrh	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b21c      	sxth	r4, r3
 8004d42:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004d44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d48:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d50:	4413      	add	r3, r2
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	b21b      	sxth	r3, r3
 8004d56:	4622      	mov	r2, r4
 8004d58:	47a8      	blx	r5
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8004d5e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004d60:	8839      	ldrh	r1, [r7, #0]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
               fpixels=0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d6c:	e021      	b.n	8004db2 <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8004d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d74:	461c      	mov	r4, r3
 8004d76:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004d7a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8004d7e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d80:	8a3b      	ldrh	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	b21a      	sxth	r2, r3
 8004d8c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004d90:	47a0      	blx	r4
 8004d92:	4603      	mov	r3, r0
 8004d94:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8004d96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004d98:	8839      	ldrh	r1, [r7, #0]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4798      	blx	r3
               fpixels -= width;
 8004da0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004da2:	8a3b      	ldrh	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 8004da8:	88bb      	ldrh	r3, [r7, #4]
 8004daa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8004dac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004dae:	3301      	adds	r3, #1
 8004db0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 8004db2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1a5      	bne.n	8004d04 <_UG_PutChar+0x318>
 8004db8:	e071      	b.n	8004e9e <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8004dba:	4b3c      	ldr	r3, [pc, #240]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d16b      	bne.n	8004e9e <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004dca:	e060      	b.n	8004e8e <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8004dcc:	2300      	movs	r3, #0
 8004dce:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004dd0:	e04a      	b.n	8004e68 <_UG_PutChar+0x47c>
       {
         b = *data++;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	60ba      	str	r2, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8004ddc:	883b      	ldrh	r3, [r7, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	7f7a      	ldrb	r2, [r7, #29]
 8004de2:	fb03 f202 	mul.w	r2, r3, r2
 8004de6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	7f79      	ldrb	r1, [r7, #29]
 8004dee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	121b      	asrs	r3, r3, #8
 8004dfa:	b21b      	sxth	r3, r3
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8004e00:	883b      	ldrh	r3, [r7, #0]
 8004e02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e06:	7f79      	ldrb	r1, [r7, #29]
 8004e08:	fb03 f101 	mul.w	r1, r3, r1
 8004e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e14:	7f78      	ldrb	r0, [r7, #29]
 8004e16:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	440b      	add	r3, r1
 8004e20:	121b      	asrs	r3, r3, #8
 8004e22:	b21b      	sxth	r3, r3
 8004e24:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e28:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b21b      	sxth	r3, r3
 8004e2e:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8004e30:	7dbb      	ldrb	r3, [r7, #22]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8004e36:	8a7a      	ldrh	r2, [r7, #18]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	4798      	blx	r3
 8004e40:	e00f      	b.n	8004e62 <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8004e42:	4b1a      	ldr	r3, [pc, #104]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	88b9      	ldrh	r1, [r7, #4]
 8004e4c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004e4e:	440a      	add	r2, r1
 8004e50:	b292      	uxth	r2, r2
 8004e52:	b210      	sxth	r0, r2
 8004e54:	8879      	ldrh	r1, [r7, #2]
 8004e56:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004e58:	440a      	add	r2, r1
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	b211      	sxth	r1, r2
 8004e5e:	8a7a      	ldrh	r2, [r7, #18]
 8004e60:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8004e62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004e64:	3301      	adds	r3, #1
 8004e66:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004e68:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004e6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	dbaf      	blt.n	8004dd2 <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4a0d      	ldr	r2, [pc, #52]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004e82:	1a8a      	subs	r2, r1, r2
 8004e84:	4413      	add	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004e88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004e8e:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <_UG_PutChar+0x4c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004e96:	461a      	mov	r2, r3
 8004e98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d396      	bcc.n	8004dcc <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 8004e9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3730      	adds	r7, #48	@ 0x30
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200001a4 	.word	0x200001a4

08004eb0 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	@ 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8004eb8:	4b57      	ldr	r3, [pc, #348]	@ (8005018 <_UG_ProcessTouchData+0x168>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	88db      	ldrh	r3, [r3, #6]
 8004ebe:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8004ec0:	4b55      	ldr	r3, [pc, #340]	@ (8005018 <_UG_ProcessTouchData+0x168>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	891b      	ldrh	r3, [r3, #8]
 8004ec6:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8004ec8:	4b53      	ldr	r3, [pc, #332]	@ (8005018 <_UG_ProcessTouchData+0x168>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	83fb      	strh	r3, [r7, #30]
 8004eda:	e090      	b.n	8004ffe <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	8bfb      	ldrh	r3, [r7, #30]
 8004ee2:	015b      	lsls	r3, r3, #5
 8004ee4:	4413      	add	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d179      	bne.n	8004ff2 <_UG_ProcessTouchData+0x142>
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d074      	beq.n	8004ff2 <_UG_ProcessTouchData+0x142>
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d06f      	beq.n	8004ff2 <_UG_ProcessTouchData+0x142>
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d16a      	bne.n	8004ff2 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d047      	beq.n	8004fb2 <_UG_ProcessTouchData+0x102>
 8004f22:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d042      	beq.n	8004fb2 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8004f2c:	7f7b      	ldrb	r3, [r7, #29]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8004f36:	7f7b      	ldrb	r3, [r7, #29]
 8004f38:	f043 0305 	orr.w	r3, r3, #5
 8004f3c:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8004f3e:	7f7b      	ldrb	r3, [r7, #29]
 8004f40:	f023 0318 	bic.w	r3, r3, #24
 8004f44:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8004f46:	7f7b      	ldrb	r3, [r7, #29]
 8004f48:	f023 0320 	bic.w	r3, r3, #32
 8004f4c:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f54:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	db25      	blt.n	8004fa8 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004f62:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	dc1e      	bgt.n	8004fa8 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004f70:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	db17      	blt.n	8004fa8 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004f7e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	dc10      	bgt.n	8004fa8 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8004f86:	7f7b      	ldrb	r3, [r7, #29]
 8004f88:	f043 0320 	orr.w	r3, r3, #32
 8004f8c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8004f8e:	7f7b      	ldrb	r3, [r7, #29]
 8004f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d107      	bne.n	8004fa8 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8004f98:	7f7b      	ldrb	r3, [r7, #29]
 8004f9a:	f023 0304 	bic.w	r3, r3, #4
 8004f9e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8004fa0:	7f7b      	ldrb	r3, [r7, #29]
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8004fa8:	7f7b      	ldrb	r3, [r7, #29]
 8004faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fae:	777b      	strb	r3, [r7, #29]
 8004fb0:	e01f      	b.n	8004ff2 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8004fb2:	7f7b      	ldrb	r3, [r7, #29]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01a      	beq.n	8004ff2 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8004fbc:	7f7b      	ldrb	r3, [r7, #29]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8004fc6:	7f7b      	ldrb	r3, [r7, #29]
 8004fc8:	f043 0308 	orr.w	r3, r3, #8
 8004fcc:	777b      	strb	r3, [r7, #29]
 8004fce:	e003      	b.n	8004fd8 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8004fd0:	7f7b      	ldrb	r3, [r7, #29]
 8004fd2:	f043 0310 	orr.w	r3, r3, #16
 8004fd6:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8004fd8:	7f7b      	ldrb	r3, [r7, #29]
 8004fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8004fe2:	7f7b      	ldrb	r3, [r7, #29]
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8004fea:	7f7b      	ldrb	r3, [r7, #29]
 8004fec:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 8004ff0:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	7f7a      	ldrb	r2, [r7, #29]
 8004ff6:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8004ff8:	8bfb      	ldrh	r3, [r7, #30]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	83fb      	strh	r3, [r7, #30]
 8004ffe:	8bfa      	ldrh	r2, [r7, #30]
 8005000:	8abb      	ldrh	r3, [r7, #20]
 8005002:	429a      	cmp	r2, r3
 8005004:	f4ff af6a 	bcc.w	8004edc <_UG_ProcessTouchData+0x2c>
   }
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	3724      	adds	r7, #36	@ 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200001a4 	.word	0x200001a4

0800501c <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	82fb      	strh	r3, [r7, #22]
 800502e:	e035      	b.n	800509c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	015b      	lsls	r3, r3, #5
 8005038:	4413      	add	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d121      	bne.n	8005096 <_UG_UpdateObjects+0x7a>
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01c      	beq.n	8005096 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <_UG_UpdateObjects+0x7a>
 800507a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	da09      	bge.n	8005096 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8005082:	7bbb      	ldrb	r3, [r7, #14]
 8005084:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	6939      	ldr	r1, [r7, #16]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8005096:	8afb      	ldrh	r3, [r7, #22]
 8005098:	3301      	adds	r3, #1
 800509a:	82fb      	strh	r3, [r7, #22]
 800509c:	8afa      	ldrh	r2, [r7, #22]
 800509e:	8abb      	ldrh	r3, [r7, #20]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d3c5      	bcc.n	8005030 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80050b8:	4b22      	ldr	r3, [pc, #136]	@ (8005144 <_UG_HandleEvents+0x94>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80050be:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <_UG_HandleEvents+0x94>)
 80050c0:	2202      	movs	r2, #2
 80050c2:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80050ca:	2300      	movs	r3, #0
 80050cc:	82fb      	strh	r3, [r7, #22]
 80050ce:	e02f      	b.n	8005130 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	8afb      	ldrh	r3, [r7, #22]
 80050d6:	015b      	lsls	r3, r3, #5
 80050d8:	4413      	add	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11e      	bne.n	800512a <_UG_HandleEvents+0x7a>
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d019      	beq.n	800512a <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	7e9b      	ldrb	r3, [r3, #26]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d015      	beq.n	800512a <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80050fe:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <_UG_HandleEvents+0x94>)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	7e1a      	ldrb	r2, [r3, #24]
 8005108:	4b0e      	ldr	r3, [pc, #56]	@ (8005144 <_UG_HandleEvents+0x94>)
 800510a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	7e5a      	ldrb	r2, [r3, #25]
 8005110:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <_UG_HandleEvents+0x94>)
 8005112:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	7e9a      	ldrb	r2, [r3, #26]
 8005118:	4b0a      	ldr	r3, [pc, #40]	@ (8005144 <_UG_HandleEvents+0x94>)
 800511a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005120:	4808      	ldr	r0, [pc, #32]	@ (8005144 <_UG_HandleEvents+0x94>)
 8005122:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2200      	movs	r2, #0
 8005128:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800512a:	8afb      	ldrh	r3, [r7, #22]
 800512c:	3301      	adds	r3, #1
 800512e:	82fb      	strh	r3, [r7, #22]
 8005130:	8afa      	ldrh	r2, [r7, #22]
 8005132:	8abb      	ldrh	r3, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	d3cb      	bcc.n	80050d0 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	200001b8 	.word	0x200001b8

08005148 <UG_DrawDashboard>:

/* Custom Function */
void UG_DrawDashboard(UG_S16 cx, UG_S16 cy, int16_t inner_r, int16_t outer_r, float prev_per, float after_per, UG_COLOR c)
{
 8005148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800514c:	b08e      	sub	sp, #56	@ 0x38
 800514e:	af02      	add	r7, sp, #8
 8005150:	4604      	mov	r4, r0
 8005152:	4608      	mov	r0, r1
 8005154:	4611      	mov	r1, r2
 8005156:	461a      	mov	r2, r3
 8005158:	ed87 0a01 	vstr	s0, [r7, #4]
 800515c:	edc7 0a00 	vstr	s1, [r7]
 8005160:	4623      	mov	r3, r4
 8005162:	81fb      	strh	r3, [r7, #14]
 8005164:	4603      	mov	r3, r0
 8005166:	81bb      	strh	r3, [r7, #12]
 8005168:	460b      	mov	r3, r1
 800516a:	817b      	strh	r3, [r7, #10]
 800516c:	4613      	mov	r3, r2
 800516e:	813b      	strh	r3, [r7, #8]
	float zero_angle = -30;
 8005170:	4baf      	ldr	r3, [pc, #700]	@ (8005430 <UG_DrawDashboard+0x2e8>)
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
	float full_angle = 210;
 8005174:	4baf      	ldr	r3, [pc, #700]	@ (8005434 <UG_DrawDashboard+0x2ec>)
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24

	float curr_angle = zero_angle + (full_angle - zero_angle) * prev_per / 100;
 8005178:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800517c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005180:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005184:	edd7 7a01 	vldr	s15, [r7, #4]
 8005188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800518c:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8005438 <UG_DrawDashboard+0x2f0>
 8005190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005194:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800519c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float final_angle = zero_angle + (full_angle - zero_angle) * after_per / 100;
 80051a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80051a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80051a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051ac:	edd7 7a00 	vldr	s15, [r7]
 80051b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051b4:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8005438 <UG_DrawDashboard+0x2f0>
 80051b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051bc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80051c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c4:	edc7 7a08 	vstr	s15, [r7, #32]
	if (curr_angle <= final_angle)
 80051c8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80051cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80051d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	f200 811e 	bhi.w	8005418 <UG_DrawDashboard+0x2d0>
	{
		while (curr_angle < final_angle)
 80051dc:	e111      	b.n	8005402 <UG_DrawDashboard+0x2ba>
		{
			UG_S16 x1 = cx - outer_r * cos(curr_angle * M_PI / 180);
 80051de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f942 	bl	800046c <__aeabi_i2d>
 80051e8:	4604      	mov	r4, r0
 80051ea:	460d      	mov	r5, r1
 80051ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb f93b 	bl	800046c <__aeabi_i2d>
 80051f6:	4680      	mov	r8, r0
 80051f8:	4689      	mov	r9, r1
 80051fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051fc:	f7fb f948 	bl	8000490 <__aeabi_f2d>
 8005200:	a387      	add	r3, pc, #540	@ (adr r3, 8005420 <UG_DrawDashboard+0x2d8>)
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f7fb f99b 	bl	8000540 <__aeabi_dmul>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	4b89      	ldr	r3, [pc, #548]	@ (800543c <UG_DrawDashboard+0x2f4>)
 8005218:	f7fb fabc 	bl	8000794 <__aeabi_ddiv>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	ec43 2b17 	vmov	d7, r2, r3
 8005224:	eeb0 0a47 	vmov.f32	s0, s14
 8005228:	eef0 0a67 	vmov.f32	s1, s15
 800522c:	f000 ff14 	bl	8006058 <cos>
 8005230:	ec53 2b10 	vmov	r2, r3, d0
 8005234:	4640      	mov	r0, r8
 8005236:	4649      	mov	r1, r9
 8005238:	f7fb f982 	bl	8000540 <__aeabi_dmul>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4620      	mov	r0, r4
 8005242:	4629      	mov	r1, r5
 8005244:	f7fa ffc4 	bl	80001d0 <__aeabi_dsub>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	f7fb fc10 	bl	8000a74 <__aeabi_d2iz>
 8005254:	4603      	mov	r3, r0
 8005256:	82fb      	strh	r3, [r7, #22]
			UG_S16 y1 = cy - outer_r * sin(curr_angle * M_PI / 180);
 8005258:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb f905 	bl	800046c <__aeabi_i2d>
 8005262:	4604      	mov	r4, r0
 8005264:	460d      	mov	r5, r1
 8005266:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fb f8fe 	bl	800046c <__aeabi_i2d>
 8005270:	4680      	mov	r8, r0
 8005272:	4689      	mov	r9, r1
 8005274:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005276:	f7fb f90b 	bl	8000490 <__aeabi_f2d>
 800527a:	a369      	add	r3, pc, #420	@ (adr r3, 8005420 <UG_DrawDashboard+0x2d8>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f95e 	bl	8000540 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	4b6a      	ldr	r3, [pc, #424]	@ (800543c <UG_DrawDashboard+0x2f4>)
 8005292:	f7fb fa7f 	bl	8000794 <__aeabi_ddiv>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	ec43 2b17 	vmov	d7, r2, r3
 800529e:	eeb0 0a47 	vmov.f32	s0, s14
 80052a2:	eef0 0a67 	vmov.f32	s1, s15
 80052a6:	f000 ff2b 	bl	8006100 <sin>
 80052aa:	ec53 2b10 	vmov	r2, r3, d0
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fb f945 	bl	8000540 <__aeabi_dmul>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4620      	mov	r0, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	f7fa ff87 	bl	80001d0 <__aeabi_dsub>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4610      	mov	r0, r2
 80052c8:	4619      	mov	r1, r3
 80052ca:	f7fb fbd3 	bl	8000a74 <__aeabi_d2iz>
 80052ce:	4603      	mov	r3, r0
 80052d0:	82bb      	strh	r3, [r7, #20]
			UG_S16 x2 = cx - inner_r * cos(curr_angle * M_PI / 180);
 80052d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb f8c8 	bl	800046c <__aeabi_i2d>
 80052dc:	4604      	mov	r4, r0
 80052de:	460d      	mov	r5, r1
 80052e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fb f8c1 	bl	800046c <__aeabi_i2d>
 80052ea:	4680      	mov	r8, r0
 80052ec:	4689      	mov	r9, r1
 80052ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80052f0:	f7fb f8ce 	bl	8000490 <__aeabi_f2d>
 80052f4:	a34a      	add	r3, pc, #296	@ (adr r3, 8005420 <UG_DrawDashboard+0x2d8>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fb f921 	bl	8000540 <__aeabi_dmul>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	4b4c      	ldr	r3, [pc, #304]	@ (800543c <UG_DrawDashboard+0x2f4>)
 800530c:	f7fb fa42 	bl	8000794 <__aeabi_ddiv>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	ec43 2b17 	vmov	d7, r2, r3
 8005318:	eeb0 0a47 	vmov.f32	s0, s14
 800531c:	eef0 0a67 	vmov.f32	s1, s15
 8005320:	f000 fe9a 	bl	8006058 <cos>
 8005324:	ec53 2b10 	vmov	r2, r3, d0
 8005328:	4640      	mov	r0, r8
 800532a:	4649      	mov	r1, r9
 800532c:	f7fb f908 	bl	8000540 <__aeabi_dmul>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4620      	mov	r0, r4
 8005336:	4629      	mov	r1, r5
 8005338:	f7fa ff4a 	bl	80001d0 <__aeabi_dsub>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	f7fb fb96 	bl	8000a74 <__aeabi_d2iz>
 8005348:	4603      	mov	r3, r0
 800534a:	827b      	strh	r3, [r7, #18]
			UG_S16 y2 = cy - inner_r * sin(curr_angle * M_PI / 180);
 800534c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005350:	4618      	mov	r0, r3
 8005352:	f7fb f88b 	bl	800046c <__aeabi_i2d>
 8005356:	4604      	mov	r4, r0
 8005358:	460d      	mov	r5, r1
 800535a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fb f884 	bl	800046c <__aeabi_i2d>
 8005364:	4680      	mov	r8, r0
 8005366:	4689      	mov	r9, r1
 8005368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800536a:	f7fb f891 	bl	8000490 <__aeabi_f2d>
 800536e:	a32c      	add	r3, pc, #176	@ (adr r3, 8005420 <UG_DrawDashboard+0x2d8>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fb f8e4 	bl	8000540 <__aeabi_dmul>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	4b2d      	ldr	r3, [pc, #180]	@ (800543c <UG_DrawDashboard+0x2f4>)
 8005386:	f7fb fa05 	bl	8000794 <__aeabi_ddiv>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	ec43 2b17 	vmov	d7, r2, r3
 8005392:	eeb0 0a47 	vmov.f32	s0, s14
 8005396:	eef0 0a67 	vmov.f32	s1, s15
 800539a:	f000 feb1 	bl	8006100 <sin>
 800539e:	ec53 2b10 	vmov	r2, r3, d0
 80053a2:	4640      	mov	r0, r8
 80053a4:	4649      	mov	r1, r9
 80053a6:	f7fb f8cb 	bl	8000540 <__aeabi_dmul>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4620      	mov	r0, r4
 80053b0:	4629      	mov	r1, r5
 80053b2:	f7fa ff0d 	bl	80001d0 <__aeabi_dsub>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	f7fb fb59 	bl	8000a74 <__aeabi_d2iz>
 80053c2:	4603      	mov	r3, r0
 80053c4:	823b      	strh	r3, [r7, #16]
			UG_DrawLine(x1, y1, x2, y2, c);
 80053c6:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 80053ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80053ce:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80053d2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80053d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	4623      	mov	r3, r4
 80053de:	f7fe fefb 	bl	80041d8 <UG_DrawLine>
			curr_angle = curr_angle + 0.2;
 80053e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053e4:	f7fb f854 	bl	8000490 <__aeabi_f2d>
 80053e8:	a30f      	add	r3, pc, #60	@ (adr r3, 8005428 <UG_DrawDashboard+0x2e0>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fa fef1 	bl	80001d4 <__adddf3>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7fb fb63 	bl	8000ac4 <__aeabi_d2f>
 80053fe:	4603      	mov	r3, r0
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while (curr_angle < final_angle)
 8005402:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005406:	edd7 7a08 	vldr	s15, [r7, #32]
 800540a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	f53f aee4 	bmi.w	80051de <UG_DrawDashboard+0x96>
			UG_S16 y2 = cy - inner_r * sin(curr_angle * M_PI / 180);
			UG_DrawLine(x1, y1, x2, y2, c);
			curr_angle = curr_angle - 0.2;
		}
	}
}
 8005416:	e12f      	b.n	8005678 <UG_DrawDashboard+0x530>
		while (curr_angle > final_angle)
 8005418:	e124      	b.n	8005664 <UG_DrawDashboard+0x51c>
 800541a:	bf00      	nop
 800541c:	f3af 8000 	nop.w
 8005420:	54442d18 	.word	0x54442d18
 8005424:	400921fb 	.word	0x400921fb
 8005428:	9999999a 	.word	0x9999999a
 800542c:	3fc99999 	.word	0x3fc99999
 8005430:	c1f00000 	.word	0xc1f00000
 8005434:	43520000 	.word	0x43520000
 8005438:	42c80000 	.word	0x42c80000
 800543c:	40668000 	.word	0x40668000
			UG_S16 x1 = cx - outer_r * cos(curr_angle * M_PI / 180);
 8005440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005444:	4618      	mov	r0, r3
 8005446:	f7fb f811 	bl	800046c <__aeabi_i2d>
 800544a:	4604      	mov	r4, r0
 800544c:	460d      	mov	r5, r1
 800544e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fb f80a 	bl	800046c <__aeabi_i2d>
 8005458:	4680      	mov	r8, r0
 800545a:	4689      	mov	r9, r1
 800545c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800545e:	f7fb f817 	bl	8000490 <__aeabi_f2d>
 8005462:	a389      	add	r3, pc, #548	@ (adr r3, 8005688 <UG_DrawDashboard+0x540>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fb f86a 	bl	8000540 <__aeabi_dmul>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4610      	mov	r0, r2
 8005472:	4619      	mov	r1, r3
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	4b87      	ldr	r3, [pc, #540]	@ (8005698 <UG_DrawDashboard+0x550>)
 800547a:	f7fb f98b 	bl	8000794 <__aeabi_ddiv>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	ec43 2b17 	vmov	d7, r2, r3
 8005486:	eeb0 0a47 	vmov.f32	s0, s14
 800548a:	eef0 0a67 	vmov.f32	s1, s15
 800548e:	f000 fde3 	bl	8006058 <cos>
 8005492:	ec53 2b10 	vmov	r2, r3, d0
 8005496:	4640      	mov	r0, r8
 8005498:	4649      	mov	r1, r9
 800549a:	f7fb f851 	bl	8000540 <__aeabi_dmul>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4620      	mov	r0, r4
 80054a4:	4629      	mov	r1, r5
 80054a6:	f7fa fe93 	bl	80001d0 <__aeabi_dsub>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb fadf 	bl	8000a74 <__aeabi_d2iz>
 80054b6:	4603      	mov	r3, r0
 80054b8:	83fb      	strh	r3, [r7, #30]
			UG_S16 y1 = cy - outer_r * sin(curr_angle * M_PI / 180);
 80054ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fa ffd4 	bl	800046c <__aeabi_i2d>
 80054c4:	4604      	mov	r4, r0
 80054c6:	460d      	mov	r5, r1
 80054c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fa ffcd 	bl	800046c <__aeabi_i2d>
 80054d2:	4680      	mov	r8, r0
 80054d4:	4689      	mov	r9, r1
 80054d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054d8:	f7fa ffda 	bl	8000490 <__aeabi_f2d>
 80054dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005688 <UG_DrawDashboard+0x540>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fb f82d 	bl	8000540 <__aeabi_dmul>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	4b69      	ldr	r3, [pc, #420]	@ (8005698 <UG_DrawDashboard+0x550>)
 80054f4:	f7fb f94e 	bl	8000794 <__aeabi_ddiv>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	ec43 2b17 	vmov	d7, r2, r3
 8005500:	eeb0 0a47 	vmov.f32	s0, s14
 8005504:	eef0 0a67 	vmov.f32	s1, s15
 8005508:	f000 fdfa 	bl	8006100 <sin>
 800550c:	ec53 2b10 	vmov	r2, r3, d0
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fb f814 	bl	8000540 <__aeabi_dmul>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fa fe56 	bl	80001d0 <__aeabi_dsub>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	f7fb faa2 	bl	8000a74 <__aeabi_d2iz>
 8005530:	4603      	mov	r3, r0
 8005532:	83bb      	strh	r3, [r7, #28]
			UG_S16 x2 = cx - inner_r * cos(curr_angle * M_PI / 180);
 8005534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005538:	4618      	mov	r0, r3
 800553a:	f7fa ff97 	bl	800046c <__aeabi_i2d>
 800553e:	4604      	mov	r4, r0
 8005540:	460d      	mov	r5, r1
 8005542:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fa ff90 	bl	800046c <__aeabi_i2d>
 800554c:	4680      	mov	r8, r0
 800554e:	4689      	mov	r9, r1
 8005550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005552:	f7fa ff9d 	bl	8000490 <__aeabi_f2d>
 8005556:	a34c      	add	r3, pc, #304	@ (adr r3, 8005688 <UG_DrawDashboard+0x540>)
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f7fa fff0 	bl	8000540 <__aeabi_dmul>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	4b4a      	ldr	r3, [pc, #296]	@ (8005698 <UG_DrawDashboard+0x550>)
 800556e:	f7fb f911 	bl	8000794 <__aeabi_ddiv>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	ec43 2b17 	vmov	d7, r2, r3
 800557a:	eeb0 0a47 	vmov.f32	s0, s14
 800557e:	eef0 0a67 	vmov.f32	s1, s15
 8005582:	f000 fd69 	bl	8006058 <cos>
 8005586:	ec53 2b10 	vmov	r2, r3, d0
 800558a:	4640      	mov	r0, r8
 800558c:	4649      	mov	r1, r9
 800558e:	f7fa ffd7 	bl	8000540 <__aeabi_dmul>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4620      	mov	r0, r4
 8005598:	4629      	mov	r1, r5
 800559a:	f7fa fe19 	bl	80001d0 <__aeabi_dsub>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fb fa65 	bl	8000a74 <__aeabi_d2iz>
 80055aa:	4603      	mov	r3, r0
 80055ac:	837b      	strh	r3, [r7, #26]
			UG_S16 y2 = cy - inner_r * sin(curr_angle * M_PI / 180);
 80055ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fa ff5a 	bl	800046c <__aeabi_i2d>
 80055b8:	4604      	mov	r4, r0
 80055ba:	460d      	mov	r5, r1
 80055bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fa ff53 	bl	800046c <__aeabi_i2d>
 80055c6:	4680      	mov	r8, r0
 80055c8:	4689      	mov	r9, r1
 80055ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055cc:	f7fa ff60 	bl	8000490 <__aeabi_f2d>
 80055d0:	a32d      	add	r3, pc, #180	@ (adr r3, 8005688 <UG_DrawDashboard+0x540>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa ffb3 	bl	8000540 <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005698 <UG_DrawDashboard+0x550>)
 80055e8:	f7fb f8d4 	bl	8000794 <__aeabi_ddiv>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	ec43 2b17 	vmov	d7, r2, r3
 80055f4:	eeb0 0a47 	vmov.f32	s0, s14
 80055f8:	eef0 0a67 	vmov.f32	s1, s15
 80055fc:	f000 fd80 	bl	8006100 <sin>
 8005600:	ec53 2b10 	vmov	r2, r3, d0
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fa ff9a 	bl	8000540 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa fddc 	bl	80001d0 <__aeabi_dsub>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	f7fb fa28 	bl	8000a74 <__aeabi_d2iz>
 8005624:	4603      	mov	r3, r0
 8005626:	833b      	strh	r3, [r7, #24]
			UG_DrawLine(x1, y1, x2, y2, c);
 8005628:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800562c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005630:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005634:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8005638:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4623      	mov	r3, r4
 8005640:	f7fe fdca 	bl	80041d8 <UG_DrawLine>
			curr_angle = curr_angle - 0.2;
 8005644:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005646:	f7fa ff23 	bl	8000490 <__aeabi_f2d>
 800564a:	a311      	add	r3, pc, #68	@ (adr r3, 8005690 <UG_DrawDashboard+0x548>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f7fa fdbe 	bl	80001d0 <__aeabi_dsub>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	f7fb fa32 	bl	8000ac4 <__aeabi_d2f>
 8005660:	4603      	mov	r3, r0
 8005662:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while (curr_angle > final_angle)
 8005664:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005668:	edd7 7a08 	vldr	s15, [r7, #32]
 800566c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005674:	f73f aee4 	bgt.w	8005440 <UG_DrawDashboard+0x2f8>
}
 8005678:	bf00      	nop
 800567a:	3730      	adds	r7, #48	@ 0x30
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005682:	bf00      	nop
 8005684:	f3af 8000 	nop.w
 8005688:	54442d18 	.word	0x54442d18
 800568c:	400921fb 	.word	0x400921fb
 8005690:	9999999a 	.word	0x9999999a
 8005694:	3fc99999 	.word	0x3fc99999
 8005698:	40668000 	.word	0x40668000

0800569c <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b08f      	sub	sp, #60	@ 0x3c
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 812c 	beq.w	8005906 <_UG_PutText+0x26a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 8127 	beq.w	8005906 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	89db      	ldrh	r3, [r3, #14]
 80056bc:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	895b      	ldrh	r3, [r3, #10]
 80056c2:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	3302      	adds	r3, #2
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80056ce:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80056d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80056dc:	429a      	cmp	r2, r3
 80056de:	f2c0 8114 	blt.w	800590a <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	891b      	ldrh	r3, [r3, #8]
 80056e6:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	899b      	ldrh	r3, [r3, #12]
 80056ec:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	7d1b      	ldrb	r3, [r3, #20]
 80056f2:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8adb      	ldrh	r3, [r3, #22]
 80056f8:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8b1b      	ldrh	r3, [r3, #24]
 80056fe:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff f8ea 	bl	80048e8 <_UG_FontSelect>

   rc=1;
 8005714:	2301      	movs	r3, #1
 8005716:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800571c:	4b80      	ldr	r3, [pc, #512]	@ (8005920 <_UG_PutText+0x284>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005724:	2b00      	cmp	r3, #0
 8005726:	d107      	bne.n	8005738 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8005728:	f107 0308 	add.w	r3, r7, #8
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe ff17 	bl	8004560 <_UG_DecodeUTF8>
 8005732:	4603      	mov	r3, r0
 8005734:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005736:	e004      	b.n	8005742 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	60ba      	str	r2, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8005742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8005748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800574a:	2b0a      	cmp	r3, #10
 800574c:	d1e6      	bne.n	800571c <_UG_PutText+0x80>
 800574e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005750:	3301      	adds	r3, #1
 8005752:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005754:	e7e2      	b.n	800571c <_UG_PutText+0x80>
     if(!chr) break;
 8005756:	bf00      	nop
   }

   yp = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 800575c:	7e7b      	ldrb	r3, [r7, #25]
 800575e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01f      	beq.n	80057a6 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8005766:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005768:	8c3b      	ldrh	r3, [r7, #32]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	3301      	adds	r3, #1
 8005770:	b29b      	uxth	r3, r3
 8005772:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 8005774:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800577a:	fb11 f303 	smulbb	r3, r1, r3
 800577e:	b29b      	uxth	r3, r3
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	b29b      	uxth	r3, r3
 8005784:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 8005786:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005788:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800578a:	3b01      	subs	r3, #1
 800578c:	b299      	uxth	r1, r3
 800578e:	8abb      	ldrh	r3, [r7, #20]
 8005790:	fb11 f303 	smulbb	r3, r1, r3
 8005794:	b29b      	uxth	r3, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	b29b      	uxth	r3, r3
 800579a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 800579c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f2c0 80b4 	blt.w	800590e <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80057a6:	7e7b      	ldrb	r3, [r7, #25]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <_UG_PutText+0x11c>
 80057b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80057b4:	105b      	asrs	r3, r3, #1
 80057b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 80057b8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80057ba:	8c3b      	ldrh	r3, [r7, #32]
 80057bc:	4413      	add	r3, r2
 80057be:	b29b      	uxth	r3, r3
 80057c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80057ce:	4b54      	ldr	r3, [pc, #336]	@ (8005920 <_UG_PutText+0x284>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d107      	bne.n	80057ea <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe febe 	bl	8004560 <_UG_DecodeUTF8>
 80057e4:	4603      	mov	r3, r0
 80057e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80057e8:	e004      	b.n	80057f4 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	60ba      	str	r2, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 80057f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01b      	beq.n	8005832 <_UG_PutText+0x196>
 80057fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057fc:	2b0a      	cmp	r3, #10
 80057fe:	d018      	beq.n	8005832 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8005800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe ff23 	bl	8004650 <_UG_GetCharData>
 800580a:	4603      	mov	r3, r0
 800580c:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 800580e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d00a      	beq.n	800582e <_UG_PutText+0x192>
         sl++;
 8005818:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800581a:	3301      	adds	r3, #1
 800581c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 800581e:	8a7a      	ldrh	r2, [r7, #18]
 8005820:	8afb      	ldrh	r3, [r7, #22]
 8005822:	4413      	add	r3, r2
 8005824:	b29a      	uxth	r2, r3
 8005826:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005828:	4413      	add	r3, r2
 800582a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800582c:	e7cf      	b.n	80057ce <_UG_PutText+0x132>
         if (w == -1){continue;}
 800582e:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005830:	e7cd      	b.n	80057ce <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8005832:	8afb      	ldrh	r3, [r7, #22]
 8005834:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 800583a:	8b7a      	ldrh	r2, [r7, #26]
 800583c:	8bbb      	ldrh	r3, [r7, #28]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	b29b      	uxth	r3, r3
 8005842:	3301      	adds	r3, #1
 8005844:	b29b      	uxth	r3, r3
 8005846:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 8005848:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800584a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	b29b      	uxth	r3, r3
 8005850:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 8005852:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	db5b      	blt.n	8005912 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800585a:	7e7b      	ldrb	r3, [r7, #25]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <_UG_PutText+0x1ce>
 8005864:	2300      	movs	r3, #0
 8005866:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005868:	e008      	b.n	800587c <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800586a:	7e7b      	ldrb	r3, [r7, #25]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <_UG_PutText+0x1e0>
 8005874:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005878:	105b      	asrs	r3, r3, #1
 800587a:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 800587c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800587e:	8bbb      	ldrh	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	b29b      	uxth	r3, r3
 8005884:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005886:	4b26      	ldr	r3, [pc, #152]	@ (8005920 <_UG_PutText+0x284>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800588e:	2b00      	cmp	r3, #0
 8005890:	d107      	bne.n	80058a2 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8005892:	f107 030c 	add.w	r3, r7, #12
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fe62 	bl	8004560 <_UG_DecodeUTF8>
 800589c:	4603      	mov	r3, r0
 800589e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80058a0:	e004      	b.n	80058ac <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	60fa      	str	r2, [r7, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 80058ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d031      	beq.n	8005916 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 80058b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058b4:	2b0a      	cmp	r3, #10
 80058b6:	d01c      	beq.n	80058f2 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8a1c      	ldrh	r4, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8a5b      	ldrh	r3, [r3, #18]
 80058c0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80058c4:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 80058c8:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	4623      	mov	r3, r4
 80058ce:	f7ff f88d 	bl	80049ec <_UG_PutChar>
 80058d2:	4603      	mov	r3, r0
 80058d4:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 80058d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d0d2      	beq.n	8005886 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 80058e0:	8a7a      	ldrh	r2, [r7, #18]
 80058e2:	8afb      	ldrh	r3, [r7, #22]
 80058e4:	4413      	add	r3, r2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058ea:	4413      	add	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80058f0:	e7c9      	b.n	8005886 <_UG_PutText+0x1ea>
           break;
 80058f2:	bf00      	nop
      }
      yp += char_height + char_v_space;
 80058f4:	8bfa      	ldrh	r2, [r7, #30]
 80058f6:	8abb      	ldrh	r3, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058fe:	4413      	add	r3, r2
 8005900:	b29b      	uxth	r3, r3
 8005902:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 8005904:	e75d      	b.n	80057c2 <_UG_PutText+0x126>
     return;
 8005906:	bf00      	nop
 8005908:	e006      	b.n	8005918 <_UG_PutText+0x27c>
     return;
 800590a:	bf00      	nop
 800590c:	e004      	b.n	8005918 <_UG_PutText+0x27c>
        return;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <_UG_PutText+0x27c>
           return;
 8005916:	bf00      	nop
   }
}
 8005918:	3734      	adds	r7, #52	@ 0x34
 800591a:	46bd      	mov	sp, r7
 800591c:	bd90      	pop	{r4, r7, pc}
 800591e:	bf00      	nop
 8005920:	200001a4 	.word	0x200001a4

08005924 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af02      	add	r7, sp, #8
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	461a      	mov	r2, r3
 8005932:	4623      	mov	r3, r4
 8005934:	80fb      	strh	r3, [r7, #6]
 8005936:	4603      	mov	r3, r0
 8005938:	80bb      	strh	r3, [r7, #4]
 800593a:	460b      	mov	r3, r1
 800593c:	807b      	strh	r3, [r7, #2]
 800593e:	4613      	mov	r3, r2
 8005940:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8005942:	887b      	ldrh	r3, [r7, #2]
 8005944:	3b01      	subs	r3, #1
 8005946:	b29b      	uxth	r3, r3
 8005948:	b21c      	sxth	r4, r3
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1c9a      	adds	r2, r3, #2
 800594e:	61ba      	str	r2, [r7, #24]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005956:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800595a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	4622      	mov	r2, r4
 8005964:	f7fe fc38 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8005968:	88bb      	ldrh	r3, [r7, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	b219      	sxth	r1, r3
 8005970:	883b      	ldrh	r3, [r7, #0]
 8005972:	3b01      	subs	r3, #1
 8005974:	b29b      	uxth	r3, r3
 8005976:	b21c      	sxth	r4, r3
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	61ba      	str	r2, [r7, #24]
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005984:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	4623      	mov	r3, r4
 800598c:	f7fe fc24 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	1c9a      	adds	r2, r3, #2
 8005994:	61ba      	str	r2, [r7, #24]
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	f9b7 4000 	ldrsh.w	r4, [r7]
 800599c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80059a0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80059a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	4623      	mov	r3, r4
 80059ac:	f7fe fc14 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80059b0:	883b      	ldrh	r3, [r7, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b21c      	sxth	r4, r3
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1c9a      	adds	r2, r3, #2
 80059bc:	61ba      	str	r2, [r7, #24]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80059c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80059c8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4623      	mov	r3, r4
 80059d0:	f7fe fc02 	bl	80041d8 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	3301      	adds	r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b218      	sxth	r0, r3
 80059dc:	88bb      	ldrh	r3, [r7, #4]
 80059de:	3301      	adds	r3, #1
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b219      	sxth	r1, r3
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	3b02      	subs	r3, #2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	b21c      	sxth	r4, r3
 80059ec:	88bb      	ldrh	r3, [r7, #4]
 80059ee:	3301      	adds	r3, #1
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	b21d      	sxth	r5, r3
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1c9a      	adds	r2, r3, #2
 80059f8:	61ba      	str	r2, [r7, #24]
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	462b      	mov	r3, r5
 8005a00:	4622      	mov	r2, r4
 8005a02:	f7fe fbe9 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	b218      	sxth	r0, r3
 8005a0e:	88bb      	ldrh	r3, [r7, #4]
 8005a10:	3302      	adds	r3, #2
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	b219      	sxth	r1, r3
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	b21c      	sxth	r4, r3
 8005a1e:	883b      	ldrh	r3, [r7, #0]
 8005a20:	3b02      	subs	r3, #2
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	b21d      	sxth	r5, r3
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	1c9a      	adds	r2, r3, #2
 8005a2a:	61ba      	str	r2, [r7, #24]
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462b      	mov	r3, r5
 8005a32:	4622      	mov	r2, r4
 8005a34:	f7fe fbd0 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b218      	sxth	r0, r3
 8005a40:	883b      	ldrh	r3, [r7, #0]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	b219      	sxth	r1, r3
 8005a48:	887b      	ldrh	r3, [r7, #2]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	b21c      	sxth	r4, r3
 8005a50:	883b      	ldrh	r3, [r7, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	b21d      	sxth	r5, r3
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	1c9a      	adds	r2, r3, #2
 8005a5c:	61ba      	str	r2, [r7, #24]
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462b      	mov	r3, r5
 8005a64:	4622      	mov	r2, r4
 8005a66:	f7fe fbb7 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	b218      	sxth	r0, r3
 8005a72:	88bb      	ldrh	r3, [r7, #4]
 8005a74:	3301      	adds	r3, #1
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b219      	sxth	r1, r3
 8005a7a:	887b      	ldrh	r3, [r7, #2]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	b21c      	sxth	r4, r3
 8005a82:	883b      	ldrh	r3, [r7, #0]
 8005a84:	3b02      	subs	r3, #2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	b21d      	sxth	r5, r3
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	1c9a      	adds	r2, r3, #2
 8005a8e:	61ba      	str	r2, [r7, #24]
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	462b      	mov	r3, r5
 8005a96:	4622      	mov	r2, r4
 8005a98:	f7fe fb9e 	bl	80041d8 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	b218      	sxth	r0, r3
 8005aa4:	88bb      	ldrh	r3, [r7, #4]
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	b219      	sxth	r1, r3
 8005aac:	887b      	ldrh	r3, [r7, #2]
 8005aae:	3b03      	subs	r3, #3
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	b21c      	sxth	r4, r3
 8005ab4:	88bb      	ldrh	r3, [r7, #4]
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	b21d      	sxth	r5, r3
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	61ba      	str	r2, [r7, #24]
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	4622      	mov	r2, r4
 8005aca:	f7fe fb85 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	b218      	sxth	r0, r3
 8005ad6:	88bb      	ldrh	r3, [r7, #4]
 8005ad8:	3303      	adds	r3, #3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b219      	sxth	r1, r3
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	b21c      	sxth	r4, r3
 8005ae6:	883b      	ldrh	r3, [r7, #0]
 8005ae8:	3b03      	subs	r3, #3
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	b21d      	sxth	r5, r3
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	1c9a      	adds	r2, r3, #2
 8005af2:	61ba      	str	r2, [r7, #24]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	462b      	mov	r3, r5
 8005afa:	4622      	mov	r2, r4
 8005afc:	f7fe fb6c 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	3302      	adds	r3, #2
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b218      	sxth	r0, r3
 8005b08:	883b      	ldrh	r3, [r7, #0]
 8005b0a:	3b02      	subs	r3, #2
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b219      	sxth	r1, r3
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	3b02      	subs	r3, #2
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	b21c      	sxth	r4, r3
 8005b18:	883b      	ldrh	r3, [r7, #0]
 8005b1a:	3b02      	subs	r3, #2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b21d      	sxth	r5, r3
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	1c9a      	adds	r2, r3, #2
 8005b24:	61ba      	str	r2, [r7, #24]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	f7fe fb53 	bl	80041d8 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	3b02      	subs	r3, #2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	b218      	sxth	r0, r3
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	b219      	sxth	r1, r3
 8005b42:	887b      	ldrh	r3, [r7, #2]
 8005b44:	3b02      	subs	r3, #2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b21a      	sxth	r2, r3
 8005b4a:	883b      	ldrh	r3, [r7, #0]
 8005b4c:	3b03      	subs	r3, #3
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	b21c      	sxth	r4, r3
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	4623      	mov	r3, r4
 8005b5a:	f7fe fb3d 	bl	80041d8 <UG_DrawLine>
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b68 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d810      	bhi.n	8005b9c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba8 <UG_DriverRegister+0x40>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	330a      	adds	r3, #10
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8005b8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <UG_DriverRegister+0x40>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	330a      	adds	r3, #10
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	2203      	movs	r2, #3
 8005b98:	721a      	strb	r2, [r3, #8]
 8005b9a:	e000      	b.n	8005b9e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8005b9c:	bf00      	nop
}
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	200001a4 	.word	0x200001a4

08005bac <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8005bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8005d2c <UG_Update+0x180>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UG_Update+0x2c>
 8005bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8005d2c <UG_Update+0x180>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 8005bca:	4b58      	ldr	r3, [pc, #352]	@ (8005d2c <UG_Update+0x180>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8005bd8:	4b54      	ldr	r3, [pc, #336]	@ (8005d2c <UG_Update+0x180>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	4b53      	ldr	r3, [pc, #332]	@ (8005d2c <UG_Update+0x180>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d071      	beq.n	8005ccc <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8005be8:	4b50      	ldr	r3, [pc, #320]	@ (8005d2c <UG_Update+0x180>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d06c      	beq.n	8005ccc <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8005bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8005d2c <UG_Update+0x180>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8005d2c <UG_Update+0x180>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6912      	ldr	r2, [r2, #16]
 8005bfc:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8005bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8005d2c <UG_Update+0x180>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b4a      	ldr	r3, [pc, #296]	@ (8005d2c <UG_Update+0x180>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68d2      	ldr	r2, [r2, #12]
 8005c08:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8005c0a:	4b48      	ldr	r3, [pc, #288]	@ (8005d2c <UG_Update+0x180>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d045      	beq.n	8005ca0 <UG_Update+0xf4>
 8005c14:	4b45      	ldr	r3, [pc, #276]	@ (8005d2c <UG_Update+0x180>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	7d9b      	ldrb	r3, [r3, #22]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d03d      	beq.n	8005ca0 <UG_Update+0xf4>
 8005c24:	4b41      	ldr	r3, [pc, #260]	@ (8005d2c <UG_Update+0x180>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	7a1b      	ldrb	r3, [r3, #8]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d035      	beq.n	8005ca0 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8005c34:	4b3d      	ldr	r3, [pc, #244]	@ (8005d2c <UG_Update+0x180>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8005c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d2c <UG_Update+0x180>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d123      	bne.n	8005c94 <UG_Update+0xe8>
 8005c4c:	4b37      	ldr	r3, [pc, #220]	@ (8005d2c <UG_Update+0x180>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005c56:	4b35      	ldr	r3, [pc, #212]	@ (8005d2c <UG_Update+0x180>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d117      	bne.n	8005c94 <UG_Update+0xe8>
 8005c64:	4b31      	ldr	r3, [pc, #196]	@ (8005d2c <UG_Update+0x180>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8005c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d2c <UG_Update+0x180>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d10b      	bne.n	8005c94 <UG_Update+0xe8>
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d2c <UG_Update+0x180>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8005c86:	4b29      	ldr	r3, [pc, #164]	@ (8005d2c <UG_Update+0x180>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d005      	beq.n	8005ca0 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8005c94:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <UG_Update+0x180>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f848 	bl	8005d30 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8005ca0:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <UG_Update+0x180>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	7a1a      	ldrb	r2, [r3, #8]
 8005ca8:	4b20      	ldr	r3, [pc, #128]	@ (8005d2c <UG_Update+0x180>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d2c <UG_Update+0x180>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	7a1a      	ldrb	r2, [r3, #8]
 8005cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005d2c <UG_Update+0x180>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8005ccc:	4b17      	ldr	r3, [pc, #92]	@ (8005d2c <UG_Update+0x180>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01b      	beq.n	8005d0e <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8005cd6:	4b15      	ldr	r3, [pc, #84]	@ (8005d2c <UG_Update+0x180>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	7a1b      	ldrb	r3, [r3, #8]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8c8 	bl	8005e80 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7a1b      	ldrb	r3, [r3, #8]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff f8d7 	bl	8004eb0 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff f98a 	bl	800501c <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff f9d1 	bl	80050b0 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8005d0e:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <UG_Update+0x180>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <UG_Update+0x178>
     gui->device->flush();
 8005d1a:	4b04      	ldr	r3, [pc, #16]	@ (8005d2c <UG_Update+0x180>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4798      	blx	r3
   }
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200001a4 	.word	0x200001a4

08005d30 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b08f      	sub	sp, #60	@ 0x3c
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8098 	beq.w	8005e70 <_UG_WindowDrawTitle+0x140>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7a1b      	ldrb	r3, [r3, #8]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8091 	beq.w	8005e70 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	89db      	ldrh	r3, [r3, #14]
 8005d52:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8a1b      	ldrh	r3, [r3, #16]
 8005d58:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8a5b      	ldrh	r3, [r3, #18]
 8005d5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8a9b      	ldrh	r3, [r3, #20]
 8005d64:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	7d9b      	ldrb	r3, [r3, #22]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00f      	beq.n	8005d92 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8005d72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005d74:	3303      	adds	r3, #3
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 8005d7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005d7c:	3303      	adds	r3, #3
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 8005d82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d84:	3b03      	subs	r3, #3
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 8005d8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d8c:	3b03      	subs	r3, #3
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8005d92:	4b3a      	ldr	r3, [pc, #232]	@ (8005e7c <_UG_WindowDrawTitle+0x14c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d106      	bne.n	8005dac <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005da2:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005da8:	83bb      	strh	r3, [r7, #28]
 8005daa:	e005      	b.n	8005db8 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db0:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db6:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005dc2:	4413      	add	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	b21c      	sxth	r4, r3
 8005dcc:	8bfb      	ldrh	r3, [r7, #30]
 8005dce:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8005dd2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005dd6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	4623      	mov	r3, r4
 8005dde:	f7fe f989 	bl	80040f4 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8005dee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005df0:	3303      	adds	r3, #3
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	b21b      	sxth	r3, r3
 8005df6:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8005df8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005dfa:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8005dfc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dfe:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e06:	461a      	mov	r2, r3
 8005e08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005e0a:	4413      	add	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005e1c:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8005e26:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8005e2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 8005e30:	f107 030c 	add.w	r3, r7, #12
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fc31 	bl	800569c <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e40:	461a      	mov	r2, r3
 8005e42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005e44:	4413      	add	r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	b219      	sxth	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e50:	461a      	mov	r2, r3
 8005e52:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005e54:	4413      	add	r3, r2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	f649 5413 	movw	r4, #40211	@ 0x9d13
 8005e5e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8005e62:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005e66:	9400      	str	r4, [sp, #0]
 8005e68:	f7fe f9b6 	bl	80041d8 <UG_DrawLine>
      return UG_RESULT_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e001      	b.n	8005e74 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 8005e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3734      	adds	r7, #52	@ 0x34
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd90      	pop	{r4, r7, pc}
 8005e7c:	200001a4 	.word	0x200001a4

08005e80 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b089      	sub	sp, #36	@ 0x24
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	89db      	ldrh	r3, [r3, #14]
 8005e8c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8a1b      	ldrh	r3, [r3, #16]
 8005e92:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8a5b      	ldrh	r3, [r3, #18]
 8005e98:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8a9b      	ldrh	r3, [r3, #20]
 8005e9e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	7a1b      	ldrb	r3, [r3, #8]
 8005ea4:	f023 0320 	bic.w	r3, r3, #32
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	7a1b      	ldrb	r3, [r3, #8]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8084 	beq.w	8005fc4 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	7d9b      	ldrb	r3, [r3, #22]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d021      	beq.n	8005f0c <_UG_WindowUpdate+0x8c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	7a1b      	ldrb	r3, [r3, #8]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11b      	bne.n	8005f0c <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8005ed4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ed8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005edc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8005ee0:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005ee4:	4c43      	ldr	r4, [pc, #268]	@ (8005ff4 <_UG_WindowUpdate+0x174>)
 8005ee6:	9400      	str	r4, [sp, #0]
 8005ee8:	f7ff fd1c 	bl	8005924 <_UG_DrawObjectFrame>
         xs+=3;
 8005eec:	8abb      	ldrh	r3, [r7, #20]
 8005eee:	3303      	adds	r3, #3
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8005ef4:	8a7b      	ldrh	r3, [r7, #18]
 8005ef6:	3303      	adds	r3, #3
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8005efc:	8a3b      	ldrh	r3, [r7, #16]
 8005efe:	3b03      	subs	r3, #3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8005f04:	89fb      	ldrh	r3, [r7, #14]
 8005f06:	3b03      	subs	r3, #3
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	7d9b      	ldrb	r3, [r3, #22]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01a      	beq.n	8005f4e <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff09 	bl	8005d30 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f24:	461a      	mov	r2, r3
 8005f26:	8a7b      	ldrh	r3, [r7, #18]
 8005f28:	4413      	add	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	7a1b      	ldrb	r3, [r3, #8]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	7a1b      	ldrb	r3, [r3, #8]
 8005f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	721a      	strb	r2, [r3, #8]
            return;
 8005f4c:	e04e      	b.n	8005fec <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	899b      	ldrh	r3, [r3, #12]
 8005f52:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005f56:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005f5a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8005f5e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	4623      	mov	r3, r4
 8005f66:	f7fe f8c5 	bl	80040f4 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	82fb      	strh	r3, [r7, #22]
 8005f74:	e021      	b.n	8005fba <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	8afb      	ldrh	r3, [r7, #22]
 8005f7c:	015b      	lsls	r3, r3, #5
 8005f7e:	4413      	add	r3, r2
 8005f80:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d112      	bne.n	8005fb4 <_UG_WindowUpdate+0x134>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <_UG_WindowUpdate+0x134>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d006      	beq.n	8005fb4 <_UG_WindowUpdate+0x134>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8005fb4:	8afb      	ldrh	r3, [r7, #22]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	82fb      	strh	r3, [r7, #22]
 8005fba:	8afa      	ldrh	r2, [r7, #22]
 8005fbc:	89bb      	ldrh	r3, [r7, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3d9      	bcc.n	8005f76 <_UG_WindowUpdate+0xf6>
 8005fc2:	e013      	b.n	8005fec <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8005fdc:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <_UG_WindowUpdate+0x178>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4623      	mov	r3, r4
 8005fe8:	f7fe f884 	bl	80040f4 <UG_FillFrame>
   }
}
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd90      	pop	{r4, r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08014624 	.word	0x08014624
 8005ff8:	200001a4 	.word	0x200001a4

08005ffc <memset>:
 8005ffc:	4402      	add	r2, r0
 8005ffe:	4603      	mov	r3, r0
 8006000:	4293      	cmp	r3, r2
 8006002:	d100      	bne.n	8006006 <memset+0xa>
 8006004:	4770      	bx	lr
 8006006:	f803 1b01 	strb.w	r1, [r3], #1
 800600a:	e7f9      	b.n	8006000 <memset+0x4>

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	@ (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	@ (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	@ (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	@ (8006050 <__libc_init_array+0x44>)
 8006020:	f001 f89e 	bl	8007160 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08014818 	.word	0x08014818
 8006048:	08014818 	.word	0x08014818
 800604c:	08014818 	.word	0x08014818
 8006050:	0801481c 	.word	0x0801481c
 8006054:	00000000 	.word	0x00000000

08006058 <cos>:
 8006058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800605a:	ec53 2b10 	vmov	r2, r3, d0
 800605e:	4826      	ldr	r0, [pc, #152]	@ (80060f8 <cos+0xa0>)
 8006060:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006064:	4281      	cmp	r1, r0
 8006066:	d806      	bhi.n	8006076 <cos+0x1e>
 8006068:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80060f0 <cos+0x98>
 800606c:	b005      	add	sp, #20
 800606e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006072:	f000 b899 	b.w	80061a8 <__kernel_cos>
 8006076:	4821      	ldr	r0, [pc, #132]	@ (80060fc <cos+0xa4>)
 8006078:	4281      	cmp	r1, r0
 800607a:	d908      	bls.n	800608e <cos+0x36>
 800607c:	4610      	mov	r0, r2
 800607e:	4619      	mov	r1, r3
 8006080:	f7fa f8a6 	bl	80001d0 <__aeabi_dsub>
 8006084:	ec41 0b10 	vmov	d0, r0, r1
 8006088:	b005      	add	sp, #20
 800608a:	f85d fb04 	ldr.w	pc, [sp], #4
 800608e:	4668      	mov	r0, sp
 8006090:	f000 fa0e 	bl	80064b0 <__ieee754_rem_pio2>
 8006094:	f000 0003 	and.w	r0, r0, #3
 8006098:	2801      	cmp	r0, #1
 800609a:	d00b      	beq.n	80060b4 <cos+0x5c>
 800609c:	2802      	cmp	r0, #2
 800609e:	d015      	beq.n	80060cc <cos+0x74>
 80060a0:	b9d8      	cbnz	r0, 80060da <cos+0x82>
 80060a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060a6:	ed9d 0b00 	vldr	d0, [sp]
 80060aa:	f000 f87d 	bl	80061a8 <__kernel_cos>
 80060ae:	ec51 0b10 	vmov	r0, r1, d0
 80060b2:	e7e7      	b.n	8006084 <cos+0x2c>
 80060b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060b8:	ed9d 0b00 	vldr	d0, [sp]
 80060bc:	f000 f93c 	bl	8006338 <__kernel_sin>
 80060c0:	ec53 2b10 	vmov	r2, r3, d0
 80060c4:	4610      	mov	r0, r2
 80060c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80060ca:	e7db      	b.n	8006084 <cos+0x2c>
 80060cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060d0:	ed9d 0b00 	vldr	d0, [sp]
 80060d4:	f000 f868 	bl	80061a8 <__kernel_cos>
 80060d8:	e7f2      	b.n	80060c0 <cos+0x68>
 80060da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060de:	ed9d 0b00 	vldr	d0, [sp]
 80060e2:	2001      	movs	r0, #1
 80060e4:	f000 f928 	bl	8006338 <__kernel_sin>
 80060e8:	e7e1      	b.n	80060ae <cos+0x56>
 80060ea:	bf00      	nop
 80060ec:	f3af 8000 	nop.w
	...
 80060f8:	3fe921fb 	.word	0x3fe921fb
 80060fc:	7fefffff 	.word	0x7fefffff

08006100 <sin>:
 8006100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006102:	ec53 2b10 	vmov	r2, r3, d0
 8006106:	4826      	ldr	r0, [pc, #152]	@ (80061a0 <sin+0xa0>)
 8006108:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800610c:	4281      	cmp	r1, r0
 800610e:	d807      	bhi.n	8006120 <sin+0x20>
 8006110:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006198 <sin+0x98>
 8006114:	2000      	movs	r0, #0
 8006116:	b005      	add	sp, #20
 8006118:	f85d eb04 	ldr.w	lr, [sp], #4
 800611c:	f000 b90c 	b.w	8006338 <__kernel_sin>
 8006120:	4820      	ldr	r0, [pc, #128]	@ (80061a4 <sin+0xa4>)
 8006122:	4281      	cmp	r1, r0
 8006124:	d908      	bls.n	8006138 <sin+0x38>
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	f7fa f851 	bl	80001d0 <__aeabi_dsub>
 800612e:	ec41 0b10 	vmov	d0, r0, r1
 8006132:	b005      	add	sp, #20
 8006134:	f85d fb04 	ldr.w	pc, [sp], #4
 8006138:	4668      	mov	r0, sp
 800613a:	f000 f9b9 	bl	80064b0 <__ieee754_rem_pio2>
 800613e:	f000 0003 	and.w	r0, r0, #3
 8006142:	2801      	cmp	r0, #1
 8006144:	d00c      	beq.n	8006160 <sin+0x60>
 8006146:	2802      	cmp	r0, #2
 8006148:	d011      	beq.n	800616e <sin+0x6e>
 800614a:	b9e8      	cbnz	r0, 8006188 <sin+0x88>
 800614c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006150:	ed9d 0b00 	vldr	d0, [sp]
 8006154:	2001      	movs	r0, #1
 8006156:	f000 f8ef 	bl	8006338 <__kernel_sin>
 800615a:	ec51 0b10 	vmov	r0, r1, d0
 800615e:	e7e6      	b.n	800612e <sin+0x2e>
 8006160:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006164:	ed9d 0b00 	vldr	d0, [sp]
 8006168:	f000 f81e 	bl	80061a8 <__kernel_cos>
 800616c:	e7f5      	b.n	800615a <sin+0x5a>
 800616e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006172:	ed9d 0b00 	vldr	d0, [sp]
 8006176:	2001      	movs	r0, #1
 8006178:	f000 f8de 	bl	8006338 <__kernel_sin>
 800617c:	ec53 2b10 	vmov	r2, r3, d0
 8006180:	4610      	mov	r0, r2
 8006182:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006186:	e7d2      	b.n	800612e <sin+0x2e>
 8006188:	ed9d 1b02 	vldr	d1, [sp, #8]
 800618c:	ed9d 0b00 	vldr	d0, [sp]
 8006190:	f000 f80a 	bl	80061a8 <__kernel_cos>
 8006194:	e7f2      	b.n	800617c <sin+0x7c>
 8006196:	bf00      	nop
	...
 80061a0:	3fe921fb 	.word	0x3fe921fb
 80061a4:	7fefffff 	.word	0x7fefffff

080061a8 <__kernel_cos>:
 80061a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	ec57 6b10 	vmov	r6, r7, d0
 80061b0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80061b4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80061b8:	ed8d 1b00 	vstr	d1, [sp]
 80061bc:	d206      	bcs.n	80061cc <__kernel_cos+0x24>
 80061be:	4630      	mov	r0, r6
 80061c0:	4639      	mov	r1, r7
 80061c2:	f7fa fc57 	bl	8000a74 <__aeabi_d2iz>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f000 8088 	beq.w	80062dc <__kernel_cos+0x134>
 80061cc:	4632      	mov	r2, r6
 80061ce:	463b      	mov	r3, r7
 80061d0:	4630      	mov	r0, r6
 80061d2:	4639      	mov	r1, r7
 80061d4:	f7fa f9b4 	bl	8000540 <__aeabi_dmul>
 80061d8:	4b51      	ldr	r3, [pc, #324]	@ (8006320 <__kernel_cos+0x178>)
 80061da:	2200      	movs	r2, #0
 80061dc:	4604      	mov	r4, r0
 80061de:	460d      	mov	r5, r1
 80061e0:	f7fa f9ae 	bl	8000540 <__aeabi_dmul>
 80061e4:	a340      	add	r3, pc, #256	@ (adr r3, 80062e8 <__kernel_cos+0x140>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	4682      	mov	sl, r0
 80061ec:	468b      	mov	fp, r1
 80061ee:	4620      	mov	r0, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	f7fa f9a5 	bl	8000540 <__aeabi_dmul>
 80061f6:	a33e      	add	r3, pc, #248	@ (adr r3, 80062f0 <__kernel_cos+0x148>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7f9 ffea 	bl	80001d4 <__adddf3>
 8006200:	4622      	mov	r2, r4
 8006202:	462b      	mov	r3, r5
 8006204:	f7fa f99c 	bl	8000540 <__aeabi_dmul>
 8006208:	a33b      	add	r3, pc, #236	@ (adr r3, 80062f8 <__kernel_cos+0x150>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7f9 ffdf 	bl	80001d0 <__aeabi_dsub>
 8006212:	4622      	mov	r2, r4
 8006214:	462b      	mov	r3, r5
 8006216:	f7fa f993 	bl	8000540 <__aeabi_dmul>
 800621a:	a339      	add	r3, pc, #228	@ (adr r3, 8006300 <__kernel_cos+0x158>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7f9 ffd8 	bl	80001d4 <__adddf3>
 8006224:	4622      	mov	r2, r4
 8006226:	462b      	mov	r3, r5
 8006228:	f7fa f98a 	bl	8000540 <__aeabi_dmul>
 800622c:	a336      	add	r3, pc, #216	@ (adr r3, 8006308 <__kernel_cos+0x160>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7f9 ffcd 	bl	80001d0 <__aeabi_dsub>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f7fa f981 	bl	8000540 <__aeabi_dmul>
 800623e:	a334      	add	r3, pc, #208	@ (adr r3, 8006310 <__kernel_cos+0x168>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7f9 ffc6 	bl	80001d4 <__adddf3>
 8006248:	4622      	mov	r2, r4
 800624a:	462b      	mov	r3, r5
 800624c:	f7fa f978 	bl	8000540 <__aeabi_dmul>
 8006250:	4622      	mov	r2, r4
 8006252:	462b      	mov	r3, r5
 8006254:	f7fa f974 	bl	8000540 <__aeabi_dmul>
 8006258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800625c:	4604      	mov	r4, r0
 800625e:	460d      	mov	r5, r1
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7fa f96c 	bl	8000540 <__aeabi_dmul>
 8006268:	460b      	mov	r3, r1
 800626a:	4602      	mov	r2, r0
 800626c:	4629      	mov	r1, r5
 800626e:	4620      	mov	r0, r4
 8006270:	f7f9 ffae 	bl	80001d0 <__aeabi_dsub>
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <__kernel_cos+0x17c>)
 8006276:	4598      	cmp	r8, r3
 8006278:	4606      	mov	r6, r0
 800627a:	460f      	mov	r7, r1
 800627c:	d810      	bhi.n	80062a0 <__kernel_cos+0xf8>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4650      	mov	r0, sl
 8006284:	4659      	mov	r1, fp
 8006286:	f7f9 ffa3 	bl	80001d0 <__aeabi_dsub>
 800628a:	460b      	mov	r3, r1
 800628c:	4926      	ldr	r1, [pc, #152]	@ (8006328 <__kernel_cos+0x180>)
 800628e:	4602      	mov	r2, r0
 8006290:	2000      	movs	r0, #0
 8006292:	f7f9 ff9d 	bl	80001d0 <__aeabi_dsub>
 8006296:	ec41 0b10 	vmov	d0, r0, r1
 800629a:	b003      	add	sp, #12
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a0:	4b22      	ldr	r3, [pc, #136]	@ (800632c <__kernel_cos+0x184>)
 80062a2:	4921      	ldr	r1, [pc, #132]	@ (8006328 <__kernel_cos+0x180>)
 80062a4:	4598      	cmp	r8, r3
 80062a6:	bf8c      	ite	hi
 80062a8:	4d21      	ldrhi	r5, [pc, #132]	@ (8006330 <__kernel_cos+0x188>)
 80062aa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80062ae:	2400      	movs	r4, #0
 80062b0:	4622      	mov	r2, r4
 80062b2:	462b      	mov	r3, r5
 80062b4:	2000      	movs	r0, #0
 80062b6:	f7f9 ff8b 	bl	80001d0 <__aeabi_dsub>
 80062ba:	4622      	mov	r2, r4
 80062bc:	4680      	mov	r8, r0
 80062be:	4689      	mov	r9, r1
 80062c0:	462b      	mov	r3, r5
 80062c2:	4650      	mov	r0, sl
 80062c4:	4659      	mov	r1, fp
 80062c6:	f7f9 ff83 	bl	80001d0 <__aeabi_dsub>
 80062ca:	4632      	mov	r2, r6
 80062cc:	463b      	mov	r3, r7
 80062ce:	f7f9 ff7f 	bl	80001d0 <__aeabi_dsub>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	e7da      	b.n	8006292 <__kernel_cos+0xea>
 80062dc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006318 <__kernel_cos+0x170>
 80062e0:	e7db      	b.n	800629a <__kernel_cos+0xf2>
 80062e2:	bf00      	nop
 80062e4:	f3af 8000 	nop.w
 80062e8:	be8838d4 	.word	0xbe8838d4
 80062ec:	bda8fae9 	.word	0xbda8fae9
 80062f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80062f4:	3e21ee9e 	.word	0x3e21ee9e
 80062f8:	809c52ad 	.word	0x809c52ad
 80062fc:	3e927e4f 	.word	0x3e927e4f
 8006300:	19cb1590 	.word	0x19cb1590
 8006304:	3efa01a0 	.word	0x3efa01a0
 8006308:	16c15177 	.word	0x16c15177
 800630c:	3f56c16c 	.word	0x3f56c16c
 8006310:	5555554c 	.word	0x5555554c
 8006314:	3fa55555 	.word	0x3fa55555
 8006318:	00000000 	.word	0x00000000
 800631c:	3ff00000 	.word	0x3ff00000
 8006320:	3fe00000 	.word	0x3fe00000
 8006324:	3fd33332 	.word	0x3fd33332
 8006328:	3ff00000 	.word	0x3ff00000
 800632c:	3fe90000 	.word	0x3fe90000
 8006330:	3fd20000 	.word	0x3fd20000
 8006334:	00000000 	.word	0x00000000

08006338 <__kernel_sin>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	ec55 4b10 	vmov	r4, r5, d0
 8006340:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006344:	b085      	sub	sp, #20
 8006346:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800634a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800634e:	4680      	mov	r8, r0
 8006350:	d205      	bcs.n	800635e <__kernel_sin+0x26>
 8006352:	4620      	mov	r0, r4
 8006354:	4629      	mov	r1, r5
 8006356:	f7fa fb8d 	bl	8000a74 <__aeabi_d2iz>
 800635a:	2800      	cmp	r0, #0
 800635c:	d052      	beq.n	8006404 <__kernel_sin+0xcc>
 800635e:	4622      	mov	r2, r4
 8006360:	462b      	mov	r3, r5
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7fa f8eb 	bl	8000540 <__aeabi_dmul>
 800636a:	4682      	mov	sl, r0
 800636c:	468b      	mov	fp, r1
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4620      	mov	r0, r4
 8006374:	4629      	mov	r1, r5
 8006376:	f7fa f8e3 	bl	8000540 <__aeabi_dmul>
 800637a:	a342      	add	r3, pc, #264	@ (adr r3, 8006484 <__kernel_sin+0x14c>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	e9cd 0100 	strd	r0, r1, [sp]
 8006384:	4650      	mov	r0, sl
 8006386:	4659      	mov	r1, fp
 8006388:	f7fa f8da 	bl	8000540 <__aeabi_dmul>
 800638c:	a33f      	add	r3, pc, #252	@ (adr r3, 800648c <__kernel_sin+0x154>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 ff1d 	bl	80001d0 <__aeabi_dsub>
 8006396:	4652      	mov	r2, sl
 8006398:	465b      	mov	r3, fp
 800639a:	f7fa f8d1 	bl	8000540 <__aeabi_dmul>
 800639e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006494 <__kernel_sin+0x15c>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f7f9 ff16 	bl	80001d4 <__adddf3>
 80063a8:	4652      	mov	r2, sl
 80063aa:	465b      	mov	r3, fp
 80063ac:	f7fa f8c8 	bl	8000540 <__aeabi_dmul>
 80063b0:	a33a      	add	r3, pc, #232	@ (adr r3, 800649c <__kernel_sin+0x164>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f7f9 ff0b 	bl	80001d0 <__aeabi_dsub>
 80063ba:	4652      	mov	r2, sl
 80063bc:	465b      	mov	r3, fp
 80063be:	f7fa f8bf 	bl	8000540 <__aeabi_dmul>
 80063c2:	a338      	add	r3, pc, #224	@ (adr r3, 80064a4 <__kernel_sin+0x16c>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f7f9 ff04 	bl	80001d4 <__adddf3>
 80063cc:	4606      	mov	r6, r0
 80063ce:	460f      	mov	r7, r1
 80063d0:	f1b8 0f00 	cmp.w	r8, #0
 80063d4:	d11b      	bne.n	800640e <__kernel_sin+0xd6>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4650      	mov	r0, sl
 80063dc:	4659      	mov	r1, fp
 80063de:	f7fa f8af 	bl	8000540 <__aeabi_dmul>
 80063e2:	a325      	add	r3, pc, #148	@ (adr r3, 8006478 <__kernel_sin+0x140>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7f9 fef2 	bl	80001d0 <__aeabi_dsub>
 80063ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063f0:	f7fa f8a6 	bl	8000540 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4620      	mov	r0, r4
 80063fa:	4629      	mov	r1, r5
 80063fc:	f7f9 feea 	bl	80001d4 <__adddf3>
 8006400:	4604      	mov	r4, r0
 8006402:	460d      	mov	r5, r1
 8006404:	ec45 4b10 	vmov	d0, r4, r5
 8006408:	b005      	add	sp, #20
 800640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006412:	4b1b      	ldr	r3, [pc, #108]	@ (8006480 <__kernel_sin+0x148>)
 8006414:	2200      	movs	r2, #0
 8006416:	f7fa f893 	bl	8000540 <__aeabi_dmul>
 800641a:	4632      	mov	r2, r6
 800641c:	4680      	mov	r8, r0
 800641e:	4689      	mov	r9, r1
 8006420:	463b      	mov	r3, r7
 8006422:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006426:	f7fa f88b 	bl	8000540 <__aeabi_dmul>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4640      	mov	r0, r8
 8006430:	4649      	mov	r1, r9
 8006432:	f7f9 fecd 	bl	80001d0 <__aeabi_dsub>
 8006436:	4652      	mov	r2, sl
 8006438:	465b      	mov	r3, fp
 800643a:	f7fa f881 	bl	8000540 <__aeabi_dmul>
 800643e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006442:	f7f9 fec5 	bl	80001d0 <__aeabi_dsub>
 8006446:	a30c      	add	r3, pc, #48	@ (adr r3, 8006478 <__kernel_sin+0x140>)
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	4606      	mov	r6, r0
 800644e:	460f      	mov	r7, r1
 8006450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006454:	f7fa f874 	bl	8000540 <__aeabi_dmul>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4630      	mov	r0, r6
 800645e:	4639      	mov	r1, r7
 8006460:	f7f9 feb8 	bl	80001d4 <__adddf3>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4620      	mov	r0, r4
 800646a:	4629      	mov	r1, r5
 800646c:	f7f9 feb0 	bl	80001d0 <__aeabi_dsub>
 8006470:	e7c6      	b.n	8006400 <__kernel_sin+0xc8>
 8006472:	bf00      	nop
 8006474:	f3af 8000 	nop.w
 8006478:	55555549 	.word	0x55555549
 800647c:	3fc55555 	.word	0x3fc55555
 8006480:	3fe00000 	.word	0x3fe00000
 8006484:	5acfd57c 	.word	0x5acfd57c
 8006488:	3de5d93a 	.word	0x3de5d93a
 800648c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006490:	3e5ae5e6 	.word	0x3e5ae5e6
 8006494:	57b1fe7d 	.word	0x57b1fe7d
 8006498:	3ec71de3 	.word	0x3ec71de3
 800649c:	19c161d5 	.word	0x19c161d5
 80064a0:	3f2a01a0 	.word	0x3f2a01a0
 80064a4:	1110f8a6 	.word	0x1110f8a6
 80064a8:	3f811111 	.word	0x3f811111
 80064ac:	00000000 	.word	0x00000000

080064b0 <__ieee754_rem_pio2>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	ec57 6b10 	vmov	r6, r7, d0
 80064b8:	4bc5      	ldr	r3, [pc, #788]	@ (80067d0 <__ieee754_rem_pio2+0x320>)
 80064ba:	b08d      	sub	sp, #52	@ 0x34
 80064bc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80064c0:	4598      	cmp	r8, r3
 80064c2:	4604      	mov	r4, r0
 80064c4:	9704      	str	r7, [sp, #16]
 80064c6:	d807      	bhi.n	80064d8 <__ieee754_rem_pio2+0x28>
 80064c8:	2200      	movs	r2, #0
 80064ca:	2300      	movs	r3, #0
 80064cc:	ed80 0b00 	vstr	d0, [r0]
 80064d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80064d4:	2500      	movs	r5, #0
 80064d6:	e028      	b.n	800652a <__ieee754_rem_pio2+0x7a>
 80064d8:	4bbe      	ldr	r3, [pc, #760]	@ (80067d4 <__ieee754_rem_pio2+0x324>)
 80064da:	4598      	cmp	r8, r3
 80064dc:	d878      	bhi.n	80065d0 <__ieee754_rem_pio2+0x120>
 80064de:	9b04      	ldr	r3, [sp, #16]
 80064e0:	4dbd      	ldr	r5, [pc, #756]	@ (80067d8 <__ieee754_rem_pio2+0x328>)
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	4630      	mov	r0, r6
 80064e6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006798 <__ieee754_rem_pio2+0x2e8>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	4639      	mov	r1, r7
 80064ee:	dd38      	ble.n	8006562 <__ieee754_rem_pio2+0xb2>
 80064f0:	f7f9 fe6e 	bl	80001d0 <__aeabi_dsub>
 80064f4:	45a8      	cmp	r8, r5
 80064f6:	4606      	mov	r6, r0
 80064f8:	460f      	mov	r7, r1
 80064fa:	d01a      	beq.n	8006532 <__ieee754_rem_pio2+0x82>
 80064fc:	a3a8      	add	r3, pc, #672	@ (adr r3, 80067a0 <__ieee754_rem_pio2+0x2f0>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f7f9 fe65 	bl	80001d0 <__aeabi_dsub>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4680      	mov	r8, r0
 800650c:	4689      	mov	r9, r1
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7f9 fe5d 	bl	80001d0 <__aeabi_dsub>
 8006516:	a3a2      	add	r3, pc, #648	@ (adr r3, 80067a0 <__ieee754_rem_pio2+0x2f0>)
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f7f9 fe58 	bl	80001d0 <__aeabi_dsub>
 8006520:	e9c4 8900 	strd	r8, r9, [r4]
 8006524:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006528:	2501      	movs	r5, #1
 800652a:	4628      	mov	r0, r5
 800652c:	b00d      	add	sp, #52	@ 0x34
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	a39d      	add	r3, pc, #628	@ (adr r3, 80067a8 <__ieee754_rem_pio2+0x2f8>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7f9 fe4a 	bl	80001d0 <__aeabi_dsub>
 800653c:	a39c      	add	r3, pc, #624	@ (adr r3, 80067b0 <__ieee754_rem_pio2+0x300>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	4606      	mov	r6, r0
 8006544:	460f      	mov	r7, r1
 8006546:	f7f9 fe43 	bl	80001d0 <__aeabi_dsub>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4680      	mov	r8, r0
 8006550:	4689      	mov	r9, r1
 8006552:	4630      	mov	r0, r6
 8006554:	4639      	mov	r1, r7
 8006556:	f7f9 fe3b 	bl	80001d0 <__aeabi_dsub>
 800655a:	a395      	add	r3, pc, #596	@ (adr r3, 80067b0 <__ieee754_rem_pio2+0x300>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	e7dc      	b.n	800651c <__ieee754_rem_pio2+0x6c>
 8006562:	f7f9 fe37 	bl	80001d4 <__adddf3>
 8006566:	45a8      	cmp	r8, r5
 8006568:	4606      	mov	r6, r0
 800656a:	460f      	mov	r7, r1
 800656c:	d018      	beq.n	80065a0 <__ieee754_rem_pio2+0xf0>
 800656e:	a38c      	add	r3, pc, #560	@ (adr r3, 80067a0 <__ieee754_rem_pio2+0x2f0>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 fe2e 	bl	80001d4 <__adddf3>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4680      	mov	r8, r0
 800657e:	4689      	mov	r9, r1
 8006580:	4630      	mov	r0, r6
 8006582:	4639      	mov	r1, r7
 8006584:	f7f9 fe24 	bl	80001d0 <__aeabi_dsub>
 8006588:	a385      	add	r3, pc, #532	@ (adr r3, 80067a0 <__ieee754_rem_pio2+0x2f0>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f7f9 fe21 	bl	80001d4 <__adddf3>
 8006592:	f04f 35ff 	mov.w	r5, #4294967295
 8006596:	e9c4 8900 	strd	r8, r9, [r4]
 800659a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800659e:	e7c4      	b.n	800652a <__ieee754_rem_pio2+0x7a>
 80065a0:	a381      	add	r3, pc, #516	@ (adr r3, 80067a8 <__ieee754_rem_pio2+0x2f8>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7f9 fe15 	bl	80001d4 <__adddf3>
 80065aa:	a381      	add	r3, pc, #516	@ (adr r3, 80067b0 <__ieee754_rem_pio2+0x300>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	4606      	mov	r6, r0
 80065b2:	460f      	mov	r7, r1
 80065b4:	f7f9 fe0e 	bl	80001d4 <__adddf3>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4680      	mov	r8, r0
 80065be:	4689      	mov	r9, r1
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7f9 fe04 	bl	80001d0 <__aeabi_dsub>
 80065c8:	a379      	add	r3, pc, #484	@ (adr r3, 80067b0 <__ieee754_rem_pio2+0x300>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	e7de      	b.n	800658e <__ieee754_rem_pio2+0xde>
 80065d0:	4b82      	ldr	r3, [pc, #520]	@ (80067dc <__ieee754_rem_pio2+0x32c>)
 80065d2:	4598      	cmp	r8, r3
 80065d4:	f200 80d1 	bhi.w	800677a <__ieee754_rem_pio2+0x2ca>
 80065d8:	f000 f966 	bl	80068a8 <fabs>
 80065dc:	ec57 6b10 	vmov	r6, r7, d0
 80065e0:	a375      	add	r3, pc, #468	@ (adr r3, 80067b8 <__ieee754_rem_pio2+0x308>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	4630      	mov	r0, r6
 80065e8:	4639      	mov	r1, r7
 80065ea:	f7f9 ffa9 	bl	8000540 <__aeabi_dmul>
 80065ee:	4b7c      	ldr	r3, [pc, #496]	@ (80067e0 <__ieee754_rem_pio2+0x330>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	f7f9 fdef 	bl	80001d4 <__adddf3>
 80065f6:	f7fa fa3d 	bl	8000a74 <__aeabi_d2iz>
 80065fa:	4605      	mov	r5, r0
 80065fc:	f7f9 ff36 	bl	800046c <__aeabi_i2d>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006608:	a363      	add	r3, pc, #396	@ (adr r3, 8006798 <__ieee754_rem_pio2+0x2e8>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 ff97 	bl	8000540 <__aeabi_dmul>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7f9 fdd9 	bl	80001d0 <__aeabi_dsub>
 800661e:	a360      	add	r3, pc, #384	@ (adr r3, 80067a0 <__ieee754_rem_pio2+0x2f0>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	4682      	mov	sl, r0
 8006626:	468b      	mov	fp, r1
 8006628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662c:	f7f9 ff88 	bl	8000540 <__aeabi_dmul>
 8006630:	2d1f      	cmp	r5, #31
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	dc0c      	bgt.n	8006652 <__ieee754_rem_pio2+0x1a2>
 8006638:	4b6a      	ldr	r3, [pc, #424]	@ (80067e4 <__ieee754_rem_pio2+0x334>)
 800663a:	1e6a      	subs	r2, r5, #1
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	4543      	cmp	r3, r8
 8006642:	d006      	beq.n	8006652 <__ieee754_rem_pio2+0x1a2>
 8006644:	4632      	mov	r2, r6
 8006646:	463b      	mov	r3, r7
 8006648:	4650      	mov	r0, sl
 800664a:	4659      	mov	r1, fp
 800664c:	f7f9 fdc0 	bl	80001d0 <__aeabi_dsub>
 8006650:	e00e      	b.n	8006670 <__ieee754_rem_pio2+0x1c0>
 8006652:	463b      	mov	r3, r7
 8006654:	4632      	mov	r2, r6
 8006656:	4650      	mov	r0, sl
 8006658:	4659      	mov	r1, fp
 800665a:	f7f9 fdb9 	bl	80001d0 <__aeabi_dsub>
 800665e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006668:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800666c:	2b10      	cmp	r3, #16
 800666e:	dc02      	bgt.n	8006676 <__ieee754_rem_pio2+0x1c6>
 8006670:	e9c4 0100 	strd	r0, r1, [r4]
 8006674:	e039      	b.n	80066ea <__ieee754_rem_pio2+0x23a>
 8006676:	a34c      	add	r3, pc, #304	@ (adr r3, 80067a8 <__ieee754_rem_pio2+0x2f8>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006680:	f7f9 ff5e 	bl	8000540 <__aeabi_dmul>
 8006684:	4606      	mov	r6, r0
 8006686:	460f      	mov	r7, r1
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4650      	mov	r0, sl
 800668e:	4659      	mov	r1, fp
 8006690:	f7f9 fd9e 	bl	80001d0 <__aeabi_dsub>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4680      	mov	r8, r0
 800669a:	4689      	mov	r9, r1
 800669c:	4650      	mov	r0, sl
 800669e:	4659      	mov	r1, fp
 80066a0:	f7f9 fd96 	bl	80001d0 <__aeabi_dsub>
 80066a4:	4632      	mov	r2, r6
 80066a6:	463b      	mov	r3, r7
 80066a8:	f7f9 fd92 	bl	80001d0 <__aeabi_dsub>
 80066ac:	a340      	add	r3, pc, #256	@ (adr r3, 80067b0 <__ieee754_rem_pio2+0x300>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	4606      	mov	r6, r0
 80066b4:	460f      	mov	r7, r1
 80066b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ba:	f7f9 ff41 	bl	8000540 <__aeabi_dmul>
 80066be:	4632      	mov	r2, r6
 80066c0:	463b      	mov	r3, r7
 80066c2:	f7f9 fd85 	bl	80001d0 <__aeabi_dsub>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7f9 fd7d 	bl	80001d0 <__aeabi_dsub>
 80066d6:	9a05      	ldr	r2, [sp, #20]
 80066d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b31      	cmp	r3, #49	@ 0x31
 80066e0:	dc20      	bgt.n	8006724 <__ieee754_rem_pio2+0x274>
 80066e2:	e9c4 0100 	strd	r0, r1, [r4]
 80066e6:	46c2      	mov	sl, r8
 80066e8:	46cb      	mov	fp, r9
 80066ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80066ee:	4650      	mov	r0, sl
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	4659      	mov	r1, fp
 80066f6:	f7f9 fd6b 	bl	80001d0 <__aeabi_dsub>
 80066fa:	463b      	mov	r3, r7
 80066fc:	4632      	mov	r2, r6
 80066fe:	f7f9 fd67 	bl	80001d0 <__aeabi_dsub>
 8006702:	9b04      	ldr	r3, [sp, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800670a:	f6bf af0e 	bge.w	800652a <__ieee754_rem_pio2+0x7a>
 800670e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006712:	6063      	str	r3, [r4, #4]
 8006714:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006718:	f8c4 8000 	str.w	r8, [r4]
 800671c:	60a0      	str	r0, [r4, #8]
 800671e:	60e3      	str	r3, [r4, #12]
 8006720:	426d      	negs	r5, r5
 8006722:	e702      	b.n	800652a <__ieee754_rem_pio2+0x7a>
 8006724:	a326      	add	r3, pc, #152	@ (adr r3, 80067c0 <__ieee754_rem_pio2+0x310>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672e:	f7f9 ff07 	bl	8000540 <__aeabi_dmul>
 8006732:	4606      	mov	r6, r0
 8006734:	460f      	mov	r7, r1
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 fd47 	bl	80001d0 <__aeabi_dsub>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4682      	mov	sl, r0
 8006748:	468b      	mov	fp, r1
 800674a:	4640      	mov	r0, r8
 800674c:	4649      	mov	r1, r9
 800674e:	f7f9 fd3f 	bl	80001d0 <__aeabi_dsub>
 8006752:	4632      	mov	r2, r6
 8006754:	463b      	mov	r3, r7
 8006756:	f7f9 fd3b 	bl	80001d0 <__aeabi_dsub>
 800675a:	a31b      	add	r3, pc, #108	@ (adr r3, 80067c8 <__ieee754_rem_pio2+0x318>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	4606      	mov	r6, r0
 8006762:	460f      	mov	r7, r1
 8006764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006768:	f7f9 feea 	bl	8000540 <__aeabi_dmul>
 800676c:	4632      	mov	r2, r6
 800676e:	463b      	mov	r3, r7
 8006770:	f7f9 fd2e 	bl	80001d0 <__aeabi_dsub>
 8006774:	4606      	mov	r6, r0
 8006776:	460f      	mov	r7, r1
 8006778:	e764      	b.n	8006644 <__ieee754_rem_pio2+0x194>
 800677a:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <__ieee754_rem_pio2+0x338>)
 800677c:	4598      	cmp	r8, r3
 800677e:	d935      	bls.n	80067ec <__ieee754_rem_pio2+0x33c>
 8006780:	4632      	mov	r2, r6
 8006782:	463b      	mov	r3, r7
 8006784:	4630      	mov	r0, r6
 8006786:	4639      	mov	r1, r7
 8006788:	f7f9 fd22 	bl	80001d0 <__aeabi_dsub>
 800678c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006790:	e9c4 0100 	strd	r0, r1, [r4]
 8006794:	e69e      	b.n	80064d4 <__ieee754_rem_pio2+0x24>
 8006796:	bf00      	nop
 8006798:	54400000 	.word	0x54400000
 800679c:	3ff921fb 	.word	0x3ff921fb
 80067a0:	1a626331 	.word	0x1a626331
 80067a4:	3dd0b461 	.word	0x3dd0b461
 80067a8:	1a600000 	.word	0x1a600000
 80067ac:	3dd0b461 	.word	0x3dd0b461
 80067b0:	2e037073 	.word	0x2e037073
 80067b4:	3ba3198a 	.word	0x3ba3198a
 80067b8:	6dc9c883 	.word	0x6dc9c883
 80067bc:	3fe45f30 	.word	0x3fe45f30
 80067c0:	2e000000 	.word	0x2e000000
 80067c4:	3ba3198a 	.word	0x3ba3198a
 80067c8:	252049c1 	.word	0x252049c1
 80067cc:	397b839a 	.word	0x397b839a
 80067d0:	3fe921fb 	.word	0x3fe921fb
 80067d4:	4002d97b 	.word	0x4002d97b
 80067d8:	3ff921fb 	.word	0x3ff921fb
 80067dc:	413921fb 	.word	0x413921fb
 80067e0:	3fe00000 	.word	0x3fe00000
 80067e4:	0801463c 	.word	0x0801463c
 80067e8:	7fefffff 	.word	0x7fefffff
 80067ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80067f0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80067f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80067f8:	4630      	mov	r0, r6
 80067fa:	460f      	mov	r7, r1
 80067fc:	f7fa f93a 	bl	8000a74 <__aeabi_d2iz>
 8006800:	f7f9 fe34 	bl	800046c <__aeabi_i2d>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006810:	f7f9 fcde 	bl	80001d0 <__aeabi_dsub>
 8006814:	4b22      	ldr	r3, [pc, #136]	@ (80068a0 <__ieee754_rem_pio2+0x3f0>)
 8006816:	2200      	movs	r2, #0
 8006818:	f7f9 fe92 	bl	8000540 <__aeabi_dmul>
 800681c:	460f      	mov	r7, r1
 800681e:	4606      	mov	r6, r0
 8006820:	f7fa f928 	bl	8000a74 <__aeabi_d2iz>
 8006824:	f7f9 fe22 	bl	800046c <__aeabi_i2d>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4630      	mov	r0, r6
 800682e:	4639      	mov	r1, r7
 8006830:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006834:	f7f9 fccc 	bl	80001d0 <__aeabi_dsub>
 8006838:	4b19      	ldr	r3, [pc, #100]	@ (80068a0 <__ieee754_rem_pio2+0x3f0>)
 800683a:	2200      	movs	r2, #0
 800683c:	f7f9 fe80 	bl	8000540 <__aeabi_dmul>
 8006840:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006844:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006848:	f04f 0803 	mov.w	r8, #3
 800684c:	2600      	movs	r6, #0
 800684e:	2700      	movs	r7, #0
 8006850:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006854:	4632      	mov	r2, r6
 8006856:	463b      	mov	r3, r7
 8006858:	46c2      	mov	sl, r8
 800685a:	f108 38ff 	add.w	r8, r8, #4294967295
 800685e:	f7fa f8d7 	bl	8000a10 <__aeabi_dcmpeq>
 8006862:	2800      	cmp	r0, #0
 8006864:	d1f4      	bne.n	8006850 <__ieee754_rem_pio2+0x3a0>
 8006866:	4b0f      	ldr	r3, [pc, #60]	@ (80068a4 <__ieee754_rem_pio2+0x3f4>)
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	2302      	movs	r3, #2
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	462a      	mov	r2, r5
 8006870:	4653      	mov	r3, sl
 8006872:	4621      	mov	r1, r4
 8006874:	a806      	add	r0, sp, #24
 8006876:	f000 f81f 	bl	80068b8 <__kernel_rem_pio2>
 800687a:	9b04      	ldr	r3, [sp, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	4605      	mov	r5, r0
 8006880:	f6bf ae53 	bge.w	800652a <__ieee754_rem_pio2+0x7a>
 8006884:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006888:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800688c:	e9c4 2300 	strd	r2, r3, [r4]
 8006890:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006894:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006898:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800689c:	e740      	b.n	8006720 <__ieee754_rem_pio2+0x270>
 800689e:	bf00      	nop
 80068a0:	41700000 	.word	0x41700000
 80068a4:	080146bc 	.word	0x080146bc

080068a8 <fabs>:
 80068a8:	ec51 0b10 	vmov	r0, r1, d0
 80068ac:	4602      	mov	r2, r0
 80068ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80068b2:	ec43 2b10 	vmov	d0, r2, r3
 80068b6:	4770      	bx	lr

080068b8 <__kernel_rem_pio2>:
 80068b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068bc:	ed2d 8b02 	vpush	{d8}
 80068c0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80068c4:	f112 0f14 	cmn.w	r2, #20
 80068c8:	9306      	str	r3, [sp, #24]
 80068ca:	9104      	str	r1, [sp, #16]
 80068cc:	4bbe      	ldr	r3, [pc, #760]	@ (8006bc8 <__kernel_rem_pio2+0x310>)
 80068ce:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80068d0:	9008      	str	r0, [sp, #32]
 80068d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	9b06      	ldr	r3, [sp, #24]
 80068da:	f103 33ff 	add.w	r3, r3, #4294967295
 80068de:	bfa8      	it	ge
 80068e0:	1ed4      	subge	r4, r2, #3
 80068e2:	9305      	str	r3, [sp, #20]
 80068e4:	bfb2      	itee	lt
 80068e6:	2400      	movlt	r4, #0
 80068e8:	2318      	movge	r3, #24
 80068ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80068ee:	f06f 0317 	mvn.w	r3, #23
 80068f2:	fb04 3303 	mla	r3, r4, r3, r3
 80068f6:	eb03 0b02 	add.w	fp, r3, r2
 80068fa:	9b00      	ldr	r3, [sp, #0]
 80068fc:	9a05      	ldr	r2, [sp, #20]
 80068fe:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006bb8 <__kernel_rem_pio2+0x300>
 8006902:	eb03 0802 	add.w	r8, r3, r2
 8006906:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006908:	1aa7      	subs	r7, r4, r2
 800690a:	ae20      	add	r6, sp, #128	@ 0x80
 800690c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006910:	2500      	movs	r5, #0
 8006912:	4545      	cmp	r5, r8
 8006914:	dd13      	ble.n	800693e <__kernel_rem_pio2+0x86>
 8006916:	9b06      	ldr	r3, [sp, #24]
 8006918:	aa20      	add	r2, sp, #128	@ 0x80
 800691a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800691e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	9b00      	ldr	r3, [sp, #0]
 8006928:	4598      	cmp	r8, r3
 800692a:	dc31      	bgt.n	8006990 <__kernel_rem_pio2+0xd8>
 800692c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006bb8 <__kernel_rem_pio2+0x300>
 8006930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006934:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006938:	462f      	mov	r7, r5
 800693a:	2600      	movs	r6, #0
 800693c:	e01b      	b.n	8006976 <__kernel_rem_pio2+0xbe>
 800693e:	42ef      	cmn	r7, r5
 8006940:	d407      	bmi.n	8006952 <__kernel_rem_pio2+0x9a>
 8006942:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006946:	f7f9 fd91 	bl	800046c <__aeabi_i2d>
 800694a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800694e:	3501      	adds	r5, #1
 8006950:	e7df      	b.n	8006912 <__kernel_rem_pio2+0x5a>
 8006952:	ec51 0b18 	vmov	r0, r1, d8
 8006956:	e7f8      	b.n	800694a <__kernel_rem_pio2+0x92>
 8006958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006960:	f7f9 fdee 	bl	8000540 <__aeabi_dmul>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800696c:	f7f9 fc32 	bl	80001d4 <__adddf3>
 8006970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006974:	3601      	adds	r6, #1
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	429e      	cmp	r6, r3
 800697a:	f1a7 0708 	sub.w	r7, r7, #8
 800697e:	ddeb      	ble.n	8006958 <__kernel_rem_pio2+0xa0>
 8006980:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006984:	f108 0801 	add.w	r8, r8, #1
 8006988:	ecaa 7b02 	vstmia	sl!, {d7}
 800698c:	3508      	adds	r5, #8
 800698e:	e7ca      	b.n	8006926 <__kernel_rem_pio2+0x6e>
 8006990:	9b00      	ldr	r3, [sp, #0]
 8006992:	f8dd 8000 	ldr.w	r8, [sp]
 8006996:	aa0c      	add	r2, sp, #48	@ 0x30
 8006998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800699c:	930a      	str	r3, [sp, #40]	@ 0x28
 800699e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80069a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80069a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80069aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ac:	ab98      	add	r3, sp, #608	@ 0x260
 80069ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80069b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069ba:	ac0c      	add	r4, sp, #48	@ 0x30
 80069bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80069be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80069c2:	46a1      	mov	r9, r4
 80069c4:	46c2      	mov	sl, r8
 80069c6:	f1ba 0f00 	cmp.w	sl, #0
 80069ca:	f1a5 0508 	sub.w	r5, r5, #8
 80069ce:	dc77      	bgt.n	8006ac0 <__kernel_rem_pio2+0x208>
 80069d0:	4658      	mov	r0, fp
 80069d2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80069d6:	f000 fac7 	bl	8006f68 <scalbn>
 80069da:	ec57 6b10 	vmov	r6, r7, d0
 80069de:	2200      	movs	r2, #0
 80069e0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f7f9 fdaa 	bl	8000540 <__aeabi_dmul>
 80069ec:	ec41 0b10 	vmov	d0, r0, r1
 80069f0:	f000 fb3a 	bl	8007068 <floor>
 80069f4:	4b75      	ldr	r3, [pc, #468]	@ (8006bcc <__kernel_rem_pio2+0x314>)
 80069f6:	ec51 0b10 	vmov	r0, r1, d0
 80069fa:	2200      	movs	r2, #0
 80069fc:	f7f9 fda0 	bl	8000540 <__aeabi_dmul>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4630      	mov	r0, r6
 8006a06:	4639      	mov	r1, r7
 8006a08:	f7f9 fbe2 	bl	80001d0 <__aeabi_dsub>
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	4606      	mov	r6, r0
 8006a10:	f7fa f830 	bl	8000a74 <__aeabi_d2iz>
 8006a14:	9002      	str	r0, [sp, #8]
 8006a16:	f7f9 fd29 	bl	800046c <__aeabi_i2d>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4630      	mov	r0, r6
 8006a20:	4639      	mov	r1, r7
 8006a22:	f7f9 fbd5 	bl	80001d0 <__aeabi_dsub>
 8006a26:	f1bb 0f00 	cmp.w	fp, #0
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	460f      	mov	r7, r1
 8006a2e:	dd6c      	ble.n	8006b0a <__kernel_rem_pio2+0x252>
 8006a30:	f108 31ff 	add.w	r1, r8, #4294967295
 8006a34:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a36:	9d02      	ldr	r5, [sp, #8]
 8006a38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a3c:	f1cb 0018 	rsb	r0, fp, #24
 8006a40:	fa43 f200 	asr.w	r2, r3, r0
 8006a44:	4415      	add	r5, r2
 8006a46:	4082      	lsls	r2, r0
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	aa0c      	add	r2, sp, #48	@ 0x30
 8006a4c:	9502      	str	r5, [sp, #8]
 8006a4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006a52:	f1cb 0217 	rsb	r2, fp, #23
 8006a56:	fa43 f902 	asr.w	r9, r3, r2
 8006a5a:	f1b9 0f00 	cmp.w	r9, #0
 8006a5e:	dd64      	ble.n	8006b2a <__kernel_rem_pio2+0x272>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	3301      	adds	r3, #1
 8006a66:	9302      	str	r3, [sp, #8]
 8006a68:	4615      	mov	r5, r2
 8006a6a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006a6e:	4590      	cmp	r8, r2
 8006a70:	f300 80b8 	bgt.w	8006be4 <__kernel_rem_pio2+0x32c>
 8006a74:	f1bb 0f00 	cmp.w	fp, #0
 8006a78:	dd07      	ble.n	8006a8a <__kernel_rem_pio2+0x1d2>
 8006a7a:	f1bb 0f01 	cmp.w	fp, #1
 8006a7e:	f000 80bf 	beq.w	8006c00 <__kernel_rem_pio2+0x348>
 8006a82:	f1bb 0f02 	cmp.w	fp, #2
 8006a86:	f000 80c6 	beq.w	8006c16 <__kernel_rem_pio2+0x35e>
 8006a8a:	f1b9 0f02 	cmp.w	r9, #2
 8006a8e:	d14c      	bne.n	8006b2a <__kernel_rem_pio2+0x272>
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	494e      	ldr	r1, [pc, #312]	@ (8006bd0 <__kernel_rem_pio2+0x318>)
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7f9 fb9a 	bl	80001d0 <__aeabi_dsub>
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	460f      	mov	r7, r1
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	d042      	beq.n	8006b2a <__kernel_rem_pio2+0x272>
 8006aa4:	4658      	mov	r0, fp
 8006aa6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006bc0 <__kernel_rem_pio2+0x308>
 8006aaa:	f000 fa5d 	bl	8006f68 <scalbn>
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	ec53 2b10 	vmov	r2, r3, d0
 8006ab6:	f7f9 fb8b 	bl	80001d0 <__aeabi_dsub>
 8006aba:	4606      	mov	r6, r0
 8006abc:	460f      	mov	r7, r1
 8006abe:	e034      	b.n	8006b2a <__kernel_rem_pio2+0x272>
 8006ac0:	4b44      	ldr	r3, [pc, #272]	@ (8006bd4 <__kernel_rem_pio2+0x31c>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac8:	f7f9 fd3a 	bl	8000540 <__aeabi_dmul>
 8006acc:	f7f9 ffd2 	bl	8000a74 <__aeabi_d2iz>
 8006ad0:	f7f9 fccc 	bl	800046c <__aeabi_i2d>
 8006ad4:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <__kernel_rem_pio2+0x320>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4606      	mov	r6, r0
 8006ada:	460f      	mov	r7, r1
 8006adc:	f7f9 fd30 	bl	8000540 <__aeabi_dmul>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae8:	f7f9 fb72 	bl	80001d0 <__aeabi_dsub>
 8006aec:	f7f9 ffc2 	bl	8000a74 <__aeabi_d2iz>
 8006af0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006af4:	f849 0b04 	str.w	r0, [r9], #4
 8006af8:	4639      	mov	r1, r7
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7f9 fb6a 	bl	80001d4 <__adddf3>
 8006b00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b08:	e75d      	b.n	80069c6 <__kernel_rem_pio2+0x10e>
 8006b0a:	d107      	bne.n	8006b1c <__kernel_rem_pio2+0x264>
 8006b0c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b10:	aa0c      	add	r2, sp, #48	@ 0x30
 8006b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b16:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006b1a:	e79e      	b.n	8006a5a <__kernel_rem_pio2+0x1a2>
 8006b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bdc <__kernel_rem_pio2+0x324>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f7f9 ff94 	bl	8000a4c <__aeabi_dcmpge>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d143      	bne.n	8006bb0 <__kernel_rem_pio2+0x2f8>
 8006b28:	4681      	mov	r9, r0
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4639      	mov	r1, r7
 8006b32:	f7f9 ff6d 	bl	8000a10 <__aeabi_dcmpeq>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	f000 80bf 	beq.w	8006cba <__kernel_rem_pio2+0x402>
 8006b3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b40:	2200      	movs	r2, #0
 8006b42:	9900      	ldr	r1, [sp, #0]
 8006b44:	428b      	cmp	r3, r1
 8006b46:	da6e      	bge.n	8006c26 <__kernel_rem_pio2+0x36e>
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	f000 8089 	beq.w	8006c60 <__kernel_rem_pio2+0x3a8>
 8006b4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b52:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b54:	f1ab 0b18 	sub.w	fp, fp, #24
 8006b58:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f6      	beq.n	8006b4e <__kernel_rem_pio2+0x296>
 8006b60:	4658      	mov	r0, fp
 8006b62:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006bc0 <__kernel_rem_pio2+0x308>
 8006b66:	f000 f9ff 	bl	8006f68 <scalbn>
 8006b6a:	f108 0301 	add.w	r3, r8, #1
 8006b6e:	00da      	lsls	r2, r3, #3
 8006b70:	9205      	str	r2, [sp, #20]
 8006b72:	ec55 4b10 	vmov	r4, r5, d0
 8006b76:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006b78:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006bd4 <__kernel_rem_pio2+0x31c>
 8006b7c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006b80:	4646      	mov	r6, r8
 8006b82:	f04f 0a00 	mov.w	sl, #0
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	f280 80cf 	bge.w	8006d2a <__kernel_rem_pio2+0x472>
 8006b8c:	4644      	mov	r4, r8
 8006b8e:	2c00      	cmp	r4, #0
 8006b90:	f2c0 80fd 	blt.w	8006d8e <__kernel_rem_pio2+0x4d6>
 8006b94:	4b12      	ldr	r3, [pc, #72]	@ (8006be0 <__kernel_rem_pio2+0x328>)
 8006b96:	461f      	mov	r7, r3
 8006b98:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006b9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b9e:	9306      	str	r3, [sp, #24]
 8006ba0:	f04f 0a00 	mov.w	sl, #0
 8006ba4:	f04f 0b00 	mov.w	fp, #0
 8006ba8:	2600      	movs	r6, #0
 8006baa:	eba8 0504 	sub.w	r5, r8, r4
 8006bae:	e0e2      	b.n	8006d76 <__kernel_rem_pio2+0x4be>
 8006bb0:	f04f 0902 	mov.w	r9, #2
 8006bb4:	e754      	b.n	8006a60 <__kernel_rem_pio2+0x1a8>
 8006bb6:	bf00      	nop
	...
 8006bc4:	3ff00000 	.word	0x3ff00000
 8006bc8:	08014808 	.word	0x08014808
 8006bcc:	40200000 	.word	0x40200000
 8006bd0:	3ff00000 	.word	0x3ff00000
 8006bd4:	3e700000 	.word	0x3e700000
 8006bd8:	41700000 	.word	0x41700000
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	080147c8 	.word	0x080147c8
 8006be4:	f854 3b04 	ldr.w	r3, [r4], #4
 8006be8:	b945      	cbnz	r5, 8006bfc <__kernel_rem_pio2+0x344>
 8006bea:	b123      	cbz	r3, 8006bf6 <__kernel_rem_pio2+0x33e>
 8006bec:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006bf0:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	3201      	adds	r2, #1
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	e738      	b.n	8006a6e <__kernel_rem_pio2+0x1b6>
 8006bfc:	1acb      	subs	r3, r1, r3
 8006bfe:	e7f7      	b.n	8006bf0 <__kernel_rem_pio2+0x338>
 8006c00:	f108 32ff 	add.w	r2, r8, #4294967295
 8006c04:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c0e:	a90c      	add	r1, sp, #48	@ 0x30
 8006c10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006c14:	e739      	b.n	8006a8a <__kernel_rem_pio2+0x1d2>
 8006c16:	f108 32ff 	add.w	r2, r8, #4294967295
 8006c1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006c24:	e7f3      	b.n	8006c0e <__kernel_rem_pio2+0x356>
 8006c26:	a90c      	add	r1, sp, #48	@ 0x30
 8006c28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	e787      	b.n	8006b42 <__kernel_rem_pio2+0x28a>
 8006c32:	3401      	adds	r4, #1
 8006c34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	d0fa      	beq.n	8006c32 <__kernel_rem_pio2+0x37a>
 8006c3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c42:	eb0d 0503 	add.w	r5, sp, r3
 8006c46:	9b06      	ldr	r3, [sp, #24]
 8006c48:	aa20      	add	r2, sp, #128	@ 0x80
 8006c4a:	4443      	add	r3, r8
 8006c4c:	f108 0701 	add.w	r7, r8, #1
 8006c50:	3d98      	subs	r5, #152	@ 0x98
 8006c52:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006c56:	4444      	add	r4, r8
 8006c58:	42bc      	cmp	r4, r7
 8006c5a:	da04      	bge.n	8006c66 <__kernel_rem_pio2+0x3ae>
 8006c5c:	46a0      	mov	r8, r4
 8006c5e:	e6a2      	b.n	80069a6 <__kernel_rem_pio2+0xee>
 8006c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c62:	2401      	movs	r4, #1
 8006c64:	e7e6      	b.n	8006c34 <__kernel_rem_pio2+0x37c>
 8006c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c68:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006c6c:	f7f9 fbfe 	bl	800046c <__aeabi_i2d>
 8006c70:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006f38 <__kernel_rem_pio2+0x680>
 8006c74:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c80:	46b2      	mov	sl, r6
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	4598      	cmp	r8, r3
 8006c8a:	dd05      	ble.n	8006c98 <__kernel_rem_pio2+0x3e0>
 8006c8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c90:	3701      	adds	r7, #1
 8006c92:	eca5 7b02 	vstmia	r5!, {d7}
 8006c96:	e7df      	b.n	8006c58 <__kernel_rem_pio2+0x3a0>
 8006c98:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006c9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006ca0:	f7f9 fc4e 	bl	8000540 <__aeabi_dmul>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cac:	f7f9 fa92 	bl	80001d4 <__adddf3>
 8006cb0:	f108 0801 	add.w	r8, r8, #1
 8006cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb8:	e7e5      	b.n	8006c86 <__kernel_rem_pio2+0x3ce>
 8006cba:	f1cb 0000 	rsb	r0, fp, #0
 8006cbe:	ec47 6b10 	vmov	d0, r6, r7
 8006cc2:	f000 f951 	bl	8006f68 <scalbn>
 8006cc6:	ec55 4b10 	vmov	r4, r5, d0
 8006cca:	4b9d      	ldr	r3, [pc, #628]	@ (8006f40 <__kernel_rem_pio2+0x688>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 febb 	bl	8000a4c <__aeabi_dcmpge>
 8006cd6:	b300      	cbz	r0, 8006d1a <__kernel_rem_pio2+0x462>
 8006cd8:	4b9a      	ldr	r3, [pc, #616]	@ (8006f44 <__kernel_rem_pio2+0x68c>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	f7f9 fc2e 	bl	8000540 <__aeabi_dmul>
 8006ce4:	f7f9 fec6 	bl	8000a74 <__aeabi_d2iz>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	f7f9 fbbf 	bl	800046c <__aeabi_i2d>
 8006cee:	4b94      	ldr	r3, [pc, #592]	@ (8006f40 <__kernel_rem_pio2+0x688>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f7f9 fc25 	bl	8000540 <__aeabi_dmul>
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7f9 fa67 	bl	80001d0 <__aeabi_dsub>
 8006d02:	f7f9 feb7 	bl	8000a74 <__aeabi_d2iz>
 8006d06:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d08:	f10b 0b18 	add.w	fp, fp, #24
 8006d0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006d10:	f108 0801 	add.w	r8, r8, #1
 8006d14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006d18:	e722      	b.n	8006b60 <__kernel_rem_pio2+0x2a8>
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fea9 	bl	8000a74 <__aeabi_d2iz>
 8006d22:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006d28:	e71a      	b.n	8006b60 <__kernel_rem_pio2+0x2a8>
 8006d2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d30:	f7f9 fb9c 	bl	800046c <__aeabi_i2d>
 8006d34:	4622      	mov	r2, r4
 8006d36:	462b      	mov	r3, r5
 8006d38:	f7f9 fc02 	bl	8000540 <__aeabi_dmul>
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006d42:	465b      	mov	r3, fp
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 fbfa 	bl	8000540 <__aeabi_dmul>
 8006d4c:	3e01      	subs	r6, #1
 8006d4e:	4604      	mov	r4, r0
 8006d50:	460d      	mov	r5, r1
 8006d52:	e718      	b.n	8006b86 <__kernel_rem_pio2+0x2ce>
 8006d54:	9906      	ldr	r1, [sp, #24]
 8006d56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006d5a:	9106      	str	r1, [sp, #24]
 8006d5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006d60:	f7f9 fbee 	bl	8000540 <__aeabi_dmul>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4650      	mov	r0, sl
 8006d6a:	4659      	mov	r1, fp
 8006d6c:	f7f9 fa32 	bl	80001d4 <__adddf3>
 8006d70:	3601      	adds	r6, #1
 8006d72:	4682      	mov	sl, r0
 8006d74:	468b      	mov	fp, r1
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	429e      	cmp	r6, r3
 8006d7a:	dc01      	bgt.n	8006d80 <__kernel_rem_pio2+0x4c8>
 8006d7c:	42b5      	cmp	r5, r6
 8006d7e:	dae9      	bge.n	8006d54 <__kernel_rem_pio2+0x49c>
 8006d80:	ab48      	add	r3, sp, #288	@ 0x120
 8006d82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d86:	e9c5 ab00 	strd	sl, fp, [r5]
 8006d8a:	3c01      	subs	r4, #1
 8006d8c:	e6ff      	b.n	8006b8e <__kernel_rem_pio2+0x2d6>
 8006d8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	dc0b      	bgt.n	8006dac <__kernel_rem_pio2+0x4f4>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc39      	bgt.n	8006e0c <__kernel_rem_pio2+0x554>
 8006d98:	d05d      	beq.n	8006e56 <__kernel_rem_pio2+0x59e>
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	f003 0007 	and.w	r0, r3, #7
 8006da0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006da4:	ecbd 8b02 	vpop	{d8}
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d1f3      	bne.n	8006d9a <__kernel_rem_pio2+0x4e2>
 8006db2:	9b05      	ldr	r3, [sp, #20]
 8006db4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006db8:	eb0d 0403 	add.w	r4, sp, r3
 8006dbc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006dc0:	4625      	mov	r5, r4
 8006dc2:	46c2      	mov	sl, r8
 8006dc4:	f1ba 0f00 	cmp.w	sl, #0
 8006dc8:	f1a5 0508 	sub.w	r5, r5, #8
 8006dcc:	dc6b      	bgt.n	8006ea6 <__kernel_rem_pio2+0x5ee>
 8006dce:	4645      	mov	r5, r8
 8006dd0:	2d01      	cmp	r5, #1
 8006dd2:	f1a4 0408 	sub.w	r4, r4, #8
 8006dd6:	f300 8087 	bgt.w	8006ee8 <__kernel_rem_pio2+0x630>
 8006dda:	9c05      	ldr	r4, [sp, #20]
 8006ddc:	ab48      	add	r3, sp, #288	@ 0x120
 8006dde:	441c      	add	r4, r3
 8006de0:	2000      	movs	r0, #0
 8006de2:	2100      	movs	r1, #0
 8006de4:	f1b8 0f01 	cmp.w	r8, #1
 8006de8:	f300 809c 	bgt.w	8006f24 <__kernel_rem_pio2+0x66c>
 8006dec:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006df0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006df4:	f1b9 0f00 	cmp.w	r9, #0
 8006df8:	f040 80a6 	bne.w	8006f48 <__kernel_rem_pio2+0x690>
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	e9c3 7800 	strd	r7, r8, [r3]
 8006e02:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006e06:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006e0a:	e7c6      	b.n	8006d9a <__kernel_rem_pio2+0x4e2>
 8006e0c:	9d05      	ldr	r5, [sp, #20]
 8006e0e:	ab48      	add	r3, sp, #288	@ 0x120
 8006e10:	441d      	add	r5, r3
 8006e12:	4644      	mov	r4, r8
 8006e14:	2000      	movs	r0, #0
 8006e16:	2100      	movs	r1, #0
 8006e18:	2c00      	cmp	r4, #0
 8006e1a:	da35      	bge.n	8006e88 <__kernel_rem_pio2+0x5d0>
 8006e1c:	f1b9 0f00 	cmp.w	r9, #0
 8006e20:	d038      	beq.n	8006e94 <__kernel_rem_pio2+0x5dc>
 8006e22:	4602      	mov	r2, r0
 8006e24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e28:	9c04      	ldr	r4, [sp, #16]
 8006e2a:	e9c4 2300 	strd	r2, r3, [r4]
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006e36:	f7f9 f9cb 	bl	80001d0 <__aeabi_dsub>
 8006e3a:	ad4a      	add	r5, sp, #296	@ 0x128
 8006e3c:	2401      	movs	r4, #1
 8006e3e:	45a0      	cmp	r8, r4
 8006e40:	da2b      	bge.n	8006e9a <__kernel_rem_pio2+0x5e2>
 8006e42:	f1b9 0f00 	cmp.w	r9, #0
 8006e46:	d002      	beq.n	8006e4e <__kernel_rem_pio2+0x596>
 8006e48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e54:	e7a1      	b.n	8006d9a <__kernel_rem_pio2+0x4e2>
 8006e56:	9c05      	ldr	r4, [sp, #20]
 8006e58:	ab48      	add	r3, sp, #288	@ 0x120
 8006e5a:	441c      	add	r4, r3
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	2100      	movs	r1, #0
 8006e60:	f1b8 0f00 	cmp.w	r8, #0
 8006e64:	da09      	bge.n	8006e7a <__kernel_rem_pio2+0x5c2>
 8006e66:	f1b9 0f00 	cmp.w	r9, #0
 8006e6a:	d002      	beq.n	8006e72 <__kernel_rem_pio2+0x5ba>
 8006e6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e70:	4619      	mov	r1, r3
 8006e72:	9b04      	ldr	r3, [sp, #16]
 8006e74:	e9c3 0100 	strd	r0, r1, [r3]
 8006e78:	e78f      	b.n	8006d9a <__kernel_rem_pio2+0x4e2>
 8006e7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e7e:	f7f9 f9a9 	bl	80001d4 <__adddf3>
 8006e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e86:	e7eb      	b.n	8006e60 <__kernel_rem_pio2+0x5a8>
 8006e88:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006e8c:	f7f9 f9a2 	bl	80001d4 <__adddf3>
 8006e90:	3c01      	subs	r4, #1
 8006e92:	e7c1      	b.n	8006e18 <__kernel_rem_pio2+0x560>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	e7c6      	b.n	8006e28 <__kernel_rem_pio2+0x570>
 8006e9a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006e9e:	f7f9 f999 	bl	80001d4 <__adddf3>
 8006ea2:	3401      	adds	r4, #1
 8006ea4:	e7cb      	b.n	8006e3e <__kernel_rem_pio2+0x586>
 8006ea6:	ed95 7b00 	vldr	d7, [r5]
 8006eaa:	ed8d 7b00 	vstr	d7, [sp]
 8006eae:	ed95 7b02 	vldr	d7, [r5, #8]
 8006eb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eb6:	ec53 2b17 	vmov	r2, r3, d7
 8006eba:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ebe:	f7f9 f989 	bl	80001d4 <__adddf3>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	460f      	mov	r7, r1
 8006eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ece:	f7f9 f97f 	bl	80001d0 <__aeabi_dsub>
 8006ed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed6:	f7f9 f97d 	bl	80001d4 <__adddf3>
 8006eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ede:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006ee2:	e9c5 6700 	strd	r6, r7, [r5]
 8006ee6:	e76d      	b.n	8006dc4 <__kernel_rem_pio2+0x50c>
 8006ee8:	ed94 7b00 	vldr	d7, [r4]
 8006eec:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006ef0:	ec51 0b17 	vmov	r0, r1, d7
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	465b      	mov	r3, fp
 8006ef8:	ed8d 7b00 	vstr	d7, [sp]
 8006efc:	f7f9 f96a 	bl	80001d4 <__adddf3>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4606      	mov	r6, r0
 8006f06:	460f      	mov	r7, r1
 8006f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f0c:	f7f9 f960 	bl	80001d0 <__aeabi_dsub>
 8006f10:	4652      	mov	r2, sl
 8006f12:	465b      	mov	r3, fp
 8006f14:	f7f9 f95e 	bl	80001d4 <__adddf3>
 8006f18:	3d01      	subs	r5, #1
 8006f1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f1e:	e9c4 6700 	strd	r6, r7, [r4]
 8006f22:	e755      	b.n	8006dd0 <__kernel_rem_pio2+0x518>
 8006f24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f28:	f7f9 f954 	bl	80001d4 <__adddf3>
 8006f2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f30:	e758      	b.n	8006de4 <__kernel_rem_pio2+0x52c>
 8006f32:	bf00      	nop
 8006f34:	f3af 8000 	nop.w
	...
 8006f40:	41700000 	.word	0x41700000
 8006f44:	3e700000 	.word	0x3e700000
 8006f48:	9b04      	ldr	r3, [sp, #16]
 8006f4a:	9a04      	ldr	r2, [sp, #16]
 8006f4c:	601f      	str	r7, [r3, #0]
 8006f4e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006f52:	605c      	str	r4, [r3, #4]
 8006f54:	609d      	str	r5, [r3, #8]
 8006f56:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f5a:	60d3      	str	r3, [r2, #12]
 8006f5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f60:	6110      	str	r0, [r2, #16]
 8006f62:	6153      	str	r3, [r2, #20]
 8006f64:	e719      	b.n	8006d9a <__kernel_rem_pio2+0x4e2>
 8006f66:	bf00      	nop

08006f68 <scalbn>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	ec55 4b10 	vmov	r4, r5, d0
 8006f6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006f72:	4606      	mov	r6, r0
 8006f74:	462b      	mov	r3, r5
 8006f76:	b991      	cbnz	r1, 8006f9e <scalbn+0x36>
 8006f78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006f7c:	4323      	orrs	r3, r4
 8006f7e:	d03d      	beq.n	8006ffc <scalbn+0x94>
 8006f80:	4b35      	ldr	r3, [pc, #212]	@ (8007058 <scalbn+0xf0>)
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	2200      	movs	r2, #0
 8006f88:	f7f9 fada 	bl	8000540 <__aeabi_dmul>
 8006f8c:	4b33      	ldr	r3, [pc, #204]	@ (800705c <scalbn+0xf4>)
 8006f8e:	429e      	cmp	r6, r3
 8006f90:	4604      	mov	r4, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	da0f      	bge.n	8006fb6 <scalbn+0x4e>
 8006f96:	a328      	add	r3, pc, #160	@ (adr r3, 8007038 <scalbn+0xd0>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	e01e      	b.n	8006fdc <scalbn+0x74>
 8006f9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006fa2:	4291      	cmp	r1, r2
 8006fa4:	d10b      	bne.n	8006fbe <scalbn+0x56>
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	4620      	mov	r0, r4
 8006faa:	4629      	mov	r1, r5
 8006fac:	f7f9 f912 	bl	80001d4 <__adddf3>
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	e022      	b.n	8006ffc <scalbn+0x94>
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006fbc:	3936      	subs	r1, #54	@ 0x36
 8006fbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006fc2:	4296      	cmp	r6, r2
 8006fc4:	dd0d      	ble.n	8006fe2 <scalbn+0x7a>
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007040 <scalbn+0xd8>)
 8006fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fce:	da02      	bge.n	8006fd6 <scalbn+0x6e>
 8006fd0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007048 <scalbn+0xe0>)
 8006fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007040 <scalbn+0xd8>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 fab0 	bl	8000540 <__aeabi_dmul>
 8006fe0:	e7e6      	b.n	8006fb0 <scalbn+0x48>
 8006fe2:	1872      	adds	r2, r6, r1
 8006fe4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006fe8:	428a      	cmp	r2, r1
 8006fea:	dcec      	bgt.n	8006fc6 <scalbn+0x5e>
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	dd08      	ble.n	8007002 <scalbn+0x9a>
 8006ff0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006ff4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006ff8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ffc:	ec45 4b10 	vmov	d0, r4, r5
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007006:	da08      	bge.n	800701a <scalbn+0xb2>
 8007008:	2d00      	cmp	r5, #0
 800700a:	a10b      	add	r1, pc, #44	@ (adr r1, 8007038 <scalbn+0xd0>)
 800700c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007010:	dac1      	bge.n	8006f96 <scalbn+0x2e>
 8007012:	a10f      	add	r1, pc, #60	@ (adr r1, 8007050 <scalbn+0xe8>)
 8007014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007018:	e7bd      	b.n	8006f96 <scalbn+0x2e>
 800701a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800701e:	3236      	adds	r2, #54	@ 0x36
 8007020:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007024:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007028:	4620      	mov	r0, r4
 800702a:	4b0d      	ldr	r3, [pc, #52]	@ (8007060 <scalbn+0xf8>)
 800702c:	4629      	mov	r1, r5
 800702e:	2200      	movs	r2, #0
 8007030:	e7d4      	b.n	8006fdc <scalbn+0x74>
 8007032:	bf00      	nop
 8007034:	f3af 8000 	nop.w
 8007038:	c2f8f359 	.word	0xc2f8f359
 800703c:	01a56e1f 	.word	0x01a56e1f
 8007040:	8800759c 	.word	0x8800759c
 8007044:	7e37e43c 	.word	0x7e37e43c
 8007048:	8800759c 	.word	0x8800759c
 800704c:	fe37e43c 	.word	0xfe37e43c
 8007050:	c2f8f359 	.word	0xc2f8f359
 8007054:	81a56e1f 	.word	0x81a56e1f
 8007058:	43500000 	.word	0x43500000
 800705c:	ffff3cb0 	.word	0xffff3cb0
 8007060:	3c900000 	.word	0x3c900000
 8007064:	00000000 	.word	0x00000000

08007068 <floor>:
 8007068:	ec51 0b10 	vmov	r0, r1, d0
 800706c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007074:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007078:	2e13      	cmp	r6, #19
 800707a:	460c      	mov	r4, r1
 800707c:	4605      	mov	r5, r0
 800707e:	4680      	mov	r8, r0
 8007080:	dc34      	bgt.n	80070ec <floor+0x84>
 8007082:	2e00      	cmp	r6, #0
 8007084:	da17      	bge.n	80070b6 <floor+0x4e>
 8007086:	a332      	add	r3, pc, #200	@ (adr r3, 8007150 <floor+0xe8>)
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	f7f9 f8a2 	bl	80001d4 <__adddf3>
 8007090:	2200      	movs	r2, #0
 8007092:	2300      	movs	r3, #0
 8007094:	f7f9 fce4 	bl	8000a60 <__aeabi_dcmpgt>
 8007098:	b150      	cbz	r0, 80070b0 <floor+0x48>
 800709a:	2c00      	cmp	r4, #0
 800709c:	da55      	bge.n	800714a <floor+0xe2>
 800709e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80070a2:	432c      	orrs	r4, r5
 80070a4:	2500      	movs	r5, #0
 80070a6:	42ac      	cmp	r4, r5
 80070a8:	4c2b      	ldr	r4, [pc, #172]	@ (8007158 <floor+0xf0>)
 80070aa:	bf08      	it	eq
 80070ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80070b0:	4621      	mov	r1, r4
 80070b2:	4628      	mov	r0, r5
 80070b4:	e023      	b.n	80070fe <floor+0x96>
 80070b6:	4f29      	ldr	r7, [pc, #164]	@ (800715c <floor+0xf4>)
 80070b8:	4137      	asrs	r7, r6
 80070ba:	ea01 0307 	and.w	r3, r1, r7
 80070be:	4303      	orrs	r3, r0
 80070c0:	d01d      	beq.n	80070fe <floor+0x96>
 80070c2:	a323      	add	r3, pc, #140	@ (adr r3, 8007150 <floor+0xe8>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 f884 	bl	80001d4 <__adddf3>
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fcc6 	bl	8000a60 <__aeabi_dcmpgt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d0eb      	beq.n	80070b0 <floor+0x48>
 80070d8:	2c00      	cmp	r4, #0
 80070da:	bfbe      	ittt	lt
 80070dc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80070e0:	4133      	asrlt	r3, r6
 80070e2:	18e4      	addlt	r4, r4, r3
 80070e4:	ea24 0407 	bic.w	r4, r4, r7
 80070e8:	2500      	movs	r5, #0
 80070ea:	e7e1      	b.n	80070b0 <floor+0x48>
 80070ec:	2e33      	cmp	r6, #51	@ 0x33
 80070ee:	dd0a      	ble.n	8007106 <floor+0x9e>
 80070f0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80070f4:	d103      	bne.n	80070fe <floor+0x96>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	f7f9 f86b 	bl	80001d4 <__adddf3>
 80070fe:	ec41 0b10 	vmov	d0, r0, r1
 8007102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007106:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800710a:	f04f 37ff 	mov.w	r7, #4294967295
 800710e:	40df      	lsrs	r7, r3
 8007110:	4207      	tst	r7, r0
 8007112:	d0f4      	beq.n	80070fe <floor+0x96>
 8007114:	a30e      	add	r3, pc, #56	@ (adr r3, 8007150 <floor+0xe8>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f85b 	bl	80001d4 <__adddf3>
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	f7f9 fc9d 	bl	8000a60 <__aeabi_dcmpgt>
 8007126:	2800      	cmp	r0, #0
 8007128:	d0c2      	beq.n	80070b0 <floor+0x48>
 800712a:	2c00      	cmp	r4, #0
 800712c:	da0a      	bge.n	8007144 <floor+0xdc>
 800712e:	2e14      	cmp	r6, #20
 8007130:	d101      	bne.n	8007136 <floor+0xce>
 8007132:	3401      	adds	r4, #1
 8007134:	e006      	b.n	8007144 <floor+0xdc>
 8007136:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800713a:	2301      	movs	r3, #1
 800713c:	40b3      	lsls	r3, r6
 800713e:	441d      	add	r5, r3
 8007140:	4545      	cmp	r5, r8
 8007142:	d3f6      	bcc.n	8007132 <floor+0xca>
 8007144:	ea25 0507 	bic.w	r5, r5, r7
 8007148:	e7b2      	b.n	80070b0 <floor+0x48>
 800714a:	2500      	movs	r5, #0
 800714c:	462c      	mov	r4, r5
 800714e:	e7af      	b.n	80070b0 <floor+0x48>
 8007150:	8800759c 	.word	0x8800759c
 8007154:	7e37e43c 	.word	0x7e37e43c
 8007158:	bff00000 	.word	0xbff00000
 800715c:	000fffff 	.word	0x000fffff

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
